
DCMD-serial-commands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007488  08007488  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007490  08007490  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000080  08007518  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08007518  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e380  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002088  00000000  00000000  0002e428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000304b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00031118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bcf  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5f1  00000000  00000000  00044877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fa8e  00000000  00000000  00052e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c28f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039fc  00000000  00000000  000c2948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006f48 	.word	0x08006f48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08006f48 	.word	0x08006f48

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cfrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	0008      	movs	r0, r1
 800024c:	4661      	mov	r1, ip
 800024e:	e7ff      	b.n	8000250 <__aeabi_cfcmpeq>

08000250 <__aeabi_cfcmpeq>:
 8000250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000252:	f000 f9d1 	bl	80005f8 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	d401      	bmi.n	800025e <__aeabi_cfcmpeq+0xe>
 800025a:	2100      	movs	r1, #0
 800025c:	42c8      	cmn	r0, r1
 800025e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000260 <__aeabi_fcmpeq>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f95d 	bl	8000520 <__eqsf2>
 8000266:	4240      	negs	r0, r0
 8000268:	3001      	adds	r0, #1
 800026a:	bd10      	pop	{r4, pc}

0800026c <__aeabi_fcmplt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f9c3 	bl	80005f8 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	db01      	blt.n	800027a <__aeabi_fcmplt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmple>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f9b9 	bl	80005f8 <__lesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dd01      	ble.n	800028e <__aeabi_fcmple+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpgt>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f969 	bl	800056c <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	dc01      	bgt.n	80002a2 <__aeabi_fcmpgt+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_fcmpge>:
 80002a8:	b510      	push	{r4, lr}
 80002aa:	f000 f95f 	bl	800056c <__gesf2>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	da01      	bge.n	80002b6 <__aeabi_fcmpge+0xe>
 80002b2:	2000      	movs	r0, #0
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_uldivmod>:
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d111      	bne.n	80002e4 <__aeabi_uldivmod+0x28>
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	d10f      	bne.n	80002e4 <__aeabi_uldivmod+0x28>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d100      	bne.n	80002ca <__aeabi_uldivmod+0xe>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d002      	beq.n	80002d2 <__aeabi_uldivmod+0x16>
 80002cc:	2100      	movs	r1, #0
 80002ce:	43c9      	mvns	r1, r1
 80002d0:	0008      	movs	r0, r1
 80002d2:	b407      	push	{r0, r1, r2}
 80002d4:	4802      	ldr	r0, [pc, #8]	; (80002e0 <__aeabi_uldivmod+0x24>)
 80002d6:	a102      	add	r1, pc, #8	; (adr r1, 80002e0 <__aeabi_uldivmod+0x24>)
 80002d8:	1840      	adds	r0, r0, r1
 80002da:	9002      	str	r0, [sp, #8]
 80002dc:	bd03      	pop	{r0, r1, pc}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	ffffff65 	.word	0xffffff65
 80002e4:	b403      	push	{r0, r1}
 80002e6:	4668      	mov	r0, sp
 80002e8:	b501      	push	{r0, lr}
 80002ea:	9802      	ldr	r0, [sp, #8]
 80002ec:	f000 f84c 	bl	8000388 <__udivmoddi4>
 80002f0:	9b01      	ldr	r3, [sp, #4]
 80002f2:	469e      	mov	lr, r3
 80002f4:	b002      	add	sp, #8
 80002f6:	bc0c      	pop	{r2, r3}
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_lmul>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	46ce      	mov	lr, r9
 8000300:	4647      	mov	r7, r8
 8000302:	b580      	push	{r7, lr}
 8000304:	0007      	movs	r7, r0
 8000306:	4699      	mov	r9, r3
 8000308:	0c3b      	lsrs	r3, r7, #16
 800030a:	469c      	mov	ip, r3
 800030c:	0413      	lsls	r3, r2, #16
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	001d      	movs	r5, r3
 8000312:	000e      	movs	r6, r1
 8000314:	4661      	mov	r1, ip
 8000316:	0400      	lsls	r0, r0, #16
 8000318:	0c14      	lsrs	r4, r2, #16
 800031a:	0c00      	lsrs	r0, r0, #16
 800031c:	4345      	muls	r5, r0
 800031e:	434b      	muls	r3, r1
 8000320:	4360      	muls	r0, r4
 8000322:	4361      	muls	r1, r4
 8000324:	18c0      	adds	r0, r0, r3
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	1820      	adds	r0, r4, r0
 800032a:	468c      	mov	ip, r1
 800032c:	4283      	cmp	r3, r0
 800032e:	d903      	bls.n	8000338 <__aeabi_lmul+0x3c>
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	025b      	lsls	r3, r3, #9
 8000334:	4698      	mov	r8, r3
 8000336:	44c4      	add	ip, r8
 8000338:	4649      	mov	r1, r9
 800033a:	4379      	muls	r1, r7
 800033c:	4372      	muls	r2, r6
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	4463      	add	r3, ip
 8000342:	042d      	lsls	r5, r5, #16
 8000344:	0c2d      	lsrs	r5, r5, #16
 8000346:	18c9      	adds	r1, r1, r3
 8000348:	0400      	lsls	r0, r0, #16
 800034a:	1940      	adds	r0, r0, r5
 800034c:	1889      	adds	r1, r1, r2
 800034e:	bcc0      	pop	{r6, r7}
 8000350:	46b9      	mov	r9, r7
 8000352:	46b0      	mov	r8, r6
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)

08000358 <__aeabi_f2uiz>:
 8000358:	219e      	movs	r1, #158	; 0x9e
 800035a:	b510      	push	{r4, lr}
 800035c:	05c9      	lsls	r1, r1, #23
 800035e:	1c04      	adds	r4, r0, #0
 8000360:	f7ff ffa2 	bl	80002a8 <__aeabi_fcmpge>
 8000364:	2800      	cmp	r0, #0
 8000366:	d103      	bne.n	8000370 <__aeabi_f2uiz+0x18>
 8000368:	1c20      	adds	r0, r4, #0
 800036a:	f000 fc5d 	bl	8000c28 <__aeabi_f2iz>
 800036e:	bd10      	pop	{r4, pc}
 8000370:	219e      	movs	r1, #158	; 0x9e
 8000372:	1c20      	adds	r0, r4, #0
 8000374:	05c9      	lsls	r1, r1, #23
 8000376:	f000 faa9 	bl	80008cc <__aeabi_fsub>
 800037a:	f000 fc55 	bl	8000c28 <__aeabi_f2iz>
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	061b      	lsls	r3, r3, #24
 8000382:	469c      	mov	ip, r3
 8000384:	4460      	add	r0, ip
 8000386:	e7f2      	b.n	800036e <__aeabi_f2uiz+0x16>

08000388 <__udivmoddi4>:
 8000388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038a:	4657      	mov	r7, sl
 800038c:	464e      	mov	r6, r9
 800038e:	4645      	mov	r5, r8
 8000390:	46de      	mov	lr, fp
 8000392:	b5e0      	push	{r5, r6, r7, lr}
 8000394:	0004      	movs	r4, r0
 8000396:	000d      	movs	r5, r1
 8000398:	4692      	mov	sl, r2
 800039a:	4699      	mov	r9, r3
 800039c:	b083      	sub	sp, #12
 800039e:	428b      	cmp	r3, r1
 80003a0:	d830      	bhi.n	8000404 <__udivmoddi4+0x7c>
 80003a2:	d02d      	beq.n	8000400 <__udivmoddi4+0x78>
 80003a4:	4649      	mov	r1, r9
 80003a6:	4650      	mov	r0, sl
 80003a8:	f001 f8ba 	bl	8001520 <__clzdi2>
 80003ac:	0029      	movs	r1, r5
 80003ae:	0006      	movs	r6, r0
 80003b0:	0020      	movs	r0, r4
 80003b2:	f001 f8b5 	bl	8001520 <__clzdi2>
 80003b6:	1a33      	subs	r3, r6, r0
 80003b8:	4698      	mov	r8, r3
 80003ba:	3b20      	subs	r3, #32
 80003bc:	469b      	mov	fp, r3
 80003be:	d433      	bmi.n	8000428 <__udivmoddi4+0xa0>
 80003c0:	465a      	mov	r2, fp
 80003c2:	4653      	mov	r3, sl
 80003c4:	4093      	lsls	r3, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	001f      	movs	r7, r3
 80003ca:	4653      	mov	r3, sl
 80003cc:	4093      	lsls	r3, r2
 80003ce:	001e      	movs	r6, r3
 80003d0:	42af      	cmp	r7, r5
 80003d2:	d83a      	bhi.n	800044a <__udivmoddi4+0xc2>
 80003d4:	42af      	cmp	r7, r5
 80003d6:	d100      	bne.n	80003da <__udivmoddi4+0x52>
 80003d8:	e078      	b.n	80004cc <__udivmoddi4+0x144>
 80003da:	465b      	mov	r3, fp
 80003dc:	1ba4      	subs	r4, r4, r6
 80003de:	41bd      	sbcs	r5, r7
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	da00      	bge.n	80003e6 <__udivmoddi4+0x5e>
 80003e4:	e075      	b.n	80004d2 <__udivmoddi4+0x14a>
 80003e6:	2200      	movs	r2, #0
 80003e8:	2300      	movs	r3, #0
 80003ea:	9200      	str	r2, [sp, #0]
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	2301      	movs	r3, #1
 80003f0:	465a      	mov	r2, fp
 80003f2:	4093      	lsls	r3, r2
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2301      	movs	r3, #1
 80003f8:	4642      	mov	r2, r8
 80003fa:	4093      	lsls	r3, r2
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	e028      	b.n	8000452 <__udivmoddi4+0xca>
 8000400:	4282      	cmp	r2, r0
 8000402:	d9cf      	bls.n	80003a4 <__udivmoddi4+0x1c>
 8000404:	2200      	movs	r2, #0
 8000406:	2300      	movs	r3, #0
 8000408:	9200      	str	r2, [sp, #0]
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <__udivmoddi4+0x8e>
 8000412:	601c      	str	r4, [r3, #0]
 8000414:	605d      	str	r5, [r3, #4]
 8000416:	9800      	ldr	r0, [sp, #0]
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	b003      	add	sp, #12
 800041c:	bcf0      	pop	{r4, r5, r6, r7}
 800041e:	46bb      	mov	fp, r7
 8000420:	46b2      	mov	sl, r6
 8000422:	46a9      	mov	r9, r5
 8000424:	46a0      	mov	r8, r4
 8000426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000428:	4642      	mov	r2, r8
 800042a:	2320      	movs	r3, #32
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	4652      	mov	r2, sl
 8000430:	40da      	lsrs	r2, r3
 8000432:	4641      	mov	r1, r8
 8000434:	0013      	movs	r3, r2
 8000436:	464a      	mov	r2, r9
 8000438:	408a      	lsls	r2, r1
 800043a:	0017      	movs	r7, r2
 800043c:	4642      	mov	r2, r8
 800043e:	431f      	orrs	r7, r3
 8000440:	4653      	mov	r3, sl
 8000442:	4093      	lsls	r3, r2
 8000444:	001e      	movs	r6, r3
 8000446:	42af      	cmp	r7, r5
 8000448:	d9c4      	bls.n	80003d4 <__udivmoddi4+0x4c>
 800044a:	2200      	movs	r2, #0
 800044c:	2300      	movs	r3, #0
 800044e:	9200      	str	r2, [sp, #0]
 8000450:	9301      	str	r3, [sp, #4]
 8000452:	4643      	mov	r3, r8
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0d9      	beq.n	800040c <__udivmoddi4+0x84>
 8000458:	07fb      	lsls	r3, r7, #31
 800045a:	0872      	lsrs	r2, r6, #1
 800045c:	431a      	orrs	r2, r3
 800045e:	4646      	mov	r6, r8
 8000460:	087b      	lsrs	r3, r7, #1
 8000462:	e00e      	b.n	8000482 <__udivmoddi4+0xfa>
 8000464:	42ab      	cmp	r3, r5
 8000466:	d101      	bne.n	800046c <__udivmoddi4+0xe4>
 8000468:	42a2      	cmp	r2, r4
 800046a:	d80c      	bhi.n	8000486 <__udivmoddi4+0xfe>
 800046c:	1aa4      	subs	r4, r4, r2
 800046e:	419d      	sbcs	r5, r3
 8000470:	2001      	movs	r0, #1
 8000472:	1924      	adds	r4, r4, r4
 8000474:	416d      	adcs	r5, r5
 8000476:	2100      	movs	r1, #0
 8000478:	3e01      	subs	r6, #1
 800047a:	1824      	adds	r4, r4, r0
 800047c:	414d      	adcs	r5, r1
 800047e:	2e00      	cmp	r6, #0
 8000480:	d006      	beq.n	8000490 <__udivmoddi4+0x108>
 8000482:	42ab      	cmp	r3, r5
 8000484:	d9ee      	bls.n	8000464 <__udivmoddi4+0xdc>
 8000486:	3e01      	subs	r6, #1
 8000488:	1924      	adds	r4, r4, r4
 800048a:	416d      	adcs	r5, r5
 800048c:	2e00      	cmp	r6, #0
 800048e:	d1f8      	bne.n	8000482 <__udivmoddi4+0xfa>
 8000490:	9800      	ldr	r0, [sp, #0]
 8000492:	9901      	ldr	r1, [sp, #4]
 8000494:	465b      	mov	r3, fp
 8000496:	1900      	adds	r0, r0, r4
 8000498:	4169      	adcs	r1, r5
 800049a:	2b00      	cmp	r3, #0
 800049c:	db24      	blt.n	80004e8 <__udivmoddi4+0x160>
 800049e:	002b      	movs	r3, r5
 80004a0:	465a      	mov	r2, fp
 80004a2:	4644      	mov	r4, r8
 80004a4:	40d3      	lsrs	r3, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	40e2      	lsrs	r2, r4
 80004aa:	001c      	movs	r4, r3
 80004ac:	465b      	mov	r3, fp
 80004ae:	0015      	movs	r5, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	db2a      	blt.n	800050a <__udivmoddi4+0x182>
 80004b4:	0026      	movs	r6, r4
 80004b6:	409e      	lsls	r6, r3
 80004b8:	0033      	movs	r3, r6
 80004ba:	0026      	movs	r6, r4
 80004bc:	4647      	mov	r7, r8
 80004be:	40be      	lsls	r6, r7
 80004c0:	0032      	movs	r2, r6
 80004c2:	1a80      	subs	r0, r0, r2
 80004c4:	4199      	sbcs	r1, r3
 80004c6:	9000      	str	r0, [sp, #0]
 80004c8:	9101      	str	r1, [sp, #4]
 80004ca:	e79f      	b.n	800040c <__udivmoddi4+0x84>
 80004cc:	42a3      	cmp	r3, r4
 80004ce:	d8bc      	bhi.n	800044a <__udivmoddi4+0xc2>
 80004d0:	e783      	b.n	80003da <__udivmoddi4+0x52>
 80004d2:	4642      	mov	r2, r8
 80004d4:	2320      	movs	r3, #32
 80004d6:	2100      	movs	r1, #0
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	2200      	movs	r2, #0
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	9201      	str	r2, [sp, #4]
 80004e0:	2201      	movs	r2, #1
 80004e2:	40da      	lsrs	r2, r3
 80004e4:	9201      	str	r2, [sp, #4]
 80004e6:	e786      	b.n	80003f6 <__udivmoddi4+0x6e>
 80004e8:	4642      	mov	r2, r8
 80004ea:	2320      	movs	r3, #32
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	002a      	movs	r2, r5
 80004f0:	4646      	mov	r6, r8
 80004f2:	409a      	lsls	r2, r3
 80004f4:	0023      	movs	r3, r4
 80004f6:	40f3      	lsrs	r3, r6
 80004f8:	4644      	mov	r4, r8
 80004fa:	4313      	orrs	r3, r2
 80004fc:	002a      	movs	r2, r5
 80004fe:	40e2      	lsrs	r2, r4
 8000500:	001c      	movs	r4, r3
 8000502:	465b      	mov	r3, fp
 8000504:	0015      	movs	r5, r2
 8000506:	2b00      	cmp	r3, #0
 8000508:	dad4      	bge.n	80004b4 <__udivmoddi4+0x12c>
 800050a:	4642      	mov	r2, r8
 800050c:	002f      	movs	r7, r5
 800050e:	2320      	movs	r3, #32
 8000510:	0026      	movs	r6, r4
 8000512:	4097      	lsls	r7, r2
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	40de      	lsrs	r6, r3
 8000518:	003b      	movs	r3, r7
 800051a:	4333      	orrs	r3, r6
 800051c:	e7cd      	b.n	80004ba <__udivmoddi4+0x132>
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__eqsf2>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0042      	lsls	r2, r0, #1
 8000524:	0245      	lsls	r5, r0, #9
 8000526:	024e      	lsls	r6, r1, #9
 8000528:	004c      	lsls	r4, r1, #1
 800052a:	0fc3      	lsrs	r3, r0, #31
 800052c:	0a6d      	lsrs	r5, r5, #9
 800052e:	2001      	movs	r0, #1
 8000530:	0e12      	lsrs	r2, r2, #24
 8000532:	0a76      	lsrs	r6, r6, #9
 8000534:	0e24      	lsrs	r4, r4, #24
 8000536:	0fc9      	lsrs	r1, r1, #31
 8000538:	2aff      	cmp	r2, #255	; 0xff
 800053a:	d006      	beq.n	800054a <__eqsf2+0x2a>
 800053c:	2cff      	cmp	r4, #255	; 0xff
 800053e:	d003      	beq.n	8000548 <__eqsf2+0x28>
 8000540:	42a2      	cmp	r2, r4
 8000542:	d101      	bne.n	8000548 <__eqsf2+0x28>
 8000544:	42b5      	cmp	r5, r6
 8000546:	d006      	beq.n	8000556 <__eqsf2+0x36>
 8000548:	bd70      	pop	{r4, r5, r6, pc}
 800054a:	2d00      	cmp	r5, #0
 800054c:	d1fc      	bne.n	8000548 <__eqsf2+0x28>
 800054e:	2cff      	cmp	r4, #255	; 0xff
 8000550:	d1fa      	bne.n	8000548 <__eqsf2+0x28>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d1f8      	bne.n	8000548 <__eqsf2+0x28>
 8000556:	428b      	cmp	r3, r1
 8000558:	d006      	beq.n	8000568 <__eqsf2+0x48>
 800055a:	2001      	movs	r0, #1
 800055c:	2a00      	cmp	r2, #0
 800055e:	d1f3      	bne.n	8000548 <__eqsf2+0x28>
 8000560:	0028      	movs	r0, r5
 8000562:	1e43      	subs	r3, r0, #1
 8000564:	4198      	sbcs	r0, r3
 8000566:	e7ef      	b.n	8000548 <__eqsf2+0x28>
 8000568:	2000      	movs	r0, #0
 800056a:	e7ed      	b.n	8000548 <__eqsf2+0x28>

0800056c <__gesf2>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0042      	lsls	r2, r0, #1
 8000570:	0245      	lsls	r5, r0, #9
 8000572:	024e      	lsls	r6, r1, #9
 8000574:	004c      	lsls	r4, r1, #1
 8000576:	0fc3      	lsrs	r3, r0, #31
 8000578:	0a6d      	lsrs	r5, r5, #9
 800057a:	0e12      	lsrs	r2, r2, #24
 800057c:	0a76      	lsrs	r6, r6, #9
 800057e:	0e24      	lsrs	r4, r4, #24
 8000580:	0fc8      	lsrs	r0, r1, #31
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d01b      	beq.n	80005be <__gesf2+0x52>
 8000586:	2cff      	cmp	r4, #255	; 0xff
 8000588:	d00e      	beq.n	80005a8 <__gesf2+0x3c>
 800058a:	2a00      	cmp	r2, #0
 800058c:	d11b      	bne.n	80005c6 <__gesf2+0x5a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d101      	bne.n	8000596 <__gesf2+0x2a>
 8000592:	2e00      	cmp	r6, #0
 8000594:	d01c      	beq.n	80005d0 <__gesf2+0x64>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d00c      	beq.n	80005b4 <__gesf2+0x48>
 800059a:	4283      	cmp	r3, r0
 800059c:	d01c      	beq.n	80005d8 <__gesf2+0x6c>
 800059e:	2102      	movs	r1, #2
 80005a0:	1e58      	subs	r0, r3, #1
 80005a2:	4008      	ands	r0, r1
 80005a4:	3801      	subs	r0, #1
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d122      	bne.n	80005f2 <__gesf2+0x86>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d1f4      	bne.n	800059a <__gesf2+0x2e>
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d1f2      	bne.n	800059a <__gesf2+0x2e>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d1f6      	bne.n	80005a6 <__gesf2+0x3a>
 80005b8:	2001      	movs	r0, #1
 80005ba:	4240      	negs	r0, r0
 80005bc:	e7f3      	b.n	80005a6 <__gesf2+0x3a>
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d117      	bne.n	80005f2 <__gesf2+0x86>
 80005c2:	2cff      	cmp	r4, #255	; 0xff
 80005c4:	d0f0      	beq.n	80005a8 <__gesf2+0x3c>
 80005c6:	2c00      	cmp	r4, #0
 80005c8:	d1e7      	bne.n	800059a <__gesf2+0x2e>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d1e5      	bne.n	800059a <__gesf2+0x2e>
 80005ce:	e7e6      	b.n	800059e <__gesf2+0x32>
 80005d0:	2000      	movs	r0, #0
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e7      	beq.n	80005a6 <__gesf2+0x3a>
 80005d6:	e7e2      	b.n	800059e <__gesf2+0x32>
 80005d8:	42a2      	cmp	r2, r4
 80005da:	dc05      	bgt.n	80005e8 <__gesf2+0x7c>
 80005dc:	dbea      	blt.n	80005b4 <__gesf2+0x48>
 80005de:	42b5      	cmp	r5, r6
 80005e0:	d802      	bhi.n	80005e8 <__gesf2+0x7c>
 80005e2:	d3e7      	bcc.n	80005b4 <__gesf2+0x48>
 80005e4:	2000      	movs	r0, #0
 80005e6:	e7de      	b.n	80005a6 <__gesf2+0x3a>
 80005e8:	4243      	negs	r3, r0
 80005ea:	4158      	adcs	r0, r3
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	3801      	subs	r0, #1
 80005f0:	e7d9      	b.n	80005a6 <__gesf2+0x3a>
 80005f2:	2002      	movs	r0, #2
 80005f4:	4240      	negs	r0, r0
 80005f6:	e7d6      	b.n	80005a6 <__gesf2+0x3a>

080005f8 <__lesf2>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0042      	lsls	r2, r0, #1
 80005fc:	0245      	lsls	r5, r0, #9
 80005fe:	024e      	lsls	r6, r1, #9
 8000600:	004c      	lsls	r4, r1, #1
 8000602:	0fc3      	lsrs	r3, r0, #31
 8000604:	0a6d      	lsrs	r5, r5, #9
 8000606:	0e12      	lsrs	r2, r2, #24
 8000608:	0a76      	lsrs	r6, r6, #9
 800060a:	0e24      	lsrs	r4, r4, #24
 800060c:	0fc8      	lsrs	r0, r1, #31
 800060e:	2aff      	cmp	r2, #255	; 0xff
 8000610:	d00b      	beq.n	800062a <__lesf2+0x32>
 8000612:	2cff      	cmp	r4, #255	; 0xff
 8000614:	d00d      	beq.n	8000632 <__lesf2+0x3a>
 8000616:	2a00      	cmp	r2, #0
 8000618:	d11f      	bne.n	800065a <__lesf2+0x62>
 800061a:	2c00      	cmp	r4, #0
 800061c:	d116      	bne.n	800064c <__lesf2+0x54>
 800061e:	2e00      	cmp	r6, #0
 8000620:	d114      	bne.n	800064c <__lesf2+0x54>
 8000622:	2000      	movs	r0, #0
 8000624:	2d00      	cmp	r5, #0
 8000626:	d010      	beq.n	800064a <__lesf2+0x52>
 8000628:	e009      	b.n	800063e <__lesf2+0x46>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d10c      	bne.n	8000648 <__lesf2+0x50>
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d113      	bne.n	800065a <__lesf2+0x62>
 8000632:	2e00      	cmp	r6, #0
 8000634:	d108      	bne.n	8000648 <__lesf2+0x50>
 8000636:	2a00      	cmp	r2, #0
 8000638:	d008      	beq.n	800064c <__lesf2+0x54>
 800063a:	4283      	cmp	r3, r0
 800063c:	d012      	beq.n	8000664 <__lesf2+0x6c>
 800063e:	2102      	movs	r1, #2
 8000640:	1e58      	subs	r0, r3, #1
 8000642:	4008      	ands	r0, r1
 8000644:	3801      	subs	r0, #1
 8000646:	e000      	b.n	800064a <__lesf2+0x52>
 8000648:	2002      	movs	r0, #2
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	2d00      	cmp	r5, #0
 800064e:	d1f4      	bne.n	800063a <__lesf2+0x42>
 8000650:	2800      	cmp	r0, #0
 8000652:	d1fa      	bne.n	800064a <__lesf2+0x52>
 8000654:	2001      	movs	r0, #1
 8000656:	4240      	negs	r0, r0
 8000658:	e7f7      	b.n	800064a <__lesf2+0x52>
 800065a:	2c00      	cmp	r4, #0
 800065c:	d1ed      	bne.n	800063a <__lesf2+0x42>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1eb      	bne.n	800063a <__lesf2+0x42>
 8000662:	e7ec      	b.n	800063e <__lesf2+0x46>
 8000664:	42a2      	cmp	r2, r4
 8000666:	dc05      	bgt.n	8000674 <__lesf2+0x7c>
 8000668:	dbf2      	blt.n	8000650 <__lesf2+0x58>
 800066a:	42b5      	cmp	r5, r6
 800066c:	d802      	bhi.n	8000674 <__lesf2+0x7c>
 800066e:	d3ef      	bcc.n	8000650 <__lesf2+0x58>
 8000670:	2000      	movs	r0, #0
 8000672:	e7ea      	b.n	800064a <__lesf2+0x52>
 8000674:	4243      	negs	r3, r0
 8000676:	4158      	adcs	r0, r3
 8000678:	0040      	lsls	r0, r0, #1
 800067a:	3801      	subs	r0, #1
 800067c:	e7e5      	b.n	800064a <__lesf2+0x52>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_fmul>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0244      	lsls	r4, r0, #9
 800068a:	0045      	lsls	r5, r0, #1
 800068c:	b5c0      	push	{r6, r7, lr}
 800068e:	0a64      	lsrs	r4, r4, #9
 8000690:	1c0f      	adds	r7, r1, #0
 8000692:	0e2d      	lsrs	r5, r5, #24
 8000694:	0fc6      	lsrs	r6, r0, #31
 8000696:	2d00      	cmp	r5, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x1c>
 800069a:	e08d      	b.n	80007b8 <__aeabi_fmul+0x138>
 800069c:	2dff      	cmp	r5, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fmul+0x22>
 80006a0:	e092      	b.n	80007c8 <__aeabi_fmul+0x148>
 80006a2:	2300      	movs	r3, #0
 80006a4:	2080      	movs	r0, #128	; 0x80
 80006a6:	4699      	mov	r9, r3
 80006a8:	469a      	mov	sl, r3
 80006aa:	00e4      	lsls	r4, r4, #3
 80006ac:	04c0      	lsls	r0, r0, #19
 80006ae:	4304      	orrs	r4, r0
 80006b0:	3d7f      	subs	r5, #127	; 0x7f
 80006b2:	0278      	lsls	r0, r7, #9
 80006b4:	0a43      	lsrs	r3, r0, #9
 80006b6:	4698      	mov	r8, r3
 80006b8:	007b      	lsls	r3, r7, #1
 80006ba:	0e1b      	lsrs	r3, r3, #24
 80006bc:	0fff      	lsrs	r7, r7, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x44>
 80006c2:	e070      	b.n	80007a6 <__aeabi_fmul+0x126>
 80006c4:	2bff      	cmp	r3, #255	; 0xff
 80006c6:	d100      	bne.n	80006ca <__aeabi_fmul+0x4a>
 80006c8:	e086      	b.n	80007d8 <__aeabi_fmul+0x158>
 80006ca:	4642      	mov	r2, r8
 80006cc:	00d0      	lsls	r0, r2, #3
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	3b7f      	subs	r3, #127	; 0x7f
 80006d2:	18ed      	adds	r5, r5, r3
 80006d4:	2300      	movs	r3, #0
 80006d6:	04d2      	lsls	r2, r2, #19
 80006d8:	4302      	orrs	r2, r0
 80006da:	4690      	mov	r8, r2
 80006dc:	469c      	mov	ip, r3
 80006de:	0031      	movs	r1, r6
 80006e0:	464b      	mov	r3, r9
 80006e2:	4079      	eors	r1, r7
 80006e4:	1c68      	adds	r0, r5, #1
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d81c      	bhi.n	8000724 <__aeabi_fmul+0xa4>
 80006ea:	4a76      	ldr	r2, [pc, #472]	; (80008c4 <__aeabi_fmul+0x244>)
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	58d3      	ldr	r3, [r2, r3]
 80006f0:	469f      	mov	pc, r3
 80006f2:	0039      	movs	r1, r7
 80006f4:	4644      	mov	r4, r8
 80006f6:	46e2      	mov	sl, ip
 80006f8:	4653      	mov	r3, sl
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d00f      	beq.n	800071e <__aeabi_fmul+0x9e>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d100      	bne.n	8000704 <__aeabi_fmul+0x84>
 8000702:	e0d7      	b.n	80008b4 <__aeabi_fmul+0x234>
 8000704:	2b01      	cmp	r3, #1
 8000706:	d137      	bne.n	8000778 <__aeabi_fmul+0xf8>
 8000708:	2000      	movs	r0, #0
 800070a:	2400      	movs	r4, #0
 800070c:	05c0      	lsls	r0, r0, #23
 800070e:	4320      	orrs	r0, r4
 8000710:	07c9      	lsls	r1, r1, #31
 8000712:	4308      	orrs	r0, r1
 8000714:	bce0      	pop	{r5, r6, r7}
 8000716:	46ba      	mov	sl, r7
 8000718:	46b1      	mov	r9, r6
 800071a:	46a8      	mov	r8, r5
 800071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071e:	20ff      	movs	r0, #255	; 0xff
 8000720:	2400      	movs	r4, #0
 8000722:	e7f3      	b.n	800070c <__aeabi_fmul+0x8c>
 8000724:	0c26      	lsrs	r6, r4, #16
 8000726:	0424      	lsls	r4, r4, #16
 8000728:	0c22      	lsrs	r2, r4, #16
 800072a:	4644      	mov	r4, r8
 800072c:	0424      	lsls	r4, r4, #16
 800072e:	0c24      	lsrs	r4, r4, #16
 8000730:	4643      	mov	r3, r8
 8000732:	0027      	movs	r7, r4
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	4357      	muls	r7, r2
 8000738:	4374      	muls	r4, r6
 800073a:	435a      	muls	r2, r3
 800073c:	435e      	muls	r6, r3
 800073e:	1912      	adds	r2, r2, r4
 8000740:	0c3b      	lsrs	r3, r7, #16
 8000742:	189b      	adds	r3, r3, r2
 8000744:	429c      	cmp	r4, r3
 8000746:	d903      	bls.n	8000750 <__aeabi_fmul+0xd0>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0252      	lsls	r2, r2, #9
 800074c:	4694      	mov	ip, r2
 800074e:	4466      	add	r6, ip
 8000750:	043f      	lsls	r7, r7, #16
 8000752:	041a      	lsls	r2, r3, #16
 8000754:	0c3f      	lsrs	r7, r7, #16
 8000756:	19d2      	adds	r2, r2, r7
 8000758:	0194      	lsls	r4, r2, #6
 800075a:	1e67      	subs	r7, r4, #1
 800075c:	41bc      	sbcs	r4, r7
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	0e92      	lsrs	r2, r2, #26
 8000762:	199b      	adds	r3, r3, r6
 8000764:	4314      	orrs	r4, r2
 8000766:	019b      	lsls	r3, r3, #6
 8000768:	431c      	orrs	r4, r3
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	d400      	bmi.n	8000770 <__aeabi_fmul+0xf0>
 800076e:	e09b      	b.n	80008a8 <__aeabi_fmul+0x228>
 8000770:	2301      	movs	r3, #1
 8000772:	0862      	lsrs	r2, r4, #1
 8000774:	401c      	ands	r4, r3
 8000776:	4314      	orrs	r4, r2
 8000778:	0002      	movs	r2, r0
 800077a:	327f      	adds	r2, #127	; 0x7f
 800077c:	2a00      	cmp	r2, #0
 800077e:	dd64      	ble.n	800084a <__aeabi_fmul+0x1ca>
 8000780:	0763      	lsls	r3, r4, #29
 8000782:	d004      	beq.n	800078e <__aeabi_fmul+0x10e>
 8000784:	230f      	movs	r3, #15
 8000786:	4023      	ands	r3, r4
 8000788:	2b04      	cmp	r3, #4
 800078a:	d000      	beq.n	800078e <__aeabi_fmul+0x10e>
 800078c:	3404      	adds	r4, #4
 800078e:	0123      	lsls	r3, r4, #4
 8000790:	d503      	bpl.n	800079a <__aeabi_fmul+0x11a>
 8000792:	0002      	movs	r2, r0
 8000794:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <__aeabi_fmul+0x248>)
 8000796:	3280      	adds	r2, #128	; 0x80
 8000798:	401c      	ands	r4, r3
 800079a:	2afe      	cmp	r2, #254	; 0xfe
 800079c:	dcbf      	bgt.n	800071e <__aeabi_fmul+0x9e>
 800079e:	01a4      	lsls	r4, r4, #6
 80007a0:	0a64      	lsrs	r4, r4, #9
 80007a2:	b2d0      	uxtb	r0, r2
 80007a4:	e7b2      	b.n	800070c <__aeabi_fmul+0x8c>
 80007a6:	4643      	mov	r3, r8
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d13d      	bne.n	8000828 <__aeabi_fmul+0x1a8>
 80007ac:	464a      	mov	r2, r9
 80007ae:	3301      	adds	r3, #1
 80007b0:	431a      	orrs	r2, r3
 80007b2:	4691      	mov	r9, r2
 80007b4:	469c      	mov	ip, r3
 80007b6:	e792      	b.n	80006de <__aeabi_fmul+0x5e>
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	d129      	bne.n	8000810 <__aeabi_fmul+0x190>
 80007bc:	2304      	movs	r3, #4
 80007be:	4699      	mov	r9, r3
 80007c0:	3b03      	subs	r3, #3
 80007c2:	2500      	movs	r5, #0
 80007c4:	469a      	mov	sl, r3
 80007c6:	e774      	b.n	80006b2 <__aeabi_fmul+0x32>
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d11b      	bne.n	8000804 <__aeabi_fmul+0x184>
 80007cc:	2308      	movs	r3, #8
 80007ce:	4699      	mov	r9, r3
 80007d0:	3b06      	subs	r3, #6
 80007d2:	25ff      	movs	r5, #255	; 0xff
 80007d4:	469a      	mov	sl, r3
 80007d6:	e76c      	b.n	80006b2 <__aeabi_fmul+0x32>
 80007d8:	4643      	mov	r3, r8
 80007da:	35ff      	adds	r5, #255	; 0xff
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <__aeabi_fmul+0x178>
 80007e0:	2302      	movs	r3, #2
 80007e2:	464a      	mov	r2, r9
 80007e4:	431a      	orrs	r2, r3
 80007e6:	4691      	mov	r9, r2
 80007e8:	469c      	mov	ip, r3
 80007ea:	e778      	b.n	80006de <__aeabi_fmul+0x5e>
 80007ec:	4653      	mov	r3, sl
 80007ee:	0031      	movs	r1, r6
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fmul+0x176>
 80007f4:	e783      	b.n	80006fe <__aeabi_fmul+0x7e>
 80007f6:	e792      	b.n	800071e <__aeabi_fmul+0x9e>
 80007f8:	2303      	movs	r3, #3
 80007fa:	464a      	mov	r2, r9
 80007fc:	431a      	orrs	r2, r3
 80007fe:	4691      	mov	r9, r2
 8000800:	469c      	mov	ip, r3
 8000802:	e76c      	b.n	80006de <__aeabi_fmul+0x5e>
 8000804:	230c      	movs	r3, #12
 8000806:	4699      	mov	r9, r3
 8000808:	3b09      	subs	r3, #9
 800080a:	25ff      	movs	r5, #255	; 0xff
 800080c:	469a      	mov	sl, r3
 800080e:	e750      	b.n	80006b2 <__aeabi_fmul+0x32>
 8000810:	0020      	movs	r0, r4
 8000812:	f000 fe67 	bl	80014e4 <__clzsi2>
 8000816:	2576      	movs	r5, #118	; 0x76
 8000818:	1f43      	subs	r3, r0, #5
 800081a:	409c      	lsls	r4, r3
 800081c:	2300      	movs	r3, #0
 800081e:	426d      	negs	r5, r5
 8000820:	4699      	mov	r9, r3
 8000822:	469a      	mov	sl, r3
 8000824:	1a2d      	subs	r5, r5, r0
 8000826:	e744      	b.n	80006b2 <__aeabi_fmul+0x32>
 8000828:	4640      	mov	r0, r8
 800082a:	f000 fe5b 	bl	80014e4 <__clzsi2>
 800082e:	4642      	mov	r2, r8
 8000830:	1f43      	subs	r3, r0, #5
 8000832:	409a      	lsls	r2, r3
 8000834:	2300      	movs	r3, #0
 8000836:	1a2d      	subs	r5, r5, r0
 8000838:	4690      	mov	r8, r2
 800083a:	469c      	mov	ip, r3
 800083c:	3d76      	subs	r5, #118	; 0x76
 800083e:	e74e      	b.n	80006de <__aeabi_fmul+0x5e>
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	2100      	movs	r1, #0
 8000844:	20ff      	movs	r0, #255	; 0xff
 8000846:	03e4      	lsls	r4, r4, #15
 8000848:	e760      	b.n	800070c <__aeabi_fmul+0x8c>
 800084a:	2301      	movs	r3, #1
 800084c:	1a9b      	subs	r3, r3, r2
 800084e:	2b1b      	cmp	r3, #27
 8000850:	dd00      	ble.n	8000854 <__aeabi_fmul+0x1d4>
 8000852:	e759      	b.n	8000708 <__aeabi_fmul+0x88>
 8000854:	0022      	movs	r2, r4
 8000856:	309e      	adds	r0, #158	; 0x9e
 8000858:	40da      	lsrs	r2, r3
 800085a:	4084      	lsls	r4, r0
 800085c:	0013      	movs	r3, r2
 800085e:	1e62      	subs	r2, r4, #1
 8000860:	4194      	sbcs	r4, r2
 8000862:	431c      	orrs	r4, r3
 8000864:	0763      	lsls	r3, r4, #29
 8000866:	d004      	beq.n	8000872 <__aeabi_fmul+0x1f2>
 8000868:	230f      	movs	r3, #15
 800086a:	4023      	ands	r3, r4
 800086c:	2b04      	cmp	r3, #4
 800086e:	d000      	beq.n	8000872 <__aeabi_fmul+0x1f2>
 8000870:	3404      	adds	r4, #4
 8000872:	0163      	lsls	r3, r4, #5
 8000874:	d51a      	bpl.n	80008ac <__aeabi_fmul+0x22c>
 8000876:	2001      	movs	r0, #1
 8000878:	2400      	movs	r4, #0
 800087a:	e747      	b.n	800070c <__aeabi_fmul+0x8c>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	03c0      	lsls	r0, r0, #15
 8000880:	4204      	tst	r4, r0
 8000882:	d009      	beq.n	8000898 <__aeabi_fmul+0x218>
 8000884:	4643      	mov	r3, r8
 8000886:	4203      	tst	r3, r0
 8000888:	d106      	bne.n	8000898 <__aeabi_fmul+0x218>
 800088a:	4644      	mov	r4, r8
 800088c:	4304      	orrs	r4, r0
 800088e:	0264      	lsls	r4, r4, #9
 8000890:	0039      	movs	r1, r7
 8000892:	20ff      	movs	r0, #255	; 0xff
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	e739      	b.n	800070c <__aeabi_fmul+0x8c>
 8000898:	2080      	movs	r0, #128	; 0x80
 800089a:	03c0      	lsls	r0, r0, #15
 800089c:	4304      	orrs	r4, r0
 800089e:	0264      	lsls	r4, r4, #9
 80008a0:	0031      	movs	r1, r6
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	e731      	b.n	800070c <__aeabi_fmul+0x8c>
 80008a8:	0028      	movs	r0, r5
 80008aa:	e765      	b.n	8000778 <__aeabi_fmul+0xf8>
 80008ac:	01a4      	lsls	r4, r4, #6
 80008ae:	2000      	movs	r0, #0
 80008b0:	0a64      	lsrs	r4, r4, #9
 80008b2:	e72b      	b.n	800070c <__aeabi_fmul+0x8c>
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	03c0      	lsls	r0, r0, #15
 80008b8:	4304      	orrs	r4, r0
 80008ba:	0264      	lsls	r4, r4, #9
 80008bc:	20ff      	movs	r0, #255	; 0xff
 80008be:	0a64      	lsrs	r4, r4, #9
 80008c0:	e724      	b.n	800070c <__aeabi_fmul+0x8c>
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	08007150 	.word	0x08007150
 80008c8:	f7ffffff 	.word	0xf7ffffff

080008cc <__aeabi_fsub>:
 80008cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ce:	46ce      	mov	lr, r9
 80008d0:	4647      	mov	r7, r8
 80008d2:	0243      	lsls	r3, r0, #9
 80008d4:	0a5b      	lsrs	r3, r3, #9
 80008d6:	024e      	lsls	r6, r1, #9
 80008d8:	00da      	lsls	r2, r3, #3
 80008da:	4694      	mov	ip, r2
 80008dc:	0a72      	lsrs	r2, r6, #9
 80008de:	4691      	mov	r9, r2
 80008e0:	0045      	lsls	r5, r0, #1
 80008e2:	004a      	lsls	r2, r1, #1
 80008e4:	b580      	push	{r7, lr}
 80008e6:	0e2d      	lsrs	r5, r5, #24
 80008e8:	001f      	movs	r7, r3
 80008ea:	0fc4      	lsrs	r4, r0, #31
 80008ec:	0e12      	lsrs	r2, r2, #24
 80008ee:	0fc9      	lsrs	r1, r1, #31
 80008f0:	09b6      	lsrs	r6, r6, #6
 80008f2:	2aff      	cmp	r2, #255	; 0xff
 80008f4:	d05b      	beq.n	80009ae <__aeabi_fsub+0xe2>
 80008f6:	2001      	movs	r0, #1
 80008f8:	4041      	eors	r1, r0
 80008fa:	428c      	cmp	r4, r1
 80008fc:	d039      	beq.n	8000972 <__aeabi_fsub+0xa6>
 80008fe:	1aa8      	subs	r0, r5, r2
 8000900:	2800      	cmp	r0, #0
 8000902:	dd5a      	ble.n	80009ba <__aeabi_fsub+0xee>
 8000904:	2a00      	cmp	r2, #0
 8000906:	d06a      	beq.n	80009de <__aeabi_fsub+0x112>
 8000908:	2dff      	cmp	r5, #255	; 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x42>
 800090c:	e0d9      	b.n	8000ac2 <__aeabi_fsub+0x1f6>
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	04d2      	lsls	r2, r2, #19
 8000912:	4316      	orrs	r6, r2
 8000914:	281b      	cmp	r0, #27
 8000916:	dc00      	bgt.n	800091a <__aeabi_fsub+0x4e>
 8000918:	e0e9      	b.n	8000aee <__aeabi_fsub+0x222>
 800091a:	2001      	movs	r0, #1
 800091c:	4663      	mov	r3, ip
 800091e:	1a18      	subs	r0, r3, r0
 8000920:	0143      	lsls	r3, r0, #5
 8000922:	d400      	bmi.n	8000926 <__aeabi_fsub+0x5a>
 8000924:	e0b4      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000926:	0180      	lsls	r0, r0, #6
 8000928:	0987      	lsrs	r7, r0, #6
 800092a:	0038      	movs	r0, r7
 800092c:	f000 fdda 	bl	80014e4 <__clzsi2>
 8000930:	3805      	subs	r0, #5
 8000932:	4087      	lsls	r7, r0
 8000934:	4285      	cmp	r5, r0
 8000936:	dc00      	bgt.n	800093a <__aeabi_fsub+0x6e>
 8000938:	e0cc      	b.n	8000ad4 <__aeabi_fsub+0x208>
 800093a:	1a2d      	subs	r5, r5, r0
 800093c:	48b5      	ldr	r0, [pc, #724]	; (8000c14 <__aeabi_fsub+0x348>)
 800093e:	4038      	ands	r0, r7
 8000940:	0743      	lsls	r3, r0, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fsub+0x82>
 8000944:	230f      	movs	r3, #15
 8000946:	4003      	ands	r3, r0
 8000948:	2b04      	cmp	r3, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fsub+0x82>
 800094c:	3004      	adds	r0, #4
 800094e:	0143      	lsls	r3, r0, #5
 8000950:	d400      	bmi.n	8000954 <__aeabi_fsub+0x88>
 8000952:	e0a0      	b.n	8000a96 <__aeabi_fsub+0x1ca>
 8000954:	1c6a      	adds	r2, r5, #1
 8000956:	2dfe      	cmp	r5, #254	; 0xfe
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x90>
 800095a:	e08d      	b.n	8000a78 <__aeabi_fsub+0x1ac>
 800095c:	0180      	lsls	r0, r0, #6
 800095e:	0a47      	lsrs	r7, r0, #9
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	05d0      	lsls	r0, r2, #23
 8000964:	4338      	orrs	r0, r7
 8000966:	07e4      	lsls	r4, r4, #31
 8000968:	4320      	orrs	r0, r4
 800096a:	bcc0      	pop	{r6, r7}
 800096c:	46b9      	mov	r9, r7
 800096e:	46b0      	mov	r8, r6
 8000970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000972:	1aa8      	subs	r0, r5, r2
 8000974:	4680      	mov	r8, r0
 8000976:	2800      	cmp	r0, #0
 8000978:	dd45      	ble.n	8000a06 <__aeabi_fsub+0x13a>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d070      	beq.n	8000a60 <__aeabi_fsub+0x194>
 800097e:	2dff      	cmp	r5, #255	; 0xff
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0xb8>
 8000982:	e09e      	b.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	04db      	lsls	r3, r3, #19
 8000988:	431e      	orrs	r6, r3
 800098a:	4643      	mov	r3, r8
 800098c:	2b1b      	cmp	r3, #27
 800098e:	dc00      	bgt.n	8000992 <__aeabi_fsub+0xc6>
 8000990:	e0d2      	b.n	8000b38 <__aeabi_fsub+0x26c>
 8000992:	2001      	movs	r0, #1
 8000994:	4460      	add	r0, ip
 8000996:	0143      	lsls	r3, r0, #5
 8000998:	d57a      	bpl.n	8000a90 <__aeabi_fsub+0x1c4>
 800099a:	3501      	adds	r5, #1
 800099c:	2dff      	cmp	r5, #255	; 0xff
 800099e:	d06b      	beq.n	8000a78 <__aeabi_fsub+0x1ac>
 80009a0:	2301      	movs	r3, #1
 80009a2:	4a9d      	ldr	r2, [pc, #628]	; (8000c18 <__aeabi_fsub+0x34c>)
 80009a4:	4003      	ands	r3, r0
 80009a6:	0840      	lsrs	r0, r0, #1
 80009a8:	4010      	ands	r0, r2
 80009aa:	4318      	orrs	r0, r3
 80009ac:	e7c8      	b.n	8000940 <__aeabi_fsub+0x74>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d020      	beq.n	80009f4 <__aeabi_fsub+0x128>
 80009b2:	428c      	cmp	r4, r1
 80009b4:	d023      	beq.n	80009fe <__aeabi_fsub+0x132>
 80009b6:	0028      	movs	r0, r5
 80009b8:	38ff      	subs	r0, #255	; 0xff
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d039      	beq.n	8000a32 <__aeabi_fsub+0x166>
 80009be:	1b57      	subs	r7, r2, r5
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_fsub+0xfa>
 80009c4:	e09d      	b.n	8000b02 <__aeabi_fsub+0x236>
 80009c6:	4663      	mov	r3, ip
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_fsub+0x102>
 80009cc:	e0db      	b.n	8000b86 <__aeabi_fsub+0x2ba>
 80009ce:	1e7b      	subs	r3, r7, #1
 80009d0:	2f01      	cmp	r7, #1
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x10a>
 80009d4:	e10d      	b.n	8000bf2 <__aeabi_fsub+0x326>
 80009d6:	2fff      	cmp	r7, #255	; 0xff
 80009d8:	d071      	beq.n	8000abe <__aeabi_fsub+0x1f2>
 80009da:	001f      	movs	r7, r3
 80009dc:	e098      	b.n	8000b10 <__aeabi_fsub+0x244>
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x118>
 80009e2:	e0a7      	b.n	8000b34 <__aeabi_fsub+0x268>
 80009e4:	1e42      	subs	r2, r0, #1
 80009e6:	2801      	cmp	r0, #1
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x120>
 80009ea:	e0e6      	b.n	8000bba <__aeabi_fsub+0x2ee>
 80009ec:	28ff      	cmp	r0, #255	; 0xff
 80009ee:	d068      	beq.n	8000ac2 <__aeabi_fsub+0x1f6>
 80009f0:	0010      	movs	r0, r2
 80009f2:	e78f      	b.n	8000914 <__aeabi_fsub+0x48>
 80009f4:	2001      	movs	r0, #1
 80009f6:	4041      	eors	r1, r0
 80009f8:	42a1      	cmp	r1, r4
 80009fa:	d000      	beq.n	80009fe <__aeabi_fsub+0x132>
 80009fc:	e77f      	b.n	80008fe <__aeabi_fsub+0x32>
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	4240      	negs	r0, r0
 8000a02:	4680      	mov	r8, r0
 8000a04:	44a8      	add	r8, r5
 8000a06:	4640      	mov	r0, r8
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d038      	beq.n	8000a7e <__aeabi_fsub+0x1b2>
 8000a0c:	1b51      	subs	r1, r2, r5
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fsub+0x148>
 8000a12:	e0ae      	b.n	8000b72 <__aeabi_fsub+0x2a6>
 8000a14:	2aff      	cmp	r2, #255	; 0xff
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x14e>
 8000a18:	e0df      	b.n	8000bda <__aeabi_fsub+0x30e>
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	4660      	mov	r0, ip
 8000a1e:	04db      	lsls	r3, r3, #19
 8000a20:	4318      	orrs	r0, r3
 8000a22:	4684      	mov	ip, r0
 8000a24:	291b      	cmp	r1, #27
 8000a26:	dc00      	bgt.n	8000a2a <__aeabi_fsub+0x15e>
 8000a28:	e0d9      	b.n	8000bde <__aeabi_fsub+0x312>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	0015      	movs	r5, r2
 8000a2e:	1980      	adds	r0, r0, r6
 8000a30:	e7b1      	b.n	8000996 <__aeabi_fsub+0xca>
 8000a32:	20fe      	movs	r0, #254	; 0xfe
 8000a34:	1c6a      	adds	r2, r5, #1
 8000a36:	4210      	tst	r0, r2
 8000a38:	d171      	bne.n	8000b1e <__aeabi_fsub+0x252>
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fsub+0x174>
 8000a3e:	e0a6      	b.n	8000b8e <__aeabi_fsub+0x2c2>
 8000a40:	4663      	mov	r3, ip
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x17c>
 8000a46:	e0d9      	b.n	8000bfc <__aeabi_fsub+0x330>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x184>
 8000a4e:	e788      	b.n	8000962 <__aeabi_fsub+0x96>
 8000a50:	1b98      	subs	r0, r3, r6
 8000a52:	0143      	lsls	r3, r0, #5
 8000a54:	d400      	bmi.n	8000a58 <__aeabi_fsub+0x18c>
 8000a56:	e0e1      	b.n	8000c1c <__aeabi_fsub+0x350>
 8000a58:	4663      	mov	r3, ip
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	1af0      	subs	r0, r6, r3
 8000a5e:	e76f      	b.n	8000940 <__aeabi_fsub+0x74>
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x19a>
 8000a64:	e0b7      	b.n	8000bd6 <__aeabi_fsub+0x30a>
 8000a66:	0002      	movs	r2, r0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	2801      	cmp	r0, #1
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fsub+0x1a4>
 8000a6e:	e09c      	b.n	8000baa <__aeabi_fsub+0x2de>
 8000a70:	28ff      	cmp	r0, #255	; 0xff
 8000a72:	d026      	beq.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000a74:	4690      	mov	r8, r2
 8000a76:	e788      	b.n	800098a <__aeabi_fsub+0xbe>
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	2700      	movs	r7, #0
 8000a7c:	e771      	b.n	8000962 <__aeabi_fsub+0x96>
 8000a7e:	20fe      	movs	r0, #254	; 0xfe
 8000a80:	1c6a      	adds	r2, r5, #1
 8000a82:	4210      	tst	r0, r2
 8000a84:	d064      	beq.n	8000b50 <__aeabi_fsub+0x284>
 8000a86:	2aff      	cmp	r2, #255	; 0xff
 8000a88:	d0f6      	beq.n	8000a78 <__aeabi_fsub+0x1ac>
 8000a8a:	0015      	movs	r5, r2
 8000a8c:	4466      	add	r6, ip
 8000a8e:	0870      	lsrs	r0, r6, #1
 8000a90:	0743      	lsls	r3, r0, #29
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fsub+0x1ca>
 8000a94:	e756      	b.n	8000944 <__aeabi_fsub+0x78>
 8000a96:	08c3      	lsrs	r3, r0, #3
 8000a98:	2dff      	cmp	r5, #255	; 0xff
 8000a9a:	d012      	beq.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	0a5f      	lsrs	r7, r3, #9
 8000aa0:	b2ea      	uxtb	r2, r5
 8000aa2:	e75e      	b.n	8000962 <__aeabi_fsub+0x96>
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fsub+0x1e0>
 8000aaa:	e096      	b.n	8000bda <__aeabi_fsub+0x30e>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d008      	beq.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	03d2      	lsls	r2, r2, #15
 8000ab4:	4213      	tst	r3, r2
 8000ab6:	d004      	beq.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000ab8:	4648      	mov	r0, r9
 8000aba:	4210      	tst	r0, r2
 8000abc:	d101      	bne.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000abe:	000c      	movs	r4, r1
 8000ac0:	464b      	mov	r3, r9
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0d8      	beq.n	8000a78 <__aeabi_fsub+0x1ac>
 8000ac6:	2780      	movs	r7, #128	; 0x80
 8000ac8:	03ff      	lsls	r7, r7, #15
 8000aca:	431f      	orrs	r7, r3
 8000acc:	027f      	lsls	r7, r7, #9
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	0a7f      	lsrs	r7, r7, #9
 8000ad2:	e746      	b.n	8000962 <__aeabi_fsub+0x96>
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	1b45      	subs	r5, r0, r5
 8000ada:	0038      	movs	r0, r7
 8000adc:	3501      	adds	r5, #1
 8000ade:	40ea      	lsrs	r2, r5
 8000ae0:	1b5d      	subs	r5, r3, r5
 8000ae2:	40a8      	lsls	r0, r5
 8000ae4:	1e43      	subs	r3, r0, #1
 8000ae6:	4198      	sbcs	r0, r3
 8000ae8:	2500      	movs	r5, #0
 8000aea:	4310      	orrs	r0, r2
 8000aec:	e728      	b.n	8000940 <__aeabi_fsub+0x74>
 8000aee:	2320      	movs	r3, #32
 8000af0:	1a1b      	subs	r3, r3, r0
 8000af2:	0032      	movs	r2, r6
 8000af4:	409e      	lsls	r6, r3
 8000af6:	40c2      	lsrs	r2, r0
 8000af8:	0030      	movs	r0, r6
 8000afa:	1e43      	subs	r3, r0, #1
 8000afc:	4198      	sbcs	r0, r3
 8000afe:	4310      	orrs	r0, r2
 8000b00:	e70c      	b.n	800091c <__aeabi_fsub+0x50>
 8000b02:	2aff      	cmp	r2, #255	; 0xff
 8000b04:	d0db      	beq.n	8000abe <__aeabi_fsub+0x1f2>
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	4660      	mov	r0, ip
 8000b0a:	04db      	lsls	r3, r3, #19
 8000b0c:	4318      	orrs	r0, r3
 8000b0e:	4684      	mov	ip, r0
 8000b10:	2f1b      	cmp	r7, #27
 8000b12:	dd56      	ble.n	8000bc2 <__aeabi_fsub+0x2f6>
 8000b14:	2001      	movs	r0, #1
 8000b16:	000c      	movs	r4, r1
 8000b18:	0015      	movs	r5, r2
 8000b1a:	1a30      	subs	r0, r6, r0
 8000b1c:	e700      	b.n	8000920 <__aeabi_fsub+0x54>
 8000b1e:	4663      	mov	r3, ip
 8000b20:	1b9f      	subs	r7, r3, r6
 8000b22:	017b      	lsls	r3, r7, #5
 8000b24:	d43d      	bmi.n	8000ba2 <__aeabi_fsub+0x2d6>
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d000      	beq.n	8000b2c <__aeabi_fsub+0x260>
 8000b2a:	e6fe      	b.n	800092a <__aeabi_fsub+0x5e>
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2700      	movs	r7, #0
 8000b32:	e716      	b.n	8000962 <__aeabi_fsub+0x96>
 8000b34:	0005      	movs	r5, r0
 8000b36:	e7af      	b.n	8000a98 <__aeabi_fsub+0x1cc>
 8000b38:	0032      	movs	r2, r6
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	4641      	mov	r1, r8
 8000b3e:	40da      	lsrs	r2, r3
 8000b40:	2320      	movs	r3, #32
 8000b42:	1a5b      	subs	r3, r3, r1
 8000b44:	409e      	lsls	r6, r3
 8000b46:	0030      	movs	r0, r6
 8000b48:	1e43      	subs	r3, r0, #1
 8000b4a:	4198      	sbcs	r0, r3
 8000b4c:	4310      	orrs	r0, r2
 8000b4e:	e721      	b.n	8000994 <__aeabi_fsub+0xc8>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d1a7      	bne.n	8000aa4 <__aeabi_fsub+0x1d8>
 8000b54:	4663      	mov	r3, ip
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d059      	beq.n	8000c0e <__aeabi_fsub+0x342>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fsub+0x296>
 8000b60:	e6ff      	b.n	8000962 <__aeabi_fsub+0x96>
 8000b62:	0030      	movs	r0, r6
 8000b64:	4460      	add	r0, ip
 8000b66:	0143      	lsls	r3, r0, #5
 8000b68:	d592      	bpl.n	8000a90 <__aeabi_fsub+0x1c4>
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <__aeabi_fsub+0x348>)
 8000b6c:	3501      	adds	r5, #1
 8000b6e:	4018      	ands	r0, r3
 8000b70:	e78e      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d047      	beq.n	8000c08 <__aeabi_fsub+0x33c>
 8000b78:	1e4b      	subs	r3, r1, #1
 8000b7a:	2901      	cmp	r1, #1
 8000b7c:	d015      	beq.n	8000baa <__aeabi_fsub+0x2de>
 8000b7e:	29ff      	cmp	r1, #255	; 0xff
 8000b80:	d02b      	beq.n	8000bda <__aeabi_fsub+0x30e>
 8000b82:	0019      	movs	r1, r3
 8000b84:	e74e      	b.n	8000a24 <__aeabi_fsub+0x158>
 8000b86:	000c      	movs	r4, r1
 8000b88:	464b      	mov	r3, r9
 8000b8a:	003d      	movs	r5, r7
 8000b8c:	e784      	b.n	8000a98 <__aeabi_fsub+0x1cc>
 8000b8e:	4662      	mov	r2, ip
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d18b      	bne.n	8000aac <__aeabi_fsub+0x1e0>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d192      	bne.n	8000abe <__aeabi_fsub+0x1f2>
 8000b98:	2780      	movs	r7, #128	; 0x80
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	22ff      	movs	r2, #255	; 0xff
 8000b9e:	03ff      	lsls	r7, r7, #15
 8000ba0:	e6df      	b.n	8000962 <__aeabi_fsub+0x96>
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	000c      	movs	r4, r1
 8000ba6:	1af7      	subs	r7, r6, r3
 8000ba8:	e6bf      	b.n	800092a <__aeabi_fsub+0x5e>
 8000baa:	0030      	movs	r0, r6
 8000bac:	4460      	add	r0, ip
 8000bae:	2501      	movs	r5, #1
 8000bb0:	0143      	lsls	r3, r0, #5
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000bb4:	e76c      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000bb6:	2502      	movs	r5, #2
 8000bb8:	e6f2      	b.n	80009a0 <__aeabi_fsub+0xd4>
 8000bba:	4663      	mov	r3, ip
 8000bbc:	2501      	movs	r5, #1
 8000bbe:	1b98      	subs	r0, r3, r6
 8000bc0:	e6ae      	b.n	8000920 <__aeabi_fsub+0x54>
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	4664      	mov	r4, ip
 8000bc6:	4660      	mov	r0, ip
 8000bc8:	40fc      	lsrs	r4, r7
 8000bca:	1bdf      	subs	r7, r3, r7
 8000bcc:	40b8      	lsls	r0, r7
 8000bce:	1e43      	subs	r3, r0, #1
 8000bd0:	4198      	sbcs	r0, r3
 8000bd2:	4320      	orrs	r0, r4
 8000bd4:	e79f      	b.n	8000b16 <__aeabi_fsub+0x24a>
 8000bd6:	0005      	movs	r5, r0
 8000bd8:	e75e      	b.n	8000a98 <__aeabi_fsub+0x1cc>
 8000bda:	464b      	mov	r3, r9
 8000bdc:	e771      	b.n	8000ac2 <__aeabi_fsub+0x1f6>
 8000bde:	2320      	movs	r3, #32
 8000be0:	4665      	mov	r5, ip
 8000be2:	4660      	mov	r0, ip
 8000be4:	40cd      	lsrs	r5, r1
 8000be6:	1a59      	subs	r1, r3, r1
 8000be8:	4088      	lsls	r0, r1
 8000bea:	1e43      	subs	r3, r0, #1
 8000bec:	4198      	sbcs	r0, r3
 8000bee:	4328      	orrs	r0, r5
 8000bf0:	e71c      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	000c      	movs	r4, r1
 8000bf6:	2501      	movs	r5, #1
 8000bf8:	1af0      	subs	r0, r6, r3
 8000bfa:	e691      	b.n	8000920 <__aeabi_fsub+0x54>
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d095      	beq.n	8000b2c <__aeabi_fsub+0x260>
 8000c00:	000c      	movs	r4, r1
 8000c02:	464f      	mov	r7, r9
 8000c04:	2200      	movs	r2, #0
 8000c06:	e6ac      	b.n	8000962 <__aeabi_fsub+0x96>
 8000c08:	464b      	mov	r3, r9
 8000c0a:	000d      	movs	r5, r1
 8000c0c:	e744      	b.n	8000a98 <__aeabi_fsub+0x1cc>
 8000c0e:	464f      	mov	r7, r9
 8000c10:	2200      	movs	r2, #0
 8000c12:	e6a6      	b.n	8000962 <__aeabi_fsub+0x96>
 8000c14:	fbffffff 	.word	0xfbffffff
 8000c18:	7dffffff 	.word	0x7dffffff
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fsub+0x356>
 8000c20:	e736      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000c22:	2400      	movs	r4, #0
 8000c24:	2700      	movs	r7, #0
 8000c26:	e69c      	b.n	8000962 <__aeabi_fsub+0x96>

08000c28 <__aeabi_f2iz>:
 8000c28:	0241      	lsls	r1, r0, #9
 8000c2a:	0042      	lsls	r2, r0, #1
 8000c2c:	0fc3      	lsrs	r3, r0, #31
 8000c2e:	0a49      	lsrs	r1, r1, #9
 8000c30:	2000      	movs	r0, #0
 8000c32:	0e12      	lsrs	r2, r2, #24
 8000c34:	2a7e      	cmp	r2, #126	; 0x7e
 8000c36:	dd03      	ble.n	8000c40 <__aeabi_f2iz+0x18>
 8000c38:	2a9d      	cmp	r2, #157	; 0x9d
 8000c3a:	dd02      	ble.n	8000c42 <__aeabi_f2iz+0x1a>
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <__aeabi_f2iz+0x3c>)
 8000c3e:	1898      	adds	r0, r3, r2
 8000c40:	4770      	bx	lr
 8000c42:	2080      	movs	r0, #128	; 0x80
 8000c44:	0400      	lsls	r0, r0, #16
 8000c46:	4301      	orrs	r1, r0
 8000c48:	2a95      	cmp	r2, #149	; 0x95
 8000c4a:	dc07      	bgt.n	8000c5c <__aeabi_f2iz+0x34>
 8000c4c:	2096      	movs	r0, #150	; 0x96
 8000c4e:	1a82      	subs	r2, r0, r2
 8000c50:	40d1      	lsrs	r1, r2
 8000c52:	4248      	negs	r0, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f3      	bne.n	8000c40 <__aeabi_f2iz+0x18>
 8000c58:	0008      	movs	r0, r1
 8000c5a:	e7f1      	b.n	8000c40 <__aeabi_f2iz+0x18>
 8000c5c:	3a96      	subs	r2, #150	; 0x96
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	e7f7      	b.n	8000c52 <__aeabi_f2iz+0x2a>
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	7fffffff 	.word	0x7fffffff

08000c68 <__aeabi_i2f>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d013      	beq.n	8000c96 <__aeabi_i2f+0x2e>
 8000c6e:	17c3      	asrs	r3, r0, #31
 8000c70:	18c6      	adds	r6, r0, r3
 8000c72:	405e      	eors	r6, r3
 8000c74:	0fc4      	lsrs	r4, r0, #31
 8000c76:	0030      	movs	r0, r6
 8000c78:	f000 fc34 	bl	80014e4 <__clzsi2>
 8000c7c:	239e      	movs	r3, #158	; 0x9e
 8000c7e:	0005      	movs	r5, r0
 8000c80:	1a1b      	subs	r3, r3, r0
 8000c82:	2b96      	cmp	r3, #150	; 0x96
 8000c84:	dc0f      	bgt.n	8000ca6 <__aeabi_i2f+0x3e>
 8000c86:	2808      	cmp	r0, #8
 8000c88:	dd01      	ble.n	8000c8e <__aeabi_i2f+0x26>
 8000c8a:	3d08      	subs	r5, #8
 8000c8c:	40ae      	lsls	r6, r5
 8000c8e:	0276      	lsls	r6, r6, #9
 8000c90:	0a76      	lsrs	r6, r6, #9
 8000c92:	b2d8      	uxtb	r0, r3
 8000c94:	e002      	b.n	8000c9c <__aeabi_i2f+0x34>
 8000c96:	2400      	movs	r4, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	05c0      	lsls	r0, r0, #23
 8000c9e:	4330      	orrs	r0, r6
 8000ca0:	07e4      	lsls	r4, r4, #31
 8000ca2:	4320      	orrs	r0, r4
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca6:	2b99      	cmp	r3, #153	; 0x99
 8000ca8:	dd0c      	ble.n	8000cc4 <__aeabi_i2f+0x5c>
 8000caa:	2205      	movs	r2, #5
 8000cac:	0031      	movs	r1, r6
 8000cae:	1a12      	subs	r2, r2, r0
 8000cb0:	40d1      	lsrs	r1, r2
 8000cb2:	000a      	movs	r2, r1
 8000cb4:	0001      	movs	r1, r0
 8000cb6:	0030      	movs	r0, r6
 8000cb8:	311b      	adds	r1, #27
 8000cba:	4088      	lsls	r0, r1
 8000cbc:	1e41      	subs	r1, r0, #1
 8000cbe:	4188      	sbcs	r0, r1
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	0016      	movs	r6, r2
 8000cc4:	2d05      	cmp	r5, #5
 8000cc6:	dc12      	bgt.n	8000cee <__aeabi_i2f+0x86>
 8000cc8:	0031      	movs	r1, r6
 8000cca:	4f0d      	ldr	r7, [pc, #52]	; (8000d00 <__aeabi_i2f+0x98>)
 8000ccc:	4039      	ands	r1, r7
 8000cce:	0772      	lsls	r2, r6, #29
 8000cd0:	d009      	beq.n	8000ce6 <__aeabi_i2f+0x7e>
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	4030      	ands	r0, r6
 8000cd6:	2804      	cmp	r0, #4
 8000cd8:	d005      	beq.n	8000ce6 <__aeabi_i2f+0x7e>
 8000cda:	3104      	adds	r1, #4
 8000cdc:	014a      	lsls	r2, r1, #5
 8000cde:	d502      	bpl.n	8000ce6 <__aeabi_i2f+0x7e>
 8000ce0:	239f      	movs	r3, #159	; 0x9f
 8000ce2:	4039      	ands	r1, r7
 8000ce4:	1b5b      	subs	r3, r3, r5
 8000ce6:	0189      	lsls	r1, r1, #6
 8000ce8:	0a4e      	lsrs	r6, r1, #9
 8000cea:	b2d8      	uxtb	r0, r3
 8000cec:	e7d6      	b.n	8000c9c <__aeabi_i2f+0x34>
 8000cee:	1f6a      	subs	r2, r5, #5
 8000cf0:	4096      	lsls	r6, r2
 8000cf2:	0031      	movs	r1, r6
 8000cf4:	4f02      	ldr	r7, [pc, #8]	; (8000d00 <__aeabi_i2f+0x98>)
 8000cf6:	4039      	ands	r1, r7
 8000cf8:	0772      	lsls	r2, r6, #29
 8000cfa:	d0f4      	beq.n	8000ce6 <__aeabi_i2f+0x7e>
 8000cfc:	e7e9      	b.n	8000cd2 <__aeabi_i2f+0x6a>
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	fbffffff 	.word	0xfbffffff

08000d04 <__aeabi_ui2f>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	1e05      	subs	r5, r0, #0
 8000d08:	d00e      	beq.n	8000d28 <__aeabi_ui2f+0x24>
 8000d0a:	f000 fbeb 	bl	80014e4 <__clzsi2>
 8000d0e:	239e      	movs	r3, #158	; 0x9e
 8000d10:	0004      	movs	r4, r0
 8000d12:	1a1b      	subs	r3, r3, r0
 8000d14:	2b96      	cmp	r3, #150	; 0x96
 8000d16:	dc0c      	bgt.n	8000d32 <__aeabi_ui2f+0x2e>
 8000d18:	2808      	cmp	r0, #8
 8000d1a:	dd01      	ble.n	8000d20 <__aeabi_ui2f+0x1c>
 8000d1c:	3c08      	subs	r4, #8
 8000d1e:	40a5      	lsls	r5, r4
 8000d20:	026d      	lsls	r5, r5, #9
 8000d22:	0a6d      	lsrs	r5, r5, #9
 8000d24:	b2d8      	uxtb	r0, r3
 8000d26:	e001      	b.n	8000d2c <__aeabi_ui2f+0x28>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	05c0      	lsls	r0, r0, #23
 8000d2e:	4328      	orrs	r0, r5
 8000d30:	bd70      	pop	{r4, r5, r6, pc}
 8000d32:	2b99      	cmp	r3, #153	; 0x99
 8000d34:	dd09      	ble.n	8000d4a <__aeabi_ui2f+0x46>
 8000d36:	0002      	movs	r2, r0
 8000d38:	0029      	movs	r1, r5
 8000d3a:	321b      	adds	r2, #27
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	1e4a      	subs	r2, r1, #1
 8000d40:	4191      	sbcs	r1, r2
 8000d42:	2205      	movs	r2, #5
 8000d44:	1a12      	subs	r2, r2, r0
 8000d46:	40d5      	lsrs	r5, r2
 8000d48:	430d      	orrs	r5, r1
 8000d4a:	2c05      	cmp	r4, #5
 8000d4c:	dc12      	bgt.n	8000d74 <__aeabi_ui2f+0x70>
 8000d4e:	0029      	movs	r1, r5
 8000d50:	4e0c      	ldr	r6, [pc, #48]	; (8000d84 <__aeabi_ui2f+0x80>)
 8000d52:	4031      	ands	r1, r6
 8000d54:	076a      	lsls	r2, r5, #29
 8000d56:	d009      	beq.n	8000d6c <__aeabi_ui2f+0x68>
 8000d58:	200f      	movs	r0, #15
 8000d5a:	4028      	ands	r0, r5
 8000d5c:	2804      	cmp	r0, #4
 8000d5e:	d005      	beq.n	8000d6c <__aeabi_ui2f+0x68>
 8000d60:	3104      	adds	r1, #4
 8000d62:	014a      	lsls	r2, r1, #5
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_ui2f+0x68>
 8000d66:	239f      	movs	r3, #159	; 0x9f
 8000d68:	4031      	ands	r1, r6
 8000d6a:	1b1b      	subs	r3, r3, r4
 8000d6c:	0189      	lsls	r1, r1, #6
 8000d6e:	0a4d      	lsrs	r5, r1, #9
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	e7db      	b.n	8000d2c <__aeabi_ui2f+0x28>
 8000d74:	1f62      	subs	r2, r4, #5
 8000d76:	4095      	lsls	r5, r2
 8000d78:	0029      	movs	r1, r5
 8000d7a:	4e02      	ldr	r6, [pc, #8]	; (8000d84 <__aeabi_ui2f+0x80>)
 8000d7c:	4031      	ands	r1, r6
 8000d7e:	076a      	lsls	r2, r5, #29
 8000d80:	d0f4      	beq.n	8000d6c <__aeabi_ui2f+0x68>
 8000d82:	e7e9      	b.n	8000d58 <__aeabi_ui2f+0x54>
 8000d84:	fbffffff 	.word	0xfbffffff

08000d88 <__aeabi_ddiv>:
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	4657      	mov	r7, sl
 8000d8c:	464e      	mov	r6, r9
 8000d8e:	4645      	mov	r5, r8
 8000d90:	46de      	mov	lr, fp
 8000d92:	b5e0      	push	{r5, r6, r7, lr}
 8000d94:	4681      	mov	r9, r0
 8000d96:	0005      	movs	r5, r0
 8000d98:	030c      	lsls	r4, r1, #12
 8000d9a:	0048      	lsls	r0, r1, #1
 8000d9c:	4692      	mov	sl, r2
 8000d9e:	001f      	movs	r7, r3
 8000da0:	b085      	sub	sp, #20
 8000da2:	0b24      	lsrs	r4, r4, #12
 8000da4:	0d40      	lsrs	r0, r0, #21
 8000da6:	0fce      	lsrs	r6, r1, #31
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0x26>
 8000dac:	e156      	b.n	800105c <__aeabi_ddiv+0x2d4>
 8000dae:	4bd4      	ldr	r3, [pc, #848]	; (8001100 <__aeabi_ddiv+0x378>)
 8000db0:	4298      	cmp	r0, r3
 8000db2:	d100      	bne.n	8000db6 <__aeabi_ddiv+0x2e>
 8000db4:	e172      	b.n	800109c <__aeabi_ddiv+0x314>
 8000db6:	0f6b      	lsrs	r3, r5, #29
 8000db8:	00e4      	lsls	r4, r4, #3
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	041b      	lsls	r3, r3, #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	4bcf      	ldr	r3, [pc, #828]	; (8001104 <__aeabi_ddiv+0x37c>)
 8000dc6:	00ed      	lsls	r5, r5, #3
 8000dc8:	469b      	mov	fp, r3
 8000dca:	2300      	movs	r3, #0
 8000dcc:	4699      	mov	r9, r3
 8000dce:	4483      	add	fp, r0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	033c      	lsls	r4, r7, #12
 8000dd4:	007b      	lsls	r3, r7, #1
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	0b24      	lsrs	r4, r4, #12
 8000dda:	0d5b      	lsrs	r3, r3, #21
 8000ddc:	0fff      	lsrs	r7, r7, #31
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x5c>
 8000de2:	e11f      	b.n	8001024 <__aeabi_ddiv+0x29c>
 8000de4:	4ac6      	ldr	r2, [pc, #792]	; (8001100 <__aeabi_ddiv+0x378>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d100      	bne.n	8000dec <__aeabi_ddiv+0x64>
 8000dea:	e162      	b.n	80010b2 <__aeabi_ddiv+0x32a>
 8000dec:	49c5      	ldr	r1, [pc, #788]	; (8001104 <__aeabi_ddiv+0x37c>)
 8000dee:	0f42      	lsrs	r2, r0, #29
 8000df0:	468c      	mov	ip, r1
 8000df2:	00e4      	lsls	r4, r4, #3
 8000df4:	4659      	mov	r1, fp
 8000df6:	4314      	orrs	r4, r2
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	4463      	add	r3, ip
 8000dfc:	0412      	lsls	r2, r2, #16
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	4314      	orrs	r4, r2
 8000e02:	469b      	mov	fp, r3
 8000e04:	00c2      	lsls	r2, r0, #3
 8000e06:	2000      	movs	r0, #0
 8000e08:	0033      	movs	r3, r6
 8000e0a:	407b      	eors	r3, r7
 8000e0c:	469a      	mov	sl, r3
 8000e0e:	464b      	mov	r3, r9
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d827      	bhi.n	8000e64 <__aeabi_ddiv+0xdc>
 8000e14:	49bc      	ldr	r1, [pc, #752]	; (8001108 <__aeabi_ddiv+0x380>)
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	58cb      	ldr	r3, [r1, r3]
 8000e1a:	469f      	mov	pc, r3
 8000e1c:	46b2      	mov	sl, r6
 8000e1e:	9b00      	ldr	r3, [sp, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d016      	beq.n	8000e52 <__aeabi_ddiv+0xca>
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d100      	bne.n	8000e2a <__aeabi_ddiv+0xa2>
 8000e28:	e28e      	b.n	8001348 <__aeabi_ddiv+0x5c0>
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_ddiv+0xa8>
 8000e2e:	e0d9      	b.n	8000fe4 <__aeabi_ddiv+0x25c>
 8000e30:	2300      	movs	r3, #0
 8000e32:	2400      	movs	r4, #0
 8000e34:	2500      	movs	r5, #0
 8000e36:	4652      	mov	r2, sl
 8000e38:	051b      	lsls	r3, r3, #20
 8000e3a:	4323      	orrs	r3, r4
 8000e3c:	07d2      	lsls	r2, r2, #31
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	0028      	movs	r0, r5
 8000e42:	0019      	movs	r1, r3
 8000e44:	b005      	add	sp, #20
 8000e46:	bcf0      	pop	{r4, r5, r6, r7}
 8000e48:	46bb      	mov	fp, r7
 8000e4a:	46b2      	mov	sl, r6
 8000e4c:	46a9      	mov	r9, r5
 8000e4e:	46a0      	mov	r8, r4
 8000e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e52:	2400      	movs	r4, #0
 8000e54:	2500      	movs	r5, #0
 8000e56:	4baa      	ldr	r3, [pc, #680]	; (8001100 <__aeabi_ddiv+0x378>)
 8000e58:	e7ed      	b.n	8000e36 <__aeabi_ddiv+0xae>
 8000e5a:	46ba      	mov	sl, r7
 8000e5c:	46a0      	mov	r8, r4
 8000e5e:	0015      	movs	r5, r2
 8000e60:	9000      	str	r0, [sp, #0]
 8000e62:	e7dc      	b.n	8000e1e <__aeabi_ddiv+0x96>
 8000e64:	4544      	cmp	r4, r8
 8000e66:	d200      	bcs.n	8000e6a <__aeabi_ddiv+0xe2>
 8000e68:	e1c7      	b.n	80011fa <__aeabi_ddiv+0x472>
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0xe6>
 8000e6c:	e1c2      	b.n	80011f4 <__aeabi_ddiv+0x46c>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	469c      	mov	ip, r3
 8000e74:	002e      	movs	r6, r5
 8000e76:	4640      	mov	r0, r8
 8000e78:	2500      	movs	r5, #0
 8000e7a:	44e3      	add	fp, ip
 8000e7c:	0223      	lsls	r3, r4, #8
 8000e7e:	0e14      	lsrs	r4, r2, #24
 8000e80:	431c      	orrs	r4, r3
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	4699      	mov	r9, r3
 8000e86:	0423      	lsls	r3, r4, #16
 8000e88:	0c1f      	lsrs	r7, r3, #16
 8000e8a:	0212      	lsls	r2, r2, #8
 8000e8c:	4649      	mov	r1, r9
 8000e8e:	9200      	str	r2, [sp, #0]
 8000e90:	9701      	str	r7, [sp, #4]
 8000e92:	f7ff f9d3 	bl	800023c <__aeabi_uidivmod>
 8000e96:	0002      	movs	r2, r0
 8000e98:	437a      	muls	r2, r7
 8000e9a:	040b      	lsls	r3, r1, #16
 8000e9c:	0c31      	lsrs	r1, r6, #16
 8000e9e:	4680      	mov	r8, r0
 8000ea0:	4319      	orrs	r1, r3
 8000ea2:	428a      	cmp	r2, r1
 8000ea4:	d907      	bls.n	8000eb6 <__aeabi_ddiv+0x12e>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	469c      	mov	ip, r3
 8000eac:	1909      	adds	r1, r1, r4
 8000eae:	44e0      	add	r8, ip
 8000eb0:	428c      	cmp	r4, r1
 8000eb2:	d800      	bhi.n	8000eb6 <__aeabi_ddiv+0x12e>
 8000eb4:	e207      	b.n	80012c6 <__aeabi_ddiv+0x53e>
 8000eb6:	1a88      	subs	r0, r1, r2
 8000eb8:	4649      	mov	r1, r9
 8000eba:	f7ff f9bf 	bl	800023c <__aeabi_uidivmod>
 8000ebe:	0409      	lsls	r1, r1, #16
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	0431      	lsls	r1, r6, #16
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	9a01      	ldr	r2, [sp, #4]
 8000ec8:	0c09      	lsrs	r1, r1, #16
 8000eca:	4342      	muls	r2, r0
 8000ecc:	0003      	movs	r3, r0
 8000ece:	4331      	orrs	r1, r6
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	d904      	bls.n	8000ede <__aeabi_ddiv+0x156>
 8000ed4:	1909      	adds	r1, r1, r4
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	428c      	cmp	r4, r1
 8000eda:	d800      	bhi.n	8000ede <__aeabi_ddiv+0x156>
 8000edc:	e1ed      	b.n	80012ba <__aeabi_ddiv+0x532>
 8000ede:	1a88      	subs	r0, r1, r2
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	0412      	lsls	r2, r2, #16
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	4690      	mov	r8, r2
 8000ee8:	4641      	mov	r1, r8
 8000eea:	9b00      	ldr	r3, [sp, #0]
 8000eec:	040e      	lsls	r6, r1, #16
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	001f      	movs	r7, r3
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	9b00      	ldr	r3, [sp, #0]
 8000ef6:	0c36      	lsrs	r6, r6, #16
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	0c19      	lsrs	r1, r3, #16
 8000efc:	000b      	movs	r3, r1
 8000efe:	4373      	muls	r3, r6
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	437e      	muls	r6, r7
 8000f04:	9103      	str	r1, [sp, #12]
 8000f06:	4351      	muls	r1, r2
 8000f08:	437a      	muls	r2, r7
 8000f0a:	0c1f      	lsrs	r7, r3, #16
 8000f0c:	46bc      	mov	ip, r7
 8000f0e:	1876      	adds	r6, r6, r1
 8000f10:	4466      	add	r6, ip
 8000f12:	42b1      	cmp	r1, r6
 8000f14:	d903      	bls.n	8000f1e <__aeabi_ddiv+0x196>
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	468c      	mov	ip, r1
 8000f1c:	4462      	add	r2, ip
 8000f1e:	0c31      	lsrs	r1, r6, #16
 8000f20:	188a      	adds	r2, r1, r2
 8000f22:	0431      	lsls	r1, r6, #16
 8000f24:	041e      	lsls	r6, r3, #16
 8000f26:	0c36      	lsrs	r6, r6, #16
 8000f28:	198e      	adds	r6, r1, r6
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d302      	bcc.n	8000f34 <__aeabi_ddiv+0x1ac>
 8000f2e:	d112      	bne.n	8000f56 <__aeabi_ddiv+0x1ce>
 8000f30:	42b5      	cmp	r5, r6
 8000f32:	d210      	bcs.n	8000f56 <__aeabi_ddiv+0x1ce>
 8000f34:	4643      	mov	r3, r8
 8000f36:	1e59      	subs	r1, r3, #1
 8000f38:	9b00      	ldr	r3, [sp, #0]
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	4465      	add	r5, ip
 8000f3e:	001f      	movs	r7, r3
 8000f40:	429d      	cmp	r5, r3
 8000f42:	419b      	sbcs	r3, r3
 8000f44:	425b      	negs	r3, r3
 8000f46:	191b      	adds	r3, r3, r4
 8000f48:	18c0      	adds	r0, r0, r3
 8000f4a:	4284      	cmp	r4, r0
 8000f4c:	d200      	bcs.n	8000f50 <__aeabi_ddiv+0x1c8>
 8000f4e:	e1a0      	b.n	8001292 <__aeabi_ddiv+0x50a>
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x1cc>
 8000f52:	e19b      	b.n	800128c <__aeabi_ddiv+0x504>
 8000f54:	4688      	mov	r8, r1
 8000f56:	1bae      	subs	r6, r5, r6
 8000f58:	42b5      	cmp	r5, r6
 8000f5a:	41ad      	sbcs	r5, r5
 8000f5c:	1a80      	subs	r0, r0, r2
 8000f5e:	426d      	negs	r5, r5
 8000f60:	1b40      	subs	r0, r0, r5
 8000f62:	4284      	cmp	r4, r0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x1e0>
 8000f66:	e1d5      	b.n	8001314 <__aeabi_ddiv+0x58c>
 8000f68:	4649      	mov	r1, r9
 8000f6a:	f7ff f967 	bl	800023c <__aeabi_uidivmod>
 8000f6e:	9a01      	ldr	r2, [sp, #4]
 8000f70:	040b      	lsls	r3, r1, #16
 8000f72:	4342      	muls	r2, r0
 8000f74:	0c31      	lsrs	r1, r6, #16
 8000f76:	0005      	movs	r5, r0
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	d900      	bls.n	8000f80 <__aeabi_ddiv+0x1f8>
 8000f7e:	e16c      	b.n	800125a <__aeabi_ddiv+0x4d2>
 8000f80:	1a88      	subs	r0, r1, r2
 8000f82:	4649      	mov	r1, r9
 8000f84:	f7ff f95a 	bl	800023c <__aeabi_uidivmod>
 8000f88:	9a01      	ldr	r2, [sp, #4]
 8000f8a:	0436      	lsls	r6, r6, #16
 8000f8c:	4342      	muls	r2, r0
 8000f8e:	0409      	lsls	r1, r1, #16
 8000f90:	0c36      	lsrs	r6, r6, #16
 8000f92:	0003      	movs	r3, r0
 8000f94:	430e      	orrs	r6, r1
 8000f96:	42b2      	cmp	r2, r6
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x214>
 8000f9a:	e153      	b.n	8001244 <__aeabi_ddiv+0x4bc>
 8000f9c:	9803      	ldr	r0, [sp, #12]
 8000f9e:	1ab6      	subs	r6, r6, r2
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	042d      	lsls	r5, r5, #16
 8000fa4:	431d      	orrs	r5, r3
 8000fa6:	9f02      	ldr	r7, [sp, #8]
 8000fa8:	042b      	lsls	r3, r5, #16
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	435a      	muls	r2, r3
 8000fae:	437b      	muls	r3, r7
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	0c29      	lsrs	r1, r5, #16
 8000fb4:	4348      	muls	r0, r1
 8000fb6:	0c13      	lsrs	r3, r2, #16
 8000fb8:	4484      	add	ip, r0
 8000fba:	4463      	add	r3, ip
 8000fbc:	4379      	muls	r1, r7
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d903      	bls.n	8000fca <__aeabi_ddiv+0x242>
 8000fc2:	2080      	movs	r0, #128	; 0x80
 8000fc4:	0240      	lsls	r0, r0, #9
 8000fc6:	4684      	mov	ip, r0
 8000fc8:	4461      	add	r1, ip
 8000fca:	0c18      	lsrs	r0, r3, #16
 8000fcc:	0412      	lsls	r2, r2, #16
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	0c12      	lsrs	r2, r2, #16
 8000fd2:	1841      	adds	r1, r0, r1
 8000fd4:	189b      	adds	r3, r3, r2
 8000fd6:	428e      	cmp	r6, r1
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x254>
 8000fda:	e0ff      	b.n	80011dc <__aeabi_ddiv+0x454>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x258>
 8000fde:	e0fa      	b.n	80011d6 <__aeabi_ddiv+0x44e>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4a49      	ldr	r2, [pc, #292]	; (800110c <__aeabi_ddiv+0x384>)
 8000fe6:	445a      	add	r2, fp
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	dc00      	bgt.n	8000fee <__aeabi_ddiv+0x266>
 8000fec:	e0aa      	b.n	8001144 <__aeabi_ddiv+0x3bc>
 8000fee:	076b      	lsls	r3, r5, #29
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_ddiv+0x26c>
 8000ff2:	e13d      	b.n	8001270 <__aeabi_ddiv+0x4e8>
 8000ff4:	08ed      	lsrs	r5, r5, #3
 8000ff6:	4643      	mov	r3, r8
 8000ff8:	01db      	lsls	r3, r3, #7
 8000ffa:	d506      	bpl.n	800100a <__aeabi_ddiv+0x282>
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	4b44      	ldr	r3, [pc, #272]	; (8001110 <__aeabi_ddiv+0x388>)
 8001000:	401a      	ands	r2, r3
 8001002:	4690      	mov	r8, r2
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	00d2      	lsls	r2, r2, #3
 8001008:	445a      	add	r2, fp
 800100a:	4b42      	ldr	r3, [pc, #264]	; (8001114 <__aeabi_ddiv+0x38c>)
 800100c:	429a      	cmp	r2, r3
 800100e:	dd00      	ble.n	8001012 <__aeabi_ddiv+0x28a>
 8001010:	e71f      	b.n	8000e52 <__aeabi_ddiv+0xca>
 8001012:	4643      	mov	r3, r8
 8001014:	075b      	lsls	r3, r3, #29
 8001016:	431d      	orrs	r5, r3
 8001018:	4643      	mov	r3, r8
 800101a:	0552      	lsls	r2, r2, #21
 800101c:	025c      	lsls	r4, r3, #9
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	0d53      	lsrs	r3, r2, #21
 8001022:	e708      	b.n	8000e36 <__aeabi_ddiv+0xae>
 8001024:	4652      	mov	r2, sl
 8001026:	4322      	orrs	r2, r4
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x2a4>
 800102a:	e07b      	b.n	8001124 <__aeabi_ddiv+0x39c>
 800102c:	2c00      	cmp	r4, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_ddiv+0x2aa>
 8001030:	e0fa      	b.n	8001228 <__aeabi_ddiv+0x4a0>
 8001032:	0020      	movs	r0, r4
 8001034:	f000 fa56 	bl	80014e4 <__clzsi2>
 8001038:	0002      	movs	r2, r0
 800103a:	3a0b      	subs	r2, #11
 800103c:	231d      	movs	r3, #29
 800103e:	0001      	movs	r1, r0
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	4652      	mov	r2, sl
 8001044:	3908      	subs	r1, #8
 8001046:	40da      	lsrs	r2, r3
 8001048:	408c      	lsls	r4, r1
 800104a:	4314      	orrs	r4, r2
 800104c:	4652      	mov	r2, sl
 800104e:	408a      	lsls	r2, r1
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <__aeabi_ddiv+0x390>)
 8001052:	4458      	add	r0, fp
 8001054:	469b      	mov	fp, r3
 8001056:	4483      	add	fp, r0
 8001058:	2000      	movs	r0, #0
 800105a:	e6d5      	b.n	8000e08 <__aeabi_ddiv+0x80>
 800105c:	464b      	mov	r3, r9
 800105e:	4323      	orrs	r3, r4
 8001060:	4698      	mov	r8, r3
 8001062:	d044      	beq.n	80010ee <__aeabi_ddiv+0x366>
 8001064:	2c00      	cmp	r4, #0
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x2e2>
 8001068:	e0ce      	b.n	8001208 <__aeabi_ddiv+0x480>
 800106a:	0020      	movs	r0, r4
 800106c:	f000 fa3a 	bl	80014e4 <__clzsi2>
 8001070:	0001      	movs	r1, r0
 8001072:	0002      	movs	r2, r0
 8001074:	390b      	subs	r1, #11
 8001076:	231d      	movs	r3, #29
 8001078:	1a5b      	subs	r3, r3, r1
 800107a:	4649      	mov	r1, r9
 800107c:	0010      	movs	r0, r2
 800107e:	40d9      	lsrs	r1, r3
 8001080:	3808      	subs	r0, #8
 8001082:	4084      	lsls	r4, r0
 8001084:	000b      	movs	r3, r1
 8001086:	464d      	mov	r5, r9
 8001088:	4323      	orrs	r3, r4
 800108a:	4698      	mov	r8, r3
 800108c:	4085      	lsls	r5, r0
 800108e:	4823      	ldr	r0, [pc, #140]	; (800111c <__aeabi_ddiv+0x394>)
 8001090:	1a83      	subs	r3, r0, r2
 8001092:	469b      	mov	fp, r3
 8001094:	2300      	movs	r3, #0
 8001096:	4699      	mov	r9, r3
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	e69a      	b.n	8000dd2 <__aeabi_ddiv+0x4a>
 800109c:	464b      	mov	r3, r9
 800109e:	4323      	orrs	r3, r4
 80010a0:	4698      	mov	r8, r3
 80010a2:	d11d      	bne.n	80010e0 <__aeabi_ddiv+0x358>
 80010a4:	2308      	movs	r3, #8
 80010a6:	4699      	mov	r9, r3
 80010a8:	3b06      	subs	r3, #6
 80010aa:	2500      	movs	r5, #0
 80010ac:	4683      	mov	fp, r0
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	e68f      	b.n	8000dd2 <__aeabi_ddiv+0x4a>
 80010b2:	4652      	mov	r2, sl
 80010b4:	4322      	orrs	r2, r4
 80010b6:	d109      	bne.n	80010cc <__aeabi_ddiv+0x344>
 80010b8:	2302      	movs	r3, #2
 80010ba:	4649      	mov	r1, r9
 80010bc:	4319      	orrs	r1, r3
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <__aeabi_ddiv+0x398>)
 80010c0:	4689      	mov	r9, r1
 80010c2:	469c      	mov	ip, r3
 80010c4:	2400      	movs	r4, #0
 80010c6:	2002      	movs	r0, #2
 80010c8:	44e3      	add	fp, ip
 80010ca:	e69d      	b.n	8000e08 <__aeabi_ddiv+0x80>
 80010cc:	2303      	movs	r3, #3
 80010ce:	464a      	mov	r2, r9
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <__aeabi_ddiv+0x398>)
 80010d4:	4691      	mov	r9, r2
 80010d6:	469c      	mov	ip, r3
 80010d8:	4652      	mov	r2, sl
 80010da:	2003      	movs	r0, #3
 80010dc:	44e3      	add	fp, ip
 80010de:	e693      	b.n	8000e08 <__aeabi_ddiv+0x80>
 80010e0:	230c      	movs	r3, #12
 80010e2:	4699      	mov	r9, r3
 80010e4:	3b09      	subs	r3, #9
 80010e6:	46a0      	mov	r8, r4
 80010e8:	4683      	mov	fp, r0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	e671      	b.n	8000dd2 <__aeabi_ddiv+0x4a>
 80010ee:	2304      	movs	r3, #4
 80010f0:	4699      	mov	r9, r3
 80010f2:	2300      	movs	r3, #0
 80010f4:	469b      	mov	fp, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	2500      	movs	r5, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	e669      	b.n	8000dd2 <__aeabi_ddiv+0x4a>
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	000007ff 	.word	0x000007ff
 8001104:	fffffc01 	.word	0xfffffc01
 8001108:	08007190 	.word	0x08007190
 800110c:	000003ff 	.word	0x000003ff
 8001110:	feffffff 	.word	0xfeffffff
 8001114:	000007fe 	.word	0x000007fe
 8001118:	000003f3 	.word	0x000003f3
 800111c:	fffffc0d 	.word	0xfffffc0d
 8001120:	fffff801 	.word	0xfffff801
 8001124:	4649      	mov	r1, r9
 8001126:	2301      	movs	r3, #1
 8001128:	4319      	orrs	r1, r3
 800112a:	4689      	mov	r9, r1
 800112c:	2400      	movs	r4, #0
 800112e:	2001      	movs	r0, #1
 8001130:	e66a      	b.n	8000e08 <__aeabi_ddiv+0x80>
 8001132:	2300      	movs	r3, #0
 8001134:	2480      	movs	r4, #128	; 0x80
 8001136:	469a      	mov	sl, r3
 8001138:	2500      	movs	r5, #0
 800113a:	4b8a      	ldr	r3, [pc, #552]	; (8001364 <__aeabi_ddiv+0x5dc>)
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	e67a      	b.n	8000e36 <__aeabi_ddiv+0xae>
 8001140:	2501      	movs	r5, #1
 8001142:	426d      	negs	r5, r5
 8001144:	2301      	movs	r3, #1
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	2b38      	cmp	r3, #56	; 0x38
 800114a:	dd00      	ble.n	800114e <__aeabi_ddiv+0x3c6>
 800114c:	e670      	b.n	8000e30 <__aeabi_ddiv+0xa8>
 800114e:	2b1f      	cmp	r3, #31
 8001150:	dc00      	bgt.n	8001154 <__aeabi_ddiv+0x3cc>
 8001152:	e0bf      	b.n	80012d4 <__aeabi_ddiv+0x54c>
 8001154:	211f      	movs	r1, #31
 8001156:	4249      	negs	r1, r1
 8001158:	1a8a      	subs	r2, r1, r2
 800115a:	4641      	mov	r1, r8
 800115c:	40d1      	lsrs	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	2b20      	cmp	r3, #32
 8001162:	d004      	beq.n	800116e <__aeabi_ddiv+0x3e6>
 8001164:	4641      	mov	r1, r8
 8001166:	4b80      	ldr	r3, [pc, #512]	; (8001368 <__aeabi_ddiv+0x5e0>)
 8001168:	445b      	add	r3, fp
 800116a:	4099      	lsls	r1, r3
 800116c:	430d      	orrs	r5, r1
 800116e:	1e6b      	subs	r3, r5, #1
 8001170:	419d      	sbcs	r5, r3
 8001172:	2307      	movs	r3, #7
 8001174:	432a      	orrs	r2, r5
 8001176:	001d      	movs	r5, r3
 8001178:	2400      	movs	r4, #0
 800117a:	4015      	ands	r5, r2
 800117c:	4213      	tst	r3, r2
 800117e:	d100      	bne.n	8001182 <__aeabi_ddiv+0x3fa>
 8001180:	e0d4      	b.n	800132c <__aeabi_ddiv+0x5a4>
 8001182:	210f      	movs	r1, #15
 8001184:	2300      	movs	r3, #0
 8001186:	4011      	ands	r1, r2
 8001188:	2904      	cmp	r1, #4
 800118a:	d100      	bne.n	800118e <__aeabi_ddiv+0x406>
 800118c:	e0cb      	b.n	8001326 <__aeabi_ddiv+0x59e>
 800118e:	1d11      	adds	r1, r2, #4
 8001190:	4291      	cmp	r1, r2
 8001192:	4192      	sbcs	r2, r2
 8001194:	4252      	negs	r2, r2
 8001196:	189b      	adds	r3, r3, r2
 8001198:	000a      	movs	r2, r1
 800119a:	0219      	lsls	r1, r3, #8
 800119c:	d400      	bmi.n	80011a0 <__aeabi_ddiv+0x418>
 800119e:	e0c2      	b.n	8001326 <__aeabi_ddiv+0x59e>
 80011a0:	2301      	movs	r3, #1
 80011a2:	2400      	movs	r4, #0
 80011a4:	2500      	movs	r5, #0
 80011a6:	e646      	b.n	8000e36 <__aeabi_ddiv+0xae>
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	4641      	mov	r1, r8
 80011ac:	031b      	lsls	r3, r3, #12
 80011ae:	4219      	tst	r1, r3
 80011b0:	d008      	beq.n	80011c4 <__aeabi_ddiv+0x43c>
 80011b2:	421c      	tst	r4, r3
 80011b4:	d106      	bne.n	80011c4 <__aeabi_ddiv+0x43c>
 80011b6:	431c      	orrs	r4, r3
 80011b8:	0324      	lsls	r4, r4, #12
 80011ba:	46ba      	mov	sl, r7
 80011bc:	0015      	movs	r5, r2
 80011be:	4b69      	ldr	r3, [pc, #420]	; (8001364 <__aeabi_ddiv+0x5dc>)
 80011c0:	0b24      	lsrs	r4, r4, #12
 80011c2:	e638      	b.n	8000e36 <__aeabi_ddiv+0xae>
 80011c4:	2480      	movs	r4, #128	; 0x80
 80011c6:	4643      	mov	r3, r8
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	431c      	orrs	r4, r3
 80011cc:	0324      	lsls	r4, r4, #12
 80011ce:	46b2      	mov	sl, r6
 80011d0:	4b64      	ldr	r3, [pc, #400]	; (8001364 <__aeabi_ddiv+0x5dc>)
 80011d2:	0b24      	lsrs	r4, r4, #12
 80011d4:	e62f      	b.n	8000e36 <__aeabi_ddiv+0xae>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_ddiv+0x454>
 80011da:	e703      	b.n	8000fe4 <__aeabi_ddiv+0x25c>
 80011dc:	19a6      	adds	r6, r4, r6
 80011de:	1e68      	subs	r0, r5, #1
 80011e0:	42a6      	cmp	r6, r4
 80011e2:	d200      	bcs.n	80011e6 <__aeabi_ddiv+0x45e>
 80011e4:	e08d      	b.n	8001302 <__aeabi_ddiv+0x57a>
 80011e6:	428e      	cmp	r6, r1
 80011e8:	d200      	bcs.n	80011ec <__aeabi_ddiv+0x464>
 80011ea:	e0a3      	b.n	8001334 <__aeabi_ddiv+0x5ac>
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x468>
 80011ee:	e0b3      	b.n	8001358 <__aeabi_ddiv+0x5d0>
 80011f0:	0005      	movs	r5, r0
 80011f2:	e6f5      	b.n	8000fe0 <__aeabi_ddiv+0x258>
 80011f4:	42aa      	cmp	r2, r5
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x472>
 80011f8:	e639      	b.n	8000e6e <__aeabi_ddiv+0xe6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	07de      	lsls	r6, r3, #31
 80011fe:	0858      	lsrs	r0, r3, #1
 8001200:	086b      	lsrs	r3, r5, #1
 8001202:	431e      	orrs	r6, r3
 8001204:	07ed      	lsls	r5, r5, #31
 8001206:	e639      	b.n	8000e7c <__aeabi_ddiv+0xf4>
 8001208:	4648      	mov	r0, r9
 800120a:	f000 f96b 	bl	80014e4 <__clzsi2>
 800120e:	0001      	movs	r1, r0
 8001210:	0002      	movs	r2, r0
 8001212:	3115      	adds	r1, #21
 8001214:	3220      	adds	r2, #32
 8001216:	291c      	cmp	r1, #28
 8001218:	dc00      	bgt.n	800121c <__aeabi_ddiv+0x494>
 800121a:	e72c      	b.n	8001076 <__aeabi_ddiv+0x2ee>
 800121c:	464b      	mov	r3, r9
 800121e:	3808      	subs	r0, #8
 8001220:	4083      	lsls	r3, r0
 8001222:	2500      	movs	r5, #0
 8001224:	4698      	mov	r8, r3
 8001226:	e732      	b.n	800108e <__aeabi_ddiv+0x306>
 8001228:	f000 f95c 	bl	80014e4 <__clzsi2>
 800122c:	0003      	movs	r3, r0
 800122e:	001a      	movs	r2, r3
 8001230:	3215      	adds	r2, #21
 8001232:	3020      	adds	r0, #32
 8001234:	2a1c      	cmp	r2, #28
 8001236:	dc00      	bgt.n	800123a <__aeabi_ddiv+0x4b2>
 8001238:	e700      	b.n	800103c <__aeabi_ddiv+0x2b4>
 800123a:	4654      	mov	r4, sl
 800123c:	3b08      	subs	r3, #8
 800123e:	2200      	movs	r2, #0
 8001240:	409c      	lsls	r4, r3
 8001242:	e705      	b.n	8001050 <__aeabi_ddiv+0x2c8>
 8001244:	1936      	adds	r6, r6, r4
 8001246:	3b01      	subs	r3, #1
 8001248:	42b4      	cmp	r4, r6
 800124a:	d900      	bls.n	800124e <__aeabi_ddiv+0x4c6>
 800124c:	e6a6      	b.n	8000f9c <__aeabi_ddiv+0x214>
 800124e:	42b2      	cmp	r2, r6
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x4cc>
 8001252:	e6a3      	b.n	8000f9c <__aeabi_ddiv+0x214>
 8001254:	1e83      	subs	r3, r0, #2
 8001256:	1936      	adds	r6, r6, r4
 8001258:	e6a0      	b.n	8000f9c <__aeabi_ddiv+0x214>
 800125a:	1909      	adds	r1, r1, r4
 800125c:	3d01      	subs	r5, #1
 800125e:	428c      	cmp	r4, r1
 8001260:	d900      	bls.n	8001264 <__aeabi_ddiv+0x4dc>
 8001262:	e68d      	b.n	8000f80 <__aeabi_ddiv+0x1f8>
 8001264:	428a      	cmp	r2, r1
 8001266:	d800      	bhi.n	800126a <__aeabi_ddiv+0x4e2>
 8001268:	e68a      	b.n	8000f80 <__aeabi_ddiv+0x1f8>
 800126a:	1e85      	subs	r5, r0, #2
 800126c:	1909      	adds	r1, r1, r4
 800126e:	e687      	b.n	8000f80 <__aeabi_ddiv+0x1f8>
 8001270:	230f      	movs	r3, #15
 8001272:	402b      	ands	r3, r5
 8001274:	2b04      	cmp	r3, #4
 8001276:	d100      	bne.n	800127a <__aeabi_ddiv+0x4f2>
 8001278:	e6bc      	b.n	8000ff4 <__aeabi_ddiv+0x26c>
 800127a:	2305      	movs	r3, #5
 800127c:	425b      	negs	r3, r3
 800127e:	42ab      	cmp	r3, r5
 8001280:	419b      	sbcs	r3, r3
 8001282:	3504      	adds	r5, #4
 8001284:	425b      	negs	r3, r3
 8001286:	08ed      	lsrs	r5, r5, #3
 8001288:	4498      	add	r8, r3
 800128a:	e6b4      	b.n	8000ff6 <__aeabi_ddiv+0x26e>
 800128c:	42af      	cmp	r7, r5
 800128e:	d900      	bls.n	8001292 <__aeabi_ddiv+0x50a>
 8001290:	e660      	b.n	8000f54 <__aeabi_ddiv+0x1cc>
 8001292:	4282      	cmp	r2, r0
 8001294:	d804      	bhi.n	80012a0 <__aeabi_ddiv+0x518>
 8001296:	d000      	beq.n	800129a <__aeabi_ddiv+0x512>
 8001298:	e65c      	b.n	8000f54 <__aeabi_ddiv+0x1cc>
 800129a:	42ae      	cmp	r6, r5
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x518>
 800129e:	e659      	b.n	8000f54 <__aeabi_ddiv+0x1cc>
 80012a0:	2302      	movs	r3, #2
 80012a2:	425b      	negs	r3, r3
 80012a4:	469c      	mov	ip, r3
 80012a6:	9b00      	ldr	r3, [sp, #0]
 80012a8:	44e0      	add	r8, ip
 80012aa:	469c      	mov	ip, r3
 80012ac:	4465      	add	r5, ip
 80012ae:	429d      	cmp	r5, r3
 80012b0:	419b      	sbcs	r3, r3
 80012b2:	425b      	negs	r3, r3
 80012b4:	191b      	adds	r3, r3, r4
 80012b6:	18c0      	adds	r0, r0, r3
 80012b8:	e64d      	b.n	8000f56 <__aeabi_ddiv+0x1ce>
 80012ba:	428a      	cmp	r2, r1
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x538>
 80012be:	e60e      	b.n	8000ede <__aeabi_ddiv+0x156>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	1909      	adds	r1, r1, r4
 80012c4:	e60b      	b.n	8000ede <__aeabi_ddiv+0x156>
 80012c6:	428a      	cmp	r2, r1
 80012c8:	d800      	bhi.n	80012cc <__aeabi_ddiv+0x544>
 80012ca:	e5f4      	b.n	8000eb6 <__aeabi_ddiv+0x12e>
 80012cc:	1e83      	subs	r3, r0, #2
 80012ce:	4698      	mov	r8, r3
 80012d0:	1909      	adds	r1, r1, r4
 80012d2:	e5f0      	b.n	8000eb6 <__aeabi_ddiv+0x12e>
 80012d4:	4925      	ldr	r1, [pc, #148]	; (800136c <__aeabi_ddiv+0x5e4>)
 80012d6:	0028      	movs	r0, r5
 80012d8:	4459      	add	r1, fp
 80012da:	408d      	lsls	r5, r1
 80012dc:	4642      	mov	r2, r8
 80012de:	408a      	lsls	r2, r1
 80012e0:	1e69      	subs	r1, r5, #1
 80012e2:	418d      	sbcs	r5, r1
 80012e4:	4641      	mov	r1, r8
 80012e6:	40d8      	lsrs	r0, r3
 80012e8:	40d9      	lsrs	r1, r3
 80012ea:	4302      	orrs	r2, r0
 80012ec:	432a      	orrs	r2, r5
 80012ee:	000b      	movs	r3, r1
 80012f0:	0751      	lsls	r1, r2, #29
 80012f2:	d100      	bne.n	80012f6 <__aeabi_ddiv+0x56e>
 80012f4:	e751      	b.n	800119a <__aeabi_ddiv+0x412>
 80012f6:	210f      	movs	r1, #15
 80012f8:	4011      	ands	r1, r2
 80012fa:	2904      	cmp	r1, #4
 80012fc:	d000      	beq.n	8001300 <__aeabi_ddiv+0x578>
 80012fe:	e746      	b.n	800118e <__aeabi_ddiv+0x406>
 8001300:	e74b      	b.n	800119a <__aeabi_ddiv+0x412>
 8001302:	0005      	movs	r5, r0
 8001304:	428e      	cmp	r6, r1
 8001306:	d000      	beq.n	800130a <__aeabi_ddiv+0x582>
 8001308:	e66a      	b.n	8000fe0 <__aeabi_ddiv+0x258>
 800130a:	9a00      	ldr	r2, [sp, #0]
 800130c:	4293      	cmp	r3, r2
 800130e:	d000      	beq.n	8001312 <__aeabi_ddiv+0x58a>
 8001310:	e666      	b.n	8000fe0 <__aeabi_ddiv+0x258>
 8001312:	e667      	b.n	8000fe4 <__aeabi_ddiv+0x25c>
 8001314:	4a16      	ldr	r2, [pc, #88]	; (8001370 <__aeabi_ddiv+0x5e8>)
 8001316:	445a      	add	r2, fp
 8001318:	2a00      	cmp	r2, #0
 800131a:	dc00      	bgt.n	800131e <__aeabi_ddiv+0x596>
 800131c:	e710      	b.n	8001140 <__aeabi_ddiv+0x3b8>
 800131e:	2301      	movs	r3, #1
 8001320:	2500      	movs	r5, #0
 8001322:	4498      	add	r8, r3
 8001324:	e667      	b.n	8000ff6 <__aeabi_ddiv+0x26e>
 8001326:	075d      	lsls	r5, r3, #29
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	0b1c      	lsrs	r4, r3, #12
 800132c:	08d2      	lsrs	r2, r2, #3
 800132e:	2300      	movs	r3, #0
 8001330:	4315      	orrs	r5, r2
 8001332:	e580      	b.n	8000e36 <__aeabi_ddiv+0xae>
 8001334:	9800      	ldr	r0, [sp, #0]
 8001336:	3d02      	subs	r5, #2
 8001338:	0042      	lsls	r2, r0, #1
 800133a:	4282      	cmp	r2, r0
 800133c:	41bf      	sbcs	r7, r7
 800133e:	427f      	negs	r7, r7
 8001340:	193c      	adds	r4, r7, r4
 8001342:	1936      	adds	r6, r6, r4
 8001344:	9200      	str	r2, [sp, #0]
 8001346:	e7dd      	b.n	8001304 <__aeabi_ddiv+0x57c>
 8001348:	2480      	movs	r4, #128	; 0x80
 800134a:	4643      	mov	r3, r8
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	431c      	orrs	r4, r3
 8001350:	0324      	lsls	r4, r4, #12
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__aeabi_ddiv+0x5dc>)
 8001354:	0b24      	lsrs	r4, r4, #12
 8001356:	e56e      	b.n	8000e36 <__aeabi_ddiv+0xae>
 8001358:	9a00      	ldr	r2, [sp, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3ea      	bcc.n	8001334 <__aeabi_ddiv+0x5ac>
 800135e:	0005      	movs	r5, r0
 8001360:	e7d3      	b.n	800130a <__aeabi_ddiv+0x582>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	000007ff 	.word	0x000007ff
 8001368:	0000043e 	.word	0x0000043e
 800136c:	0000041e 	.word	0x0000041e
 8001370:	000003ff 	.word	0x000003ff

08001374 <__aeabi_i2d>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	2800      	cmp	r0, #0
 8001378:	d016      	beq.n	80013a8 <__aeabi_i2d+0x34>
 800137a:	17c3      	asrs	r3, r0, #31
 800137c:	18c5      	adds	r5, r0, r3
 800137e:	405d      	eors	r5, r3
 8001380:	0fc4      	lsrs	r4, r0, #31
 8001382:	0028      	movs	r0, r5
 8001384:	f000 f8ae 	bl	80014e4 <__clzsi2>
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <__aeabi_i2d+0x5c>)
 800138a:	1a12      	subs	r2, r2, r0
 800138c:	280a      	cmp	r0, #10
 800138e:	dc16      	bgt.n	80013be <__aeabi_i2d+0x4a>
 8001390:	0003      	movs	r3, r0
 8001392:	002e      	movs	r6, r5
 8001394:	3315      	adds	r3, #21
 8001396:	409e      	lsls	r6, r3
 8001398:	230b      	movs	r3, #11
 800139a:	1a18      	subs	r0, r3, r0
 800139c:	40c5      	lsrs	r5, r0
 800139e:	0552      	lsls	r2, r2, #21
 80013a0:	032d      	lsls	r5, r5, #12
 80013a2:	0b2d      	lsrs	r5, r5, #12
 80013a4:	0d53      	lsrs	r3, r2, #21
 80013a6:	e003      	b.n	80013b0 <__aeabi_i2d+0x3c>
 80013a8:	2400      	movs	r4, #0
 80013aa:	2300      	movs	r3, #0
 80013ac:	2500      	movs	r5, #0
 80013ae:	2600      	movs	r6, #0
 80013b0:	051b      	lsls	r3, r3, #20
 80013b2:	432b      	orrs	r3, r5
 80013b4:	07e4      	lsls	r4, r4, #31
 80013b6:	4323      	orrs	r3, r4
 80013b8:	0030      	movs	r0, r6
 80013ba:	0019      	movs	r1, r3
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	380b      	subs	r0, #11
 80013c0:	4085      	lsls	r5, r0
 80013c2:	0552      	lsls	r2, r2, #21
 80013c4:	032d      	lsls	r5, r5, #12
 80013c6:	2600      	movs	r6, #0
 80013c8:	0b2d      	lsrs	r5, r5, #12
 80013ca:	0d53      	lsrs	r3, r2, #21
 80013cc:	e7f0      	b.n	80013b0 <__aeabi_i2d+0x3c>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	0000041e 	.word	0x0000041e

080013d4 <__aeabi_d2f>:
 80013d4:	0002      	movs	r2, r0
 80013d6:	004b      	lsls	r3, r1, #1
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	0d5b      	lsrs	r3, r3, #21
 80013dc:	030c      	lsls	r4, r1, #12
 80013de:	4e3d      	ldr	r6, [pc, #244]	; (80014d4 <__aeabi_d2f+0x100>)
 80013e0:	0a64      	lsrs	r4, r4, #9
 80013e2:	0f40      	lsrs	r0, r0, #29
 80013e4:	1c5f      	adds	r7, r3, #1
 80013e6:	0fc9      	lsrs	r1, r1, #31
 80013e8:	4304      	orrs	r4, r0
 80013ea:	00d5      	lsls	r5, r2, #3
 80013ec:	4237      	tst	r7, r6
 80013ee:	d00a      	beq.n	8001406 <__aeabi_d2f+0x32>
 80013f0:	4839      	ldr	r0, [pc, #228]	; (80014d8 <__aeabi_d2f+0x104>)
 80013f2:	181e      	adds	r6, r3, r0
 80013f4:	2efe      	cmp	r6, #254	; 0xfe
 80013f6:	dd16      	ble.n	8001426 <__aeabi_d2f+0x52>
 80013f8:	20ff      	movs	r0, #255	; 0xff
 80013fa:	2400      	movs	r4, #0
 80013fc:	05c0      	lsls	r0, r0, #23
 80013fe:	4320      	orrs	r0, r4
 8001400:	07c9      	lsls	r1, r1, #31
 8001402:	4308      	orrs	r0, r1
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <__aeabi_d2f+0x44>
 800140a:	432c      	orrs	r4, r5
 800140c:	d026      	beq.n	800145c <__aeabi_d2f+0x88>
 800140e:	2205      	movs	r2, #5
 8001410:	0192      	lsls	r2, r2, #6
 8001412:	0a54      	lsrs	r4, r2, #9
 8001414:	b2d8      	uxtb	r0, r3
 8001416:	e7f1      	b.n	80013fc <__aeabi_d2f+0x28>
 8001418:	4325      	orrs	r5, r4
 800141a:	d0ed      	beq.n	80013f8 <__aeabi_d2f+0x24>
 800141c:	2080      	movs	r0, #128	; 0x80
 800141e:	03c0      	lsls	r0, r0, #15
 8001420:	4304      	orrs	r4, r0
 8001422:	20ff      	movs	r0, #255	; 0xff
 8001424:	e7ea      	b.n	80013fc <__aeabi_d2f+0x28>
 8001426:	2e00      	cmp	r6, #0
 8001428:	dd1b      	ble.n	8001462 <__aeabi_d2f+0x8e>
 800142a:	0192      	lsls	r2, r2, #6
 800142c:	1e53      	subs	r3, r2, #1
 800142e:	419a      	sbcs	r2, r3
 8001430:	00e4      	lsls	r4, r4, #3
 8001432:	0f6d      	lsrs	r5, r5, #29
 8001434:	4322      	orrs	r2, r4
 8001436:	432a      	orrs	r2, r5
 8001438:	0753      	lsls	r3, r2, #29
 800143a:	d048      	beq.n	80014ce <__aeabi_d2f+0xfa>
 800143c:	230f      	movs	r3, #15
 800143e:	4013      	ands	r3, r2
 8001440:	2b04      	cmp	r3, #4
 8001442:	d000      	beq.n	8001446 <__aeabi_d2f+0x72>
 8001444:	3204      	adds	r2, #4
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	04db      	lsls	r3, r3, #19
 800144a:	4013      	ands	r3, r2
 800144c:	d03f      	beq.n	80014ce <__aeabi_d2f+0xfa>
 800144e:	1c70      	adds	r0, r6, #1
 8001450:	2efe      	cmp	r6, #254	; 0xfe
 8001452:	d0d1      	beq.n	80013f8 <__aeabi_d2f+0x24>
 8001454:	0192      	lsls	r2, r2, #6
 8001456:	0a54      	lsrs	r4, r2, #9
 8001458:	b2c0      	uxtb	r0, r0
 800145a:	e7cf      	b.n	80013fc <__aeabi_d2f+0x28>
 800145c:	2000      	movs	r0, #0
 800145e:	2400      	movs	r4, #0
 8001460:	e7cc      	b.n	80013fc <__aeabi_d2f+0x28>
 8001462:	0032      	movs	r2, r6
 8001464:	3217      	adds	r2, #23
 8001466:	db22      	blt.n	80014ae <__aeabi_d2f+0xda>
 8001468:	2080      	movs	r0, #128	; 0x80
 800146a:	0400      	lsls	r0, r0, #16
 800146c:	4320      	orrs	r0, r4
 800146e:	241e      	movs	r4, #30
 8001470:	1ba4      	subs	r4, r4, r6
 8001472:	2c1f      	cmp	r4, #31
 8001474:	dd1d      	ble.n	80014b2 <__aeabi_d2f+0xde>
 8001476:	2202      	movs	r2, #2
 8001478:	4252      	negs	r2, r2
 800147a:	1b96      	subs	r6, r2, r6
 800147c:	0002      	movs	r2, r0
 800147e:	40f2      	lsrs	r2, r6
 8001480:	0016      	movs	r6, r2
 8001482:	2c20      	cmp	r4, #32
 8001484:	d004      	beq.n	8001490 <__aeabi_d2f+0xbc>
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <__aeabi_d2f+0x108>)
 8001488:	4694      	mov	ip, r2
 800148a:	4463      	add	r3, ip
 800148c:	4098      	lsls	r0, r3
 800148e:	4305      	orrs	r5, r0
 8001490:	002a      	movs	r2, r5
 8001492:	1e53      	subs	r3, r2, #1
 8001494:	419a      	sbcs	r2, r3
 8001496:	4332      	orrs	r2, r6
 8001498:	2600      	movs	r6, #0
 800149a:	0753      	lsls	r3, r2, #29
 800149c:	d1ce      	bne.n	800143c <__aeabi_d2f+0x68>
 800149e:	2480      	movs	r4, #128	; 0x80
 80014a0:	0013      	movs	r3, r2
 80014a2:	04e4      	lsls	r4, r4, #19
 80014a4:	2001      	movs	r0, #1
 80014a6:	4023      	ands	r3, r4
 80014a8:	4222      	tst	r2, r4
 80014aa:	d1d3      	bne.n	8001454 <__aeabi_d2f+0x80>
 80014ac:	e7b0      	b.n	8001410 <__aeabi_d2f+0x3c>
 80014ae:	2300      	movs	r3, #0
 80014b0:	e7ad      	b.n	800140e <__aeabi_d2f+0x3a>
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <__aeabi_d2f+0x10c>)
 80014b4:	4694      	mov	ip, r2
 80014b6:	002a      	movs	r2, r5
 80014b8:	40e2      	lsrs	r2, r4
 80014ba:	0014      	movs	r4, r2
 80014bc:	002a      	movs	r2, r5
 80014be:	4463      	add	r3, ip
 80014c0:	409a      	lsls	r2, r3
 80014c2:	4098      	lsls	r0, r3
 80014c4:	1e55      	subs	r5, r2, #1
 80014c6:	41aa      	sbcs	r2, r5
 80014c8:	4302      	orrs	r2, r0
 80014ca:	4322      	orrs	r2, r4
 80014cc:	e7e4      	b.n	8001498 <__aeabi_d2f+0xc4>
 80014ce:	0033      	movs	r3, r6
 80014d0:	e79e      	b.n	8001410 <__aeabi_d2f+0x3c>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007fe 	.word	0x000007fe
 80014d8:	fffffc80 	.word	0xfffffc80
 80014dc:	fffffca2 	.word	0xfffffca2
 80014e0:	fffffc82 	.word	0xfffffc82

080014e4 <__clzsi2>:
 80014e4:	211c      	movs	r1, #28
 80014e6:	2301      	movs	r3, #1
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	4298      	cmp	r0, r3
 80014ec:	d301      	bcc.n	80014f2 <__clzsi2+0xe>
 80014ee:	0c00      	lsrs	r0, r0, #16
 80014f0:	3910      	subs	r1, #16
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	4298      	cmp	r0, r3
 80014f6:	d301      	bcc.n	80014fc <__clzsi2+0x18>
 80014f8:	0a00      	lsrs	r0, r0, #8
 80014fa:	3908      	subs	r1, #8
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	4298      	cmp	r0, r3
 8001500:	d301      	bcc.n	8001506 <__clzsi2+0x22>
 8001502:	0900      	lsrs	r0, r0, #4
 8001504:	3904      	subs	r1, #4
 8001506:	a202      	add	r2, pc, #8	; (adr r2, 8001510 <__clzsi2+0x2c>)
 8001508:	5c10      	ldrb	r0, [r2, r0]
 800150a:	1840      	adds	r0, r0, r1
 800150c:	4770      	bx	lr
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	02020304 	.word	0x02020304
 8001514:	01010101 	.word	0x01010101
	...

08001520 <__clzdi2>:
 8001520:	b510      	push	{r4, lr}
 8001522:	2900      	cmp	r1, #0
 8001524:	d103      	bne.n	800152e <__clzdi2+0xe>
 8001526:	f7ff ffdd 	bl	80014e4 <__clzsi2>
 800152a:	3020      	adds	r0, #32
 800152c:	e002      	b.n	8001534 <__clzdi2+0x14>
 800152e:	0008      	movs	r0, r1
 8001530:	f7ff ffd8 	bl	80014e4 <__clzsi2>
 8001534:	bd10      	pop	{r4, pc}
 8001536:	46c0      	nop			; (mov r8, r8)

08001538 <set_and_go_to_next_state>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void set_and_go_to_next_state(state next_state)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
	fsm_handler.next_state       = next_state;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <set_and_go_to_next_state+0x24>)
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	705a      	strb	r2, [r3, #1]
	fsm_handler.go_to_next_state = true;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <set_and_go_to_next_state+0x24>)
 800154e:	2201      	movs	r2, #1
 8001550:	709a      	strb	r2, [r3, #2]
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	20000178 	.word	0x20000178

08001560 <parse_and_execute_cmd>:

void parse_and_execute_cmd(char *cmd_received)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	//bool cmd_is_valid = true;
	//uint16_t val;
	motor_code = NONE;
 8001568:	4b9e      	ldr	r3, [pc, #632]	; (80017e4 <parse_and_execute_cmd+0x284>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]

	/* Get command arguments */
	const char delim[2] = " ";
 800156e:	2114      	movs	r1, #20
 8001570:	187b      	adds	r3, r7, r1
 8001572:	2220      	movs	r2, #32
 8001574:	801a      	strh	r2, [r3, #0]
	//char *token;
	char *arg[CMD_N_ARGS_MAX]; //TODO lunghezza dinamica per possibili comandi futuri
	uint8_t args_index = 0;
 8001576:	201f      	movs	r0, #31
 8001578:	183b      	adds	r3, r7, r0
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]

	arg[args_index] = strtok(cmd_received, delim); // get the first token (argument)
 800157e:	183b      	adds	r3, r7, r0
 8001580:	781c      	ldrb	r4, [r3, #0]
 8001582:	187a      	adds	r2, r7, r1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f004 fb97 	bl	8005cbc <strtok>
 800158e:	0001      	movs	r1, r0
 8001590:	2308      	movs	r3, #8
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	00a2      	lsls	r2, r4, #2
 8001596:	50d1      	str	r1, [r2, r3]

	while( arg[args_index] != NULL )
 8001598:	e012      	b.n	80015c0 <parse_and_execute_cmd+0x60>
	{ // walk through other tokens
		//printf( "%s\n", arg[args_index] );
		args_index++;
 800159a:	211f      	movs	r1, #31
 800159c:	187b      	adds	r3, r7, r1
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	3201      	adds	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
		arg[args_index] = strtok(NULL, delim);
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	781c      	ldrb	r4, [r3, #0]
 80015aa:	2314      	movs	r3, #20
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	0019      	movs	r1, r3
 80015b0:	2000      	movs	r0, #0
 80015b2:	f004 fb83 	bl	8005cbc <strtok>
 80015b6:	0001      	movs	r1, r0
 80015b8:	2308      	movs	r3, #8
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	00a2      	lsls	r2, r4, #2
 80015be:	50d1      	str	r1, [r2, r3]
	while( arg[args_index] != NULL )
 80015c0:	231f      	movs	r3, #31
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	2408      	movs	r4, #8
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	58d3      	ldr	r3, [r2, r3]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e3      	bne.n	800159a <parse_and_execute_cmd+0x3a>
	}

	if (strcmp(arg[0], "ok") == 0 || strcmp(arg[0], "ok\r") == 0) //TODO use strstr()
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a84      	ldr	r2, [pc, #528]	; (80017e8 <parse_and_execute_cmd+0x288>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f7fe fd94 	bl	8000108 <strcmp>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d008      	beq.n	80015f6 <parse_and_execute_cmd+0x96>
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a80      	ldr	r2, [pc, #512]	; (80017ec <parse_and_execute_cmd+0x28c>)
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7fe fd8b 	bl	8000108 <strcmp>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d103      	bne.n	80015fe <parse_and_execute_cmd+0x9e>
	{
		motor_code = RUN;
 80015f6:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <parse_and_execute_cmd+0x284>)
 80015f8:	2206      	movs	r2, #6
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e0ee      	b.n	80017dc <parse_and_execute_cmd+0x27c>
	}
	else if (strcmp(arg[0], "time") == 0 && strcmp(arg[1], "") != 0)
 80015fe:	2408      	movs	r4, #8
 8001600:	193b      	adds	r3, r7, r4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7a      	ldr	r2, [pc, #488]	; (80017f0 <parse_and_execute_cmd+0x290>)
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f7fe fd7d 	bl	8000108 <strcmp>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d111      	bne.n	8001636 <parse_and_execute_cmd+0xd6>
 8001612:	0021      	movs	r1, r4
 8001614:	187b      	adds	r3, r7, r1
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <parse_and_execute_cmd+0xd6>
	{
		motor_code = SET_TIME;
 800161e:	4b71      	ldr	r3, [pc, #452]	; (80017e4 <parse_and_execute_cmd+0x284>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
		motor.run_time = atoi(arg[1]);
 8001624:	187b      	adds	r3, r7, r1
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f004 fa79 	bl	8005b20 <atoi>
 800162e:	0002      	movs	r2, r0
 8001630:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <parse_and_execute_cmd+0x294>)
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e0d2      	b.n	80017dc <parse_and_execute_cmd+0x27c>
	}
	else if (strcmp(arg[0], "dir") == 0 && strcmp(arg[1], "") != 0)
 8001636:	2408      	movs	r4, #8
 8001638:	193b      	adds	r3, r7, r4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <parse_and_execute_cmd+0x298>)
 800163e:	0011      	movs	r1, r2
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fd61 	bl	8000108 <strcmp>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d110      	bne.n	800166c <parse_and_execute_cmd+0x10c>
 800164a:	0021      	movs	r1, r4
 800164c:	187b      	adds	r3, r7, r1
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <parse_and_execute_cmd+0x10c>
	{
		motor_code = SET_DIR;
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <parse_and_execute_cmd+0x284>)
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]
		motor.direction = arg[1]; //TODO: code fw and bw as 0 and 1 stringstream
 800165c:	187b      	adds	r3, r7, r1
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	4193      	sbcs	r3, r2
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <parse_and_execute_cmd+0x294>)
 8001668:	711a      	strb	r2, [r3, #4]
 800166a:	e0b7      	b.n	80017dc <parse_and_execute_cmd+0x27c>
	}
	else if (strcmp(arg[0], "pwm") == 0)
 800166c:	2408      	movs	r4, #8
 800166e:	193b      	adds	r3, r7, r4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a62      	ldr	r2, [pc, #392]	; (80017fc <parse_and_execute_cmd+0x29c>)
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f7fe fd46 	bl	8000108 <strcmp>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d133      	bne.n	80016e8 <parse_and_execute_cmd+0x188>
	{
		if (strcmp(arg[1], "") != 0)
 8001680:	0021      	movs	r1, r4
 8001682:	187b      	adds	r3, r7, r1
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01a      	beq.n	80016c2 <parse_and_execute_cmd+0x162>
		{
			motor_code = SET_PWM_DC;
 800168c:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <parse_and_execute_cmd+0x284>)
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
			float dc = atoi(arg[1])/100.0;
 8001692:	187b      	adds	r3, r7, r1
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	0018      	movs	r0, r3
 8001698:	f004 fa42 	bl	8005b20 <atoi>
 800169c:	0003      	movs	r3, r0
 800169e:	0018      	movs	r0, r3
 80016a0:	f7ff fe68 	bl	8001374 <__aeabi_i2d>
 80016a4:	2200      	movs	r2, #0
 80016a6:	4b56      	ldr	r3, [pc, #344]	; (8001800 <parse_and_execute_cmd+0x2a0>)
 80016a8:	f7ff fb6e 	bl	8000d88 <__aeabi_ddiv>
 80016ac:	0002      	movs	r2, r0
 80016ae:	000b      	movs	r3, r1
 80016b0:	0010      	movs	r0, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	f7ff fe8e 	bl	80013d4 <__aeabi_d2f>
 80016b8:	1c03      	adds	r3, r0, #0
 80016ba:	61bb      	str	r3, [r7, #24]
			motor.pwm_duty_cycle = dc;
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <parse_and_execute_cmd+0x294>)
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	609a      	str	r2, [r3, #8]
		}
		if (strcmp(arg[2], "") != 0)
 80016c2:	2108      	movs	r1, #8
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <parse_and_execute_cmd+0x170>
 80016ce:	e085      	b.n	80017dc <parse_and_execute_cmd+0x27c>
		{
			motor_code = SET_PWM_PERIOD;
 80016d0:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <parse_and_execute_cmd+0x284>)
 80016d2:	2204      	movs	r2, #4
 80016d4:	701a      	strb	r2, [r3, #0]
			motor.pwm_period = atoi(arg[2]);
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	0018      	movs	r0, r3
 80016dc:	f004 fa20 	bl	8005b20 <atoi>
 80016e0:	0002      	movs	r2, r0
 80016e2:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <parse_and_execute_cmd+0x294>)
 80016e4:	60da      	str	r2, [r3, #12]
	else
	{
		//cmd_is_valid = false;
		printf("\r\nError: invalid command\r\n\n");
	}
}
 80016e6:	e079      	b.n	80017dc <parse_and_execute_cmd+0x27c>
	else if (strcmp(arg[0], "show") == 0 || strcmp(arg[0], "show\r") == 0)
 80016e8:	2408      	movs	r4, #8
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a45      	ldr	r2, [pc, #276]	; (8001804 <parse_and_execute_cmd+0x2a4>)
 80016f0:	0011      	movs	r1, r2
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7fe fd08 	bl	8000108 <strcmp>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d008      	beq.n	800170e <parse_and_execute_cmd+0x1ae>
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a41      	ldr	r2, [pc, #260]	; (8001808 <parse_and_execute_cmd+0x2a8>)
 8001702:	0011      	movs	r1, r2
 8001704:	0018      	movs	r0, r3
 8001706:	f7fe fcff 	bl	8000108 <strcmp>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d132      	bne.n	8001774 <parse_and_execute_cmd+0x214>
		motor_code = GET_PARAM;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <parse_and_execute_cmd+0x284>)
 8001710:	2205      	movs	r2, #5
 8001712:	701a      	strb	r2, [r3, #0]
		printf("\nParameters:\n\r");
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <parse_and_execute_cmd+0x2ac>)
 8001716:	0018      	movs	r0, r3
 8001718:	f004 fa3a 	bl	8005b90 <iprintf>
		printf("run_time:\t %d\tms\r\n", motor.run_time);
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <parse_and_execute_cmd+0x294>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <parse_and_execute_cmd+0x2b0>)
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f004 fa33 	bl	8005b90 <iprintf>
		printf("direction:\t %d\n\r", motor.direction);
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <parse_and_execute_cmd+0x294>)
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	001a      	movs	r2, r3
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <parse_and_execute_cmd+0x2b4>)
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f004 fa2b 	bl	8005b90 <iprintf>
		uint8_t dc = motor.pwm_duty_cycle*100;
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <parse_and_execute_cmd+0x294>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4936      	ldr	r1, [pc, #216]	; (8001818 <parse_and_execute_cmd+0x2b8>)
 8001740:	1c18      	adds	r0, r3, #0
 8001742:	f7fe ff9d 	bl	8000680 <__aeabi_fmul>
 8001746:	1c03      	adds	r3, r0, #0
 8001748:	251e      	movs	r5, #30
 800174a:	197c      	adds	r4, r7, r5
 800174c:	1c18      	adds	r0, r3, #0
 800174e:	f7fe fe03 	bl	8000358 <__aeabi_f2uiz>
 8001752:	0003      	movs	r3, r0
 8001754:	7023      	strb	r3, [r4, #0]
		printf("pwm_duty_cycle:\t %d\t%%\n\r", dc);
 8001756:	197b      	adds	r3, r7, r5
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <parse_and_execute_cmd+0x2bc>)
 800175c:	0011      	movs	r1, r2
 800175e:	0018      	movs	r0, r3
 8001760:	f004 fa16 	bl	8005b90 <iprintf>
		printf("pwm_period:\t %d\ttick\n\r", motor.pwm_period);
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <parse_and_execute_cmd+0x294>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <parse_and_execute_cmd+0x2c0>)
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f004 fa0f 	bl	8005b90 <iprintf>
	{
 8001772:	e033      	b.n	80017dc <parse_and_execute_cmd+0x27c>
	else if (strcmp(arg[0], "help") == 0 || strcmp(arg[0], "help\r") == 0)
 8001774:	2408      	movs	r4, #8
 8001776:	193b      	adds	r3, r7, r4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <parse_and_execute_cmd+0x2c4>)
 800177c:	0011      	movs	r1, r2
 800177e:	0018      	movs	r0, r3
 8001780:	f7fe fcc2 	bl	8000108 <strcmp>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d008      	beq.n	800179a <parse_and_execute_cmd+0x23a>
 8001788:	193b      	adds	r3, r7, r4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <parse_and_execute_cmd+0x2c8>)
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f7fe fcb9 	bl	8000108 <strcmp>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d11b      	bne.n	80017d2 <parse_and_execute_cmd+0x272>
		motor_code = HELP;
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <parse_and_execute_cmd+0x284>)
 800179c:	2207      	movs	r2, #7
 800179e:	701a      	strb	r2, [r3, #0]
		printf("\nCommads:\n\r");
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <parse_and_execute_cmd+0x2cc>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f004 f9f4 	bl	8005b90 <iprintf>
		printf("ok\n\r");
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <parse_and_execute_cmd+0x2d0>)
 80017aa:	0018      	movs	r0, r3
 80017ac:	f004 f9f0 	bl	8005b90 <iprintf>
		printf("time [ms]\n\r");
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <parse_and_execute_cmd+0x2d4>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f004 f9ec 	bl	8005b90 <iprintf>
		printf("dir [0/1]\n\r");
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <parse_and_execute_cmd+0x2d8>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f004 f9e8 	bl	8005b90 <iprintf>
		printf("pwm [dc%] [n. tick per period]\n\r");
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <parse_and_execute_cmd+0x2dc>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f004 f9e4 	bl	8005b90 <iprintf>
		printf("show\n\r");
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <parse_and_execute_cmd+0x2e0>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f004 f9e0 	bl	8005b90 <iprintf>
 80017d0:	e004      	b.n	80017dc <parse_and_execute_cmd+0x27c>
		printf("\r\nError: invalid command\r\n\n");
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <parse_and_execute_cmd+0x2e4>)
 80017d4:	0018      	movs	r0, r3
 80017d6:	f004 fa67 	bl	8005ca8 <puts>
}
 80017da:	e7ff      	b.n	80017dc <parse_and_execute_cmd+0x27c>
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b008      	add	sp, #32
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	2000017b 	.word	0x2000017b
 80017e8:	08006f60 	.word	0x08006f60
 80017ec:	08006f64 	.word	0x08006f64
 80017f0:	08006f68 	.word	0x08006f68
 80017f4:	20000000 	.word	0x20000000
 80017f8:	08006f70 	.word	0x08006f70
 80017fc:	08006f74 	.word	0x08006f74
 8001800:	40590000 	.word	0x40590000
 8001804:	08006f78 	.word	0x08006f78
 8001808:	08006f80 	.word	0x08006f80
 800180c:	08006f88 	.word	0x08006f88
 8001810:	08006f98 	.word	0x08006f98
 8001814:	08006fac 	.word	0x08006fac
 8001818:	42c80000 	.word	0x42c80000
 800181c:	08006fc0 	.word	0x08006fc0
 8001820:	08006fdc 	.word	0x08006fdc
 8001824:	08006ff4 	.word	0x08006ff4
 8001828:	08006ffc 	.word	0x08006ffc
 800182c:	08007004 	.word	0x08007004
 8001830:	08007010 	.word	0x08007010
 8001834:	08007018 	.word	0x08007018
 8001838:	08007024 	.word	0x08007024
 800183c:	08007030 	.word	0x08007030
 8001840:	08007054 	.word	0x08007054
 8001844:	0800705c 	.word	0x0800705c

08001848 <reset_cmd>:

void reset_cmd(uart_rx_handler *uart_handler)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	uart_handler->char_index = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	745a      	strb	r2, [r3, #17]
	memset(uart_handler->cmd_received, 0x0, sizeof(uart_handler->cmd_received));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	220f      	movs	r2, #15
 800185c:	2100      	movs	r1, #0
 800185e:	0018      	movs	r0, r3
 8001860:	f004 f98e 	bl	8005b80 <memset>
	uart_handler->is_cmd_sent = false;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <run_motor>:
void set_motor_direction(GPIO_PinState state);
void pwm_set_duty_cicle(TIM_HandleTypeDef *htim, uint32_t channel, float duty_cicle);
void pwm_set_period(TIM_HandleTypeDef *htim, float period_ms);

void run_motor()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	enable_drv8876(SET);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 fa33 	bl	8001ce4 <enable_drv8876>
	set_motor_direction(motor.direction);
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <run_motor+0x5c>)
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 fa40 	bl	8001d08 <set_motor_direction>
	pwm_set_period(&htim2, motor.pwm_period);
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <run_motor+0x5c>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff f9eb 	bl	8000c68 <__aeabi_i2f>
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <run_motor+0x60>)
 8001896:	1c11      	adds	r1, r2, #0
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fabb 	bl	8001e14 <pwm_set_period>
	pwm_set_duty_cicle(&htim2, TIM_CHANNEL_1, motor.pwm_duty_cycle);
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <run_motor+0x5c>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <run_motor+0x60>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fa40 	bl	8001d2c <pwm_set_duty_cicle>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <run_motor+0x60>)
 80018ae:	2100      	movs	r1, #0
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 ffb7 	bl	8003824 <HAL_TIM_PWM_Start>
	HAL_Delay(motor.run_time);
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <run_motor+0x5c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 fd48 	bl	8002350 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <run_motor+0x60>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	0018      	movs	r0, r3
 80018c6:	f002 f839 	bl	800393c <HAL_TIM_PWM_Stop>
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	2000009c 	.word	0x2000009c

080018d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018dc:	f000 fcc8 	bl	8002270 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018e0:	f000 f888 	bl	80019f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018e4:	f000 f99e 	bl	8001c24 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80018e8:	f000 f96c 	bl	8001bc4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80018ec:	f000 f8ea 	bl	8001ac4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	// INIT PHASE
	fsm_handler.current_state    = INIT;
 80018f0:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <main+0xec>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	//fsm_handler.next_state       = WAIT_FOR_CMD;
	//fsm_handler.go_to_next_state = true;
	reset_cmd(&serial_cmd_handler);
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <main+0xf0>)
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ffa5 	bl	8001848 <reset_cmd>

	//TODO: vedi righe 186-188

	//test_motor_debug();

	printf("\n\r----------------------START----------------------\r\n");
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <main+0xf4>)
 8001900:	0018      	movs	r0, r3
 8001902:	f004 f9d1 	bl	8005ca8 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (fsm_handler.go_to_next_state) {
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <main+0xec>)
 8001908:	789b      	ldrb	r3, [r3, #2]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <main+0x3e>
			fsm_handler.current_state = fsm_handler.next_state;
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <main+0xec>)
 8001910:	785a      	ldrb	r2, [r3, #1]
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <main+0xec>)
 8001914:	701a      	strb	r2, [r3, #0]
		}
		switch (fsm_handler.current_state) {
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <main+0xec>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d042      	beq.n	80019a4 <main+0xcc>
 800191e:	dcf2      	bgt.n	8001906 <main+0x2e>
 8001920:	2b02      	cmp	r3, #2
 8001922:	d02b      	beq.n	800197c <main+0xa4>
 8001924:	dcef      	bgt.n	8001906 <main+0x2e>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <main+0x58>
 800192a:	2b01      	cmp	r3, #1
 800192c:	d00c      	beq.n	8001948 <main+0x70>
 800192e:	e048      	b.n	80019c2 <main+0xea>
		case INIT:
			//HAL_NVIC_SystemReset(); //what??
			set_and_go_to_next_state(WAIT_FOR_CMD);
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fe01 	bl	8001538 <set_and_go_to_next_state>
			printf("\nDigit 'ok' and press ENTER to start motor test.\r\n");
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <main+0xf8>)
 8001938:	0018      	movs	r0, r3
 800193a:	f004 f9b5 	bl	8005ca8 <puts>
			printf("Type 'help' to see available commands\r\n\n"); //TODO: automatic print of the available cmd
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <main+0xfc>)
 8001940:	0018      	movs	r0, r3
 8001942:	f004 f9b1 	bl	8005ca8 <puts>
			break;
 8001946:	e03c      	b.n	80019c2 <main+0xea>
		case WAIT_FOR_CMD:
			printf("\r\nWaiting for command...\r\n\n");
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <main+0x100>)
 800194a:	0018      	movs	r0, r3
 800194c:	f004 f9ac 	bl	8005ca8 <puts>
			while(serial_cmd_handler.is_cmd_sent == false)
 8001950:	e005      	b.n	800195e <main+0x86>
			{
				HAL_UART_Receive_IT(&huart2, serial_cmd_handler.last_char_received, 1);
 8001952:	4922      	ldr	r1, [pc, #136]	; (80019dc <main+0x104>)
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <main+0x108>)
 8001956:	2201      	movs	r2, #1
 8001958:	0018      	movs	r0, r3
 800195a:	f002 fe39 	bl	80045d0 <HAL_UART_Receive_IT>
			while(serial_cmd_handler.is_cmd_sent == false)
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <main+0xf0>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	4053      	eors	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f2      	bne.n	8001952 <main+0x7a>
			}
			if (serial_cmd_handler.is_cmd_sent)
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <main+0xf0>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d025      	beq.n	80019c0 <main+0xe8>
			{
				set_and_go_to_next_state(CMD_RECEIVED);
 8001974:	2002      	movs	r0, #2
 8001976:	f7ff fddf 	bl	8001538 <set_and_go_to_next_state>
			}
			break;
 800197a:	e021      	b.n	80019c0 <main+0xe8>
		case CMD_RECEIVED:
			parse_and_execute_cmd(serial_cmd_handler.cmd_received);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <main+0x10c>)
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff fdee 	bl	8001560 <parse_and_execute_cmd>
			if (motor_code == RUN)
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <main+0x110>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b06      	cmp	r3, #6
 800198a:	d103      	bne.n	8001994 <main+0xbc>
			{
				set_and_go_to_next_state(RUN_MOTOR);
 800198c:	2003      	movs	r0, #3
 800198e:	f7ff fdd3 	bl	8001538 <set_and_go_to_next_state>
 8001992:	e002      	b.n	800199a <main+0xc2>
			}
			else
			{
				set_and_go_to_next_state(WAIT_FOR_CMD);
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff fdcf 	bl	8001538 <set_and_go_to_next_state>
			}
			reset_cmd(&serial_cmd_handler);
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <main+0xf0>)
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ff53 	bl	8001848 <reset_cmd>
			break;
 80019a2:	e00e      	b.n	80019c2 <main+0xea>
		case RUN_MOTOR:
			printf("\n\rMotor running...\n\r");
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <main+0x114>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f004 f8f2 	bl	8005b90 <iprintf>
			run_motor();
 80019ac:	f7ff ff62 	bl	8001874 <run_motor>
			printf("\n\rEND test\n\r");
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <main+0x118>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f004 f8ec 	bl	8005b90 <iprintf>
			set_and_go_to_next_state(WAIT_FOR_CMD);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fdbd 	bl	8001538 <set_and_go_to_next_state>
			break;
 80019be:	e000      	b.n	80019c2 <main+0xea>
			break;
 80019c0:	46c0      	nop			; (mov r8, r8)
		if (fsm_handler.go_to_next_state) {
 80019c2:	e7a0      	b.n	8001906 <main+0x2e>
 80019c4:	20000178 	.word	0x20000178
 80019c8:	20000164 	.word	0x20000164
 80019cc:	08007078 	.word	0x08007078
 80019d0:	080070b0 	.word	0x080070b0
 80019d4:	080070e4 	.word	0x080070e4
 80019d8:	0800710c 	.word	0x0800710c
 80019dc:	20000174 	.word	0x20000174
 80019e0:	200000dc 	.word	0x200000dc
 80019e4:	20000165 	.word	0x20000165
 80019e8:	2000017b 	.word	0x2000017b
 80019ec:	08007128 	.word	0x08007128
 80019f0:	08007140 	.word	0x08007140

080019f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration\
 * @retval None
 */
void SystemClock_Config(void)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b099      	sub	sp, #100	; 0x64
 80019f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	242c      	movs	r4, #44	; 0x2c
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	0018      	movs	r0, r3
 8001a00:	2334      	movs	r3, #52	; 0x34
 8001a02:	001a      	movs	r2, r3
 8001a04:	2100      	movs	r1, #0
 8001a06:	f004 f8bb 	bl	8005b80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0a:	2318      	movs	r3, #24
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	0018      	movs	r0, r3
 8001a10:	2314      	movs	r3, #20
 8001a12:	001a      	movs	r2, r3
 8001a14:	2100      	movs	r1, #0
 8001a16:	f004 f8b3 	bl	8005b80 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1a:	003b      	movs	r3, r7
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	2318      	movs	r3, #24
 8001a20:	001a      	movs	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f004 f8ac 	bl	8005b80 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <SystemClock_Config+0xc8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a2e:	401a      	ands	r2, r3
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <SystemClock_Config+0xc8>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0109      	lsls	r1, r1, #4
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a3a:	0021      	movs	r1, r4
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2202      	movs	r2, #2
 8001a40:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2201      	movs	r2, #1
 8001a46:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 ff90 	bl	800297c <HAL_RCC_OscConfig>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001a60:	f000 fa28 	bl	8001eb4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	2118      	movs	r1, #24
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	220f      	movs	r2, #15
 8001a6a:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2201      	movs	r2, #1
 8001a70:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2100      	movs	r1, #0
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f001 faf3 	bl	8003074 <HAL_RCC_ClockConfig>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8001a92:	f000 fa0f 	bl	8001eb4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a96:	003b      	movs	r3, r7
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9c:	003b      	movs	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa2:	003b      	movs	r3, r7
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f001 fd09 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8001aae:	f000 fa01 	bl	8001eb4 <Error_Handler>
	}
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b019      	add	sp, #100	; 0x64
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	ffffe7ff 	.word	0xffffe7ff

08001ac4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	2318      	movs	r3, #24
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	0018      	movs	r0, r3
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f004 f853 	bl	8005b80 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ada:	2310      	movs	r3, #16
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	0018      	movs	r0, r3
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f004 f84b 	bl	8005b80 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001aea:	003b      	movs	r3, r7
 8001aec:	0018      	movs	r0, r3
 8001aee:	2310      	movs	r3, #16
 8001af0:	001a      	movs	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f004 f844 	bl	8005b80 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	05d2      	lsls	r2, r2, #23
 8001afe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b02:	220f      	movs	r2, #15
 8001b04:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <MX_TIM2_Init+0xfc>)
 8001b10:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b20:	0018      	movs	r0, r3
 8001b22:	f001 fdf7 	bl	8003714 <HAL_TIM_Base_Init>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001b2a:	f000 f9c3 	bl	8001eb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	2118      	movs	r1, #24
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	0152      	lsls	r2, r2, #5
 8001b36:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b38:	187a      	adds	r2, r7, r1
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f002 f8e8 	bl	8003d14 <HAL_TIM_ConfigClockSource>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8001b48:	f000 f9b4 	bl	8001eb4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f001 fe20 	bl	8003794 <HAL_TIM_PWM_Init>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8001b58:	f000 f9ac 	bl	8001eb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6a:	187a      	adds	r2, r7, r1
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f002 fbe1 	bl	8004338 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0xba>
	{
		Error_Handler();
 8001b7a:	f000 f99b 	bl	8001eb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7e:	003b      	movs	r3, r7
 8001b80:	2260      	movs	r2, #96	; 0x60
 8001b82:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 499;
 8001b84:	003b      	movs	r3, r7
 8001b86:	22f4      	movs	r2, #244	; 0xf4
 8001b88:	32ff      	adds	r2, #255	; 0xff
 8001b8a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	003b      	movs	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b92:	003b      	movs	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b98:	0039      	movs	r1, r7
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f001 fff2 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8001ba4:	1e03      	subs	r3, r0, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0xe8>
	{
		Error_Handler();
 8001ba8:	f000 f984 	bl	8001eb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <MX_TIM2_Init+0xf8>)
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 f9b8 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b00a      	add	sp, #40	; 0x28
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000009c 	.word	0x2000009c
 8001bc0:	000003e7 	.word	0x000003e7

08001bc4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <MX_USART2_UART_Init+0x5c>)
 8001bcc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd0:	2296      	movs	r2, #150	; 0x96
 8001bd2:	0192      	lsls	r2, r2, #6
 8001bd4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f002 fbed 	bl	80043e8 <HAL_UART_Init>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001c12:	f000 f94f 	bl	8001eb4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200000dc 	.word	0x200000dc
 8001c20:	40004400 	.word	0x40004400

08001c24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	240c      	movs	r4, #12
 8001c2c:	193b      	adds	r3, r7, r4
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2314      	movs	r3, #20
 8001c32:	001a      	movs	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f003 ffa3 	bl	8005b80 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c40:	2104      	movs	r1, #4
 8001c42:	430a      	orrs	r2, r1
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, IN2_Pin|nSLEEP_Pin, GPIO_PIN_RESET);
 8001c6a:	23a0      	movs	r3, #160	; 0xa0
 8001c6c:	05db      	lsls	r3, r3, #23
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2160      	movs	r1, #96	; 0x60
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 fe64 	bl	8002940 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	0099      	lsls	r1, r3, #2
 8001c7c:	23a0      	movs	r3, #160	; 0xa0
 8001c7e:	05db      	lsls	r3, r3, #23
 8001c80:	2201      	movs	r2, #1
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fe5c 	bl	8002940 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : IPROPI_Pin nFAULT_Pin SWO_Pin */
	GPIO_InitStruct.Pin = IPROPI_Pin|nFAULT_Pin|SWO_Pin;
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <MX_GPIO_Init+0xbc>)
 8001c8c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	193a      	adds	r2, r7, r4
 8001c9c:	23a0      	movs	r3, #160	; 0xa0
 8001c9e:	05db      	lsls	r3, r3, #23
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fcde 	bl	8002664 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN2_Pin nSLEEP_Pin LED_Pin */
	GPIO_InitStruct.Pin = IN2_Pin|nSLEEP_Pin|LED_Pin;
 8001ca8:	0021      	movs	r1, r4
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2298      	movs	r2, #152	; 0x98
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	187a      	adds	r2, r7, r1
 8001cc6:	23a0      	movs	r3, #160	; 0xa0
 8001cc8:	05db      	lsls	r3, r3, #23
 8001cca:	0011      	movs	r1, r2
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fcc9 	bl	8002664 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b009      	add	sp, #36	; 0x24
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	00000482 	.word	0x00000482

08001ce4 <enable_drv8876>:

/* USER CODE BEGIN 4 */
void enable_drv8876(GPIO_PinState state)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	0002      	movs	r2, r0
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, state);
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	23a0      	movs	r3, #160	; 0xa0
 8001cf6:	05db      	lsls	r3, r3, #23
 8001cf8:	2140      	movs	r1, #64	; 0x40
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f000 fe20 	bl	8002940 <HAL_GPIO_WritePin>
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <set_motor_direction>:

void set_motor_direction(GPIO_PinState state)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	0002      	movs	r2, r0
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, state);
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	23a0      	movs	r3, #160	; 0xa0
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fe0e 	bl	8002940 <HAL_GPIO_WritePin>
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <pwm_set_duty_cicle>:

void pwm_set_duty_cicle(TIM_HandleTypeDef *htim, uint32_t channel, float duty_cicle)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	if (duty_cicle < 0 || duty_cicle > 1)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fa96 	bl	800026c <__aeabi_fcmplt>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d163      	bne.n	8001e0c <pwm_set_duty_cicle+0xe0>
 8001d44:	21fe      	movs	r1, #254	; 0xfe
 8001d46:	0589      	lsls	r1, r1, #22
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe faa3 	bl	8000294 <__aeabi_fcmpgt>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d15c      	bne.n	8001e0c <pwm_set_duty_cicle+0xe0>
		return;

	__HAL_TIM_SetCompare(htim, channel, __HAL_TIM_GetAutoreload(htim) * duty_cicle);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d114      	bne.n	8001d82 <pwm_set_duty_cicle+0x56>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7fe ffd0 	bl	8000d04 <__aeabi_ui2f>
 8001d64:	1c03      	adds	r3, r0, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	1c18      	adds	r0, r3, #0
 8001d6a:	f7fe fc89 	bl	8000680 <__aeabi_fmul>
 8001d6e:	1c03      	adds	r3, r0, #0
 8001d70:	1c1a      	adds	r2, r3, #0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	1c10      	adds	r0, r2, #0
 8001d78:	f7fe faee 	bl	8000358 <__aeabi_f2uiz>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	6363      	str	r3, [r4, #52]	; 0x34
 8001d80:	e045      	b.n	8001e0e <pwm_set_duty_cicle+0xe2>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d114      	bne.n	8001db2 <pwm_set_duty_cicle+0x86>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7fe ffb8 	bl	8000d04 <__aeabi_ui2f>
 8001d94:	1c03      	adds	r3, r0, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	1c18      	adds	r0, r3, #0
 8001d9a:	f7fe fc71 	bl	8000680 <__aeabi_fmul>
 8001d9e:	1c03      	adds	r3, r0, #0
 8001da0:	1c1a      	adds	r2, r3, #0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681c      	ldr	r4, [r3, #0]
 8001da6:	1c10      	adds	r0, r2, #0
 8001da8:	f7fe fad6 	bl	8000358 <__aeabi_f2uiz>
 8001dac:	0003      	movs	r3, r0
 8001dae:	63a3      	str	r3, [r4, #56]	; 0x38
 8001db0:	e02d      	b.n	8001e0e <pwm_set_duty_cicle+0xe2>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d114      	bne.n	8001de2 <pwm_set_duty_cicle+0xb6>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7fe ffa0 	bl	8000d04 <__aeabi_ui2f>
 8001dc4:	1c03      	adds	r3, r0, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	1c18      	adds	r0, r3, #0
 8001dca:	f7fe fc59 	bl	8000680 <__aeabi_fmul>
 8001dce:	1c03      	adds	r3, r0, #0
 8001dd0:	1c1a      	adds	r2, r3, #0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	1c10      	adds	r0, r2, #0
 8001dd8:	f7fe fabe 	bl	8000358 <__aeabi_f2uiz>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001de0:	e015      	b.n	8001e0e <pwm_set_duty_cicle+0xe2>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7fe ff8b 	bl	8000d04 <__aeabi_ui2f>
 8001dee:	1c03      	adds	r3, r0, #0
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	1c18      	adds	r0, r3, #0
 8001df4:	f7fe fc44 	bl	8000680 <__aeabi_fmul>
 8001df8:	1c03      	adds	r3, r0, #0
 8001dfa:	1c1a      	adds	r2, r3, #0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	1c10      	adds	r0, r2, #0
 8001e02:	f7fe faa9 	bl	8000358 <__aeabi_f2uiz>
 8001e06:	0003      	movs	r3, r0
 8001e08:	6423      	str	r3, [r4, #64]	; 0x40
 8001e0a:	e000      	b.n	8001e0e <pwm_set_duty_cicle+0xe2>
		return;
 8001e0c:	46c0      	nop			; (mov r8, r8)
}
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b005      	add	sp, #20
 8001e12:	bd90      	pop	{r4, r7, pc}

08001e14 <pwm_set_period>:

void pwm_set_period(TIM_HandleTypeDef *htim, float period_ms)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	//__HAL_TIM_SetAutoreload(htim, TIM_MS_TO_TICKS(htim, period_ms)); // set the period
	__HAL_TIM_SetAutoreload(htim, period_ms); // non perdiod_ms ma tick
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681c      	ldr	r4, [r3, #0]
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	f7fe fa98 	bl	8000358 <__aeabi_f2uiz>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7fe fa93 	bl	8000358 <__aeabi_f2uiz>
 8001e32:	0002      	movs	r2, r0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60da      	str	r2, [r3, #12]
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b003      	add	sp, #12
 8001e3e:	bd90      	pop	{r4, r7, pc}

08001e40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart2, serial_cmd_handler.last_char_received[0], 1, 100);
	serial_cmd_handler.cmd_received[serial_cmd_handler.char_index] = serial_cmd_handler.last_char_received[0];
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e4a:	7c5b      	ldrb	r3, [r3, #17]
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e50:	7c1a      	ldrb	r2, [r3, #16]
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	705a      	strb	r2, [r3, #1]
	serial_cmd_handler.char_index++;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e5a:	7c5b      	ldrb	r3, [r3, #17]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e62:	745a      	strb	r2, [r3, #17]
	if (serial_cmd_handler.last_char_received[0] == '\n' || serial_cmd_handler.last_char_received[0] == '\r')
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e66:	7c1b      	ldrb	r3, [r3, #16]
 8001e68:	2b0a      	cmp	r3, #10
 8001e6a:	d003      	beq.n	8001e74 <HAL_UART_RxCpltCallback+0x34>
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e6e:	7c1b      	ldrb	r3, [r3, #16]
 8001e70:	2b0d      	cmp	r3, #13
 8001e72:	d105      	bne.n	8001e80 <HAL_UART_RxCpltCallback+0x40>
	{
		serial_cmd_handler.is_cmd_sent = true;
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
		serial_cmd_handler.char_index = 0;
 8001e7a:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_UART_RxCpltCallback+0x48>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	745a      	strb	r2, [r3, #17]
		cmd_sent = SET;
		i = 0;
	}
	rxBuffer[i] = rxChr[0];
	i++;*/
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000164 	.word	0x20000164

08001e8c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <__io_putchar+0x20>)
 8001e96:	1d39      	adds	r1, r7, #4
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <__io_putchar+0x24>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f002 faf8 	bl	8004490 <HAL_UART_Transmit>

	return ch;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	0000ffff 	.word	0x0000ffff
 8001eb0:	200000dc 	.word	0x200000dc

08001eb4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ebc:	e7fe      	b.n	8001ebc <Error_Handler+0x8>
	...

08001ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_MspInit+0x24>)
 8001ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MspInit+0x24>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_MspInit+0x24>)
 8001ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_MspInit+0x24>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0549      	lsls	r1, r1, #21
 8001eda:	430a      	orrs	r2, r1
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	05db      	lsls	r3, r3, #23
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10d      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_TIM_Base_MspInit+0x38>)
 8001efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_TIM_Base_MspInit+0x38>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	200f      	movs	r0, #15
 8001f0e:	f000 faef 	bl	80024f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f000 fb01 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	240c      	movs	r4, #12
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	0018      	movs	r0, r3
 8001f32:	2314      	movs	r3, #20
 8001f34:	001a      	movs	r2, r3
 8001f36:	2100      	movs	r1, #0
 8001f38:	f003 fe22 	bl	8005b80 <memset>
  if(htim->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	05db      	lsls	r3, r3, #23
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d122      	bne.n	8001f8e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_TIM_MspPostInit+0x74>)
 8001f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_TIM_MspPostInit+0x74>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_TIM_MspPostInit+0x74>)
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IN1_Pin;
 8001f60:	0021      	movs	r1, r4
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8001f80:	187a      	adds	r2, r7, r1
 8001f82:	23a0      	movs	r3, #160	; 0xa0
 8001f84:	05db      	lsls	r3, r3, #23
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 fb6b 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b009      	add	sp, #36	; 0x24
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	240c      	movs	r4, #12
 8001fa6:	193b      	adds	r3, r7, r4
 8001fa8:	0018      	movs	r0, r3
 8001faa:	2314      	movs	r3, #20
 8001fac:	001a      	movs	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	f003 fde6 	bl	8005b80 <memset>
  if(huart->Instance==USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d131      	bne.n	8002022 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_UART_MspInit+0x94>)
 8001fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_UART_MspInit+0x94>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0289      	lsls	r1, r1, #10
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_UART_MspInit+0x94>)
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_UART_MspInit+0x94>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_UART_MspInit+0x94>)
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe4:	0021      	movs	r1, r4
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	220c      	movs	r2, #12
 8001fea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2202      	movs	r2, #2
 8001ff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	2204      	movs	r2, #4
 8002002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	187a      	adds	r2, r7, r1
 8002006:	23a0      	movs	r3, #160	; 0xa0
 8002008:	05db      	lsls	r3, r3, #23
 800200a:	0011      	movs	r1, r2
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fb29 	bl	8002664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	201c      	movs	r0, #28
 8002018:	f000 fa6a 	bl	80024f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800201c:	201c      	movs	r0, #28
 800201e:	f000 fa7c 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b009      	add	sp, #36	; 0x24
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40004400 	.word	0x40004400
 8002030:	40021000 	.word	0x40021000

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002058:	f000 f95e 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <TIM2_IRQHandler+0x14>)
 800206a:	0018      	movs	r0, r3
 800206c:	f001 fca4 	bl	80039b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	2000009c 	.word	0x2000009c

0800207c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <USART2_IRQHandler+0x14>)
 8002082:	0018      	movs	r0, r3
 8002084:	f002 fb02 	bl	800468c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	200000dc 	.word	0x200000dc

08002094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f003 fd3f 	bl	8005b2c <__errno>
 80020ae:	0003      	movs	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	425b      	negs	r3, r3
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	2301      	movs	r3, #1
 80020ca:	425a      	negs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ffe5 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d6:	e7fe      	b.n	80020d6 <_exit+0x16>

080020d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e00a      	b.n	8002100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ea:	e000      	b.n	80020ee <_read+0x16>
 80020ec:	bf00      	nop
 80020ee:	0001      	movs	r1, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	60ba      	str	r2, [r7, #8]
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf0      	blt.n	80020ea <_read+0x12>
  }

  return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b006      	add	sp, #24
 8002110:	bd80      	pop	{r7, pc}

08002112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e009      	b.n	8002138 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	0018      	movs	r0, r3
 800212e:	f7ff fead 	bl	8001e8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf1      	blt.n	8002124 <_write+0x12>
  }
  return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b006      	add	sp, #24
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:

int _close(int file)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002152:	2301      	movs	r3, #1
 8002154:	425b      	negs	r3, r3
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}

0800215e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	0192      	lsls	r2, r2, #6
 800216e:	605a      	str	r2, [r3, #4]
  return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	18d3      	adds	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f003 fcaa 	bl	8005b2c <__errno>
 80021d8:	0003      	movs	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	2301      	movs	r3, #1
 80021e0:	425b      	negs	r3, r3
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	18d2      	adds	r2, r2, r3
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <_sbrk+0x64>)
 80021f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b006      	add	sp, #24
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20002000 	.word	0x20002000
 8002204:	00000400 	.word	0x00000400
 8002208:	2000017c 	.word	0x2000017c
 800220c:	20000198 	.word	0x20000198

08002210 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800221e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002220:	f7ff fff6 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490d      	ldr	r1, [pc, #52]	; (800225c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224a:	f003 fc75 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224e:	f7ff fb43 	bl	80018d8 <main>

08002252 <LoopForever>:

LoopForever:
    b LoopForever
 8002252:	e7fe      	b.n	8002252 <LoopForever>
   ldr   r0, =_estack
 8002254:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002260:	08007498 	.word	0x08007498
  ldr r2, =_sbss
 8002264:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002268:	20000194 	.word	0x20000194

0800226c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_COMP_IRQHandler>
	...

08002270 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x3c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Init+0x3c>)
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002288:	2003      	movs	r0, #3
 800228a:	f000 f811 	bl	80022b0 <HAL_InitTick>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d003      	beq.n	800229a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e001      	b.n	800229e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800229a:	f7ff fe11 	bl	8001ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_InitTick+0x5c>)
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_InitTick+0x60>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	0019      	movs	r1, r3
 80022c2:	23fa      	movs	r3, #250	; 0xfa
 80022c4:	0098      	lsls	r0, r3, #2
 80022c6:	f7fd ff33 	bl	8000130 <__udivsi3>
 80022ca:	0003      	movs	r3, r0
 80022cc:	0019      	movs	r1, r3
 80022ce:	0020      	movs	r0, r4
 80022d0:	f7fd ff2e 	bl	8000130 <__udivsi3>
 80022d4:	0003      	movs	r3, r0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f92f 	bl	800253a <HAL_SYSTICK_Config>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e00f      	b.n	8002304 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d80b      	bhi.n	8002302 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	2301      	movs	r3, #1
 80022ee:	425b      	negs	r3, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f8fc 	bl	80024f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_InitTick+0x64>)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b003      	add	sp, #12
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	20000010 	.word	0x20000010
 8002310:	20000018 	.word	0x20000018
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_IncTick+0x1c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	001a      	movs	r2, r3
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_IncTick+0x20>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	18d2      	adds	r2, r2, r3
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_IncTick+0x20>)
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000018 	.word	0x20000018
 8002338:	20000180 	.word	0x20000180

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_GetTick+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	20000180 	.word	0x20000180

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fff0 	bl	800233c <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	001a      	movs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	189b      	adds	r3, r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	f7ff ffe0 	bl	800233c <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000018 	.word	0x20000018

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	0002      	movs	r2, r0
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b7f      	cmp	r3, #127	; 0x7f
 80023aa:	d809      	bhi.n	80023c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	001a      	movs	r2, r3
 80023b2:	231f      	movs	r3, #31
 80023b4:	401a      	ands	r2, r3
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_EnableIRQ+0x30>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	4091      	lsls	r1, r2
 80023bc:	000a      	movs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
  }
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	0002      	movs	r2, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b7f      	cmp	r3, #127	; 0x7f
 80023e0:	d828      	bhi.n	8002434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e2:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <__NVIC_SetPriority+0xd4>)
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	33c0      	adds	r3, #192	; 0xc0
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	589b      	ldr	r3, [r3, r2]
 80023f2:	1dfa      	adds	r2, r7, #7
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	0011      	movs	r1, r2
 80023f8:	2203      	movs	r2, #3
 80023fa:	400a      	ands	r2, r1
 80023fc:	00d2      	lsls	r2, r2, #3
 80023fe:	21ff      	movs	r1, #255	; 0xff
 8002400:	4091      	lsls	r1, r2
 8002402:	000a      	movs	r2, r1
 8002404:	43d2      	mvns	r2, r2
 8002406:	401a      	ands	r2, r3
 8002408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	401a      	ands	r2, r3
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	2303      	movs	r3, #3
 800241a:	4003      	ands	r3, r0
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	481f      	ldr	r0, [pc, #124]	; (80024a0 <__NVIC_SetPriority+0xd4>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b25b      	sxtb	r3, r3
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	430a      	orrs	r2, r1
 800242c:	33c0      	adds	r3, #192	; 0xc0
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002432:	e031      	b.n	8002498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <__NVIC_SetPriority+0xd8>)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0019      	movs	r1, r3
 800243c:	230f      	movs	r3, #15
 800243e:	400b      	ands	r3, r1
 8002440:	3b08      	subs	r3, #8
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3306      	adds	r3, #6
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	18d3      	adds	r3, r2, r3
 800244a:	3304      	adds	r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1dfa      	adds	r2, r7, #7
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	0011      	movs	r1, r2
 8002454:	2203      	movs	r2, #3
 8002456:	400a      	ands	r2, r1
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	21ff      	movs	r1, #255	; 0xff
 800245c:	4091      	lsls	r1, r2
 800245e:	000a      	movs	r2, r1
 8002460:	43d2      	mvns	r2, r2
 8002462:	401a      	ands	r2, r3
 8002464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	401a      	ands	r2, r3
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0018      	movs	r0, r3
 8002474:	2303      	movs	r3, #3
 8002476:	4003      	ands	r3, r0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <__NVIC_SetPriority+0xd8>)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	001c      	movs	r4, r3
 8002484:	230f      	movs	r3, #15
 8002486:	4023      	ands	r3, r4
 8002488:	3b08      	subs	r3, #8
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	430a      	orrs	r2, r1
 800248e:	3306      	adds	r3, #6
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	18c3      	adds	r3, r0, r3
 8002494:	3304      	adds	r3, #4
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b003      	add	sp, #12
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1e5a      	subs	r2, r3, #1
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	045b      	lsls	r3, r3, #17
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d301      	bcc.n	80024c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024bc:	2301      	movs	r3, #1
 80024be:	e010      	b.n	80024e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <SysTick_Config+0x44>)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	3a01      	subs	r2, #1
 80024c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c8:	2301      	movs	r3, #1
 80024ca:	425b      	negs	r3, r3
 80024cc:	2103      	movs	r1, #3
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff ff7c 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x44>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x44>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	210f      	movs	r1, #15
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	1c02      	adds	r2, r0, #0
 8002500:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	187b      	adds	r3, r7, r1
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b25b      	sxtb	r3, r3
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	0002      	movs	r2, r0
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b25b      	sxtb	r3, r3
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff ff33 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ffaf 	bl	80024a8 <SysTick_Config>
 800254a:	0003      	movs	r3, r0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	230f      	movs	r3, #15
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2225      	movs	r2, #37	; 0x25
 8002568:	5c9b      	ldrb	r3, [r3, r2]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d008      	beq.n	8002582 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2204      	movs	r2, #4
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2224      	movs	r2, #36	; 0x24
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e024      	b.n	80025cc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	210e      	movs	r1, #14
 800258e:	438a      	bics	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	438a      	bics	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	221c      	movs	r2, #28
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2101      	movs	r1, #1
 80025b0:	4091      	lsls	r1, r2
 80025b2:	000a      	movs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2225      	movs	r2, #37	; 0x25
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2224      	movs	r2, #36	; 0x24
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]

    return status;
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	210f      	movs	r1, #15
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2225      	movs	r2, #37	; 0x25
 80025e8:	5c9b      	ldrb	r3, [r3, r2]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d006      	beq.n	80025fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e02a      	b.n	8002654 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	210e      	movs	r1, #14
 800260a:	438a      	bics	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	438a      	bics	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	221c      	movs	r2, #28
 8002624:	401a      	ands	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2101      	movs	r1, #1
 800262c:	4091      	lsls	r1, r2
 800262e:	000a      	movs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2225      	movs	r2, #37	; 0x25
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2224      	movs	r2, #36	; 0x24
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	0010      	movs	r0, r2
 8002652:	4798      	blx	r3
    }
  }
  return status;
 8002654:	230f      	movs	r3, #15
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800267a:	e149      	b.n	8002910 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4091      	lsls	r1, r2
 8002686:	000a      	movs	r2, r1
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d100      	bne.n	8002694 <HAL_GPIO_Init+0x30>
 8002692:	e13a      	b.n	800290a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2203      	movs	r2, #3
 800269a:	4013      	ands	r3, r2
 800269c:	2b01      	cmp	r3, #1
 800269e:	d005      	beq.n	80026ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d130      	bne.n	800270e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	409a      	lsls	r2, r3
 80026ba:	0013      	movs	r3, r2
 80026bc:	43da      	mvns	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	409a      	lsls	r2, r3
 80026ce:	0013      	movs	r3, r2
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e2:	2201      	movs	r2, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	43da      	mvns	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	2201      	movs	r2, #1
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
 8002700:	0013      	movs	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2203      	movs	r2, #3
 8002714:	4013      	ands	r3, r2
 8002716:	2b03      	cmp	r3, #3
 8002718:	d017      	beq.n	800274a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	43da      	mvns	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	409a      	lsls	r2, r3
 800273c:	0013      	movs	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2203      	movs	r2, #3
 8002750:	4013      	ands	r3, r2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d123      	bne.n	800279e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	58d3      	ldr	r3, [r2, r3]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2207      	movs	r2, #7
 8002768:	4013      	ands	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2107      	movs	r1, #7
 8002782:	400b      	ands	r3, r1
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	409a      	lsls	r2, r3
 8002788:	0013      	movs	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	6939      	ldr	r1, [r7, #16]
 800279c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	409a      	lsls	r2, r3
 80027ac:	0013      	movs	r3, r2
 80027ae:	43da      	mvns	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	401a      	ands	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	409a      	lsls	r2, r3
 80027c4:	0013      	movs	r3, r2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	4013      	ands	r3, r2
 80027dc:	d100      	bne.n	80027e0 <HAL_GPIO_Init+0x17c>
 80027de:	e094      	b.n	800290a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e0:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x2c4>)
 80027e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_GPIO_Init+0x2c4>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	430a      	orrs	r2, r1
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ec:	4a4f      	ldr	r2, [pc, #316]	; (800292c <HAL_GPIO_Init+0x2c8>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	589b      	ldr	r3, [r3, r2]
 80027f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2203      	movs	r2, #3
 80027fe:	4013      	ands	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	409a      	lsls	r2, r3
 8002806:	0013      	movs	r3, r2
 8002808:	43da      	mvns	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	23a0      	movs	r3, #160	; 0xa0
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	429a      	cmp	r2, r3
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x1de>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a44      	ldr	r2, [pc, #272]	; (8002930 <HAL_GPIO_Init+0x2cc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x1da>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a43      	ldr	r2, [pc, #268]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x1d6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a42      	ldr	r2, [pc, #264]	; (8002938 <HAL_GPIO_Init+0x2d4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x1d2>
 8002832:	2305      	movs	r3, #5
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x1e0>
 8002836:	2306      	movs	r3, #6
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x1e0>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x1e0>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x1e0>
 8002842:	2300      	movs	r3, #0
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	2103      	movs	r1, #3
 8002848:	400a      	ands	r2, r1
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <HAL_GPIO_Init+0x2c8>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_GPIO_Init+0x2d8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43da      	mvns	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	035b      	lsls	r3, r3, #13
 800287a:	4013      	ands	r3, r2
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_GPIO_Init+0x2d8>)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_GPIO_Init+0x2d8>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43da      	mvns	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	039b      	lsls	r3, r3, #14
 80028a4:	4013      	ands	r3, r2
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_GPIO_Init+0x2d8>)
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_GPIO_Init+0x2d8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	4013      	ands	r3, r2
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_GPIO_Init+0x2d8>)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_GPIO_Init+0x2d8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	4013      	ands	r3, r2
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_GPIO_Init+0x2d8>)
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	40da      	lsrs	r2, r3
 8002918:	1e13      	subs	r3, r2, #0
 800291a:	d000      	beq.n	800291e <HAL_GPIO_Init+0x2ba>
 800291c:	e6ae      	b.n	800267c <HAL_GPIO_Init+0x18>
  }
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b006      	add	sp, #24
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	40010000 	.word	0x40010000
 8002930:	50000400 	.word	0x50000400
 8002934:	50000800 	.word	0x50000800
 8002938:	50001c00 	.word	0x50001c00
 800293c:	40010400 	.word	0x40010400

08002940 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	0008      	movs	r0, r1
 800294a:	0011      	movs	r1, r2
 800294c:	1cbb      	adds	r3, r7, #2
 800294e:	1c02      	adds	r2, r0, #0
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	1c7b      	adds	r3, r7, #1
 8002954:	1c0a      	adds	r2, r1, #0
 8002956:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002958:	1c7b      	adds	r3, r7, #1
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002960:	1cbb      	adds	r3, r7, #2
 8002962:	881a      	ldrh	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800296a:	1cbb      	adds	r3, r7, #2
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b5b0      	push	{r4, r5, r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f000 fb6c 	bl	8003068 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002990:	4bc8      	ldr	r3, [pc, #800]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	220c      	movs	r2, #12
 8002996:	4013      	ands	r3, r2
 8002998:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299a:	4bc6      	ldr	r3, [pc, #792]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	025b      	lsls	r3, r3, #9
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	d100      	bne.n	80029b2 <HAL_RCC_OscConfig+0x36>
 80029b0:	e07d      	b.n	8002aae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d007      	beq.n	80029c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x68>
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	4bba      	ldr	r3, [pc, #744]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	4013      	ands	r3, r2
 80029d2:	d100      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5a>
 80029d4:	e06a      	b.n	8002aac <HAL_RCC_OscConfig+0x130>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d166      	bne.n	8002aac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f000 fb42 	bl	8003068 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	025b      	lsls	r3, r3, #9
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x84>
 80029f0:	4bb0      	ldr	r3, [pc, #704]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4baf      	ldr	r3, [pc, #700]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	0249      	lsls	r1, r1, #9
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e027      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	23a0      	movs	r3, #160	; 0xa0
 8002a06:	02db      	lsls	r3, r3, #11
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d10e      	bne.n	8002a2a <HAL_RCC_OscConfig+0xae>
 8002a0c:	4ba9      	ldr	r3, [pc, #676]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4ba8      	ldr	r3, [pc, #672]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	02c9      	lsls	r1, r1, #11
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	4ba6      	ldr	r3, [pc, #664]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4ba5      	ldr	r3, [pc, #660]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	0249      	lsls	r1, r1, #9
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e012      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a2a:	4ba2      	ldr	r3, [pc, #648]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4ba1      	ldr	r3, [pc, #644]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a30:	49a1      	ldr	r1, [pc, #644]	; (8002cb8 <HAL_RCC_OscConfig+0x33c>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b9f      	ldr	r3, [pc, #636]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	025b      	lsls	r3, r3, #9
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4b9b      	ldr	r3, [pc, #620]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b9a      	ldr	r3, [pc, #616]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a4a:	499c      	ldr	r1, [pc, #624]	; (8002cbc <HAL_RCC_OscConfig+0x340>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fc70 	bl	800233c <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a62:	f7ff fc6b 	bl	800233c <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e2f9      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a74:	4b8f      	ldr	r3, [pc, #572]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0xe6>
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7ff fc5b 	bl	800233c <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff fc56 	bl	800233c <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e2e4      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a9e:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x110>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d100      	bne.n	8002aba <HAL_RCC_OscConfig+0x13e>
 8002ab8:	e099      	b.n	8002bee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ac8:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002ace:	2120      	movs	r1, #32
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	4393      	bics	r3, r2
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d005      	beq.n	8002aee <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d13e      	bne.n	8002b66 <HAL_RCC_OscConfig+0x1ea>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d13b      	bne.n	8002b66 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002aee:	4b71      	ldr	r3, [pc, #452]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2204      	movs	r2, #4
 8002af4:	4013      	ands	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_RCC_OscConfig+0x186>
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e2b2      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x344>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	021a      	lsls	r2, r3, #8
 8002b12:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b18:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2209      	movs	r2, #9
 8002b1e:	4393      	bics	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 fbeb 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8002b2e:	0001      	movs	r1, r0
 8002b30:	4b60      	ldr	r3, [pc, #384]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	220f      	movs	r2, #15
 8002b38:	4013      	ands	r3, r2
 8002b3a:	4a62      	ldr	r2, [pc, #392]	; (8002cc4 <HAL_RCC_OscConfig+0x348>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	000a      	movs	r2, r1
 8002b40:	40da      	lsrs	r2, r3
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <HAL_RCC_OscConfig+0x34c>)
 8002b44:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b46:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x350>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2513      	movs	r5, #19
 8002b4c:	197c      	adds	r4, r7, r5
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff fbae 	bl	80022b0 <HAL_InitTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b58:	197b      	adds	r3, r7, r5
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d046      	beq.n	8002bee <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002b60:	197b      	adds	r3, r7, r5
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	e280      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d027      	beq.n	8002bbc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b6c:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2209      	movs	r2, #9
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7ff fbdd 	bl	800233c <HAL_GetTick>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7ff fbd8 	bl	800233c <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e266      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b9a:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d0f1      	beq.n	8002b88 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a45      	ldr	r2, [pc, #276]	; (8002cc0 <HAL_RCC_OscConfig+0x344>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e018      	b.n	8002bee <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7ff fbb8 	bl	800233c <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7ff fbb3 	bl	800233c <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e241      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2204      	movs	r2, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d1f1      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_RCC_OscConfig+0x27e>
 8002bf8:	e0a1      	b.n	8002d3e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d140      	bne.n	8002c82 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_OscConfig+0x29c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e227      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c18:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a2c      	ldr	r2, [pc, #176]	; (8002cd0 <HAL_RCC_OscConfig+0x354>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	0a19      	lsrs	r1, r3, #8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	061a      	lsls	r2, r3, #24
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	0b5b      	lsrs	r3, r3, #13
 8002c46:	3301      	adds	r3, #1
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0212      	lsls	r2, r2, #8
 8002c4c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	210f      	movs	r1, #15
 8002c56:	400b      	ands	r3, r1
 8002c58:	491a      	ldr	r1, [pc, #104]	; (8002cc4 <HAL_RCC_OscConfig+0x348>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCC_OscConfig+0x34c>)
 8002c60:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_RCC_OscConfig+0x350>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2513      	movs	r5, #19
 8002c68:	197c      	adds	r4, r7, r5
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff fb20 	bl	80022b0 <HAL_InitTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c74:	197b      	adds	r3, r7, r5
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d060      	beq.n	8002d3e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002c7c:	197b      	adds	r3, r7, r5
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	e1f2      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03f      	beq.n	8002d0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_OscConfig+0x338>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	0049      	lsls	r1, r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fb50 	bl	800233c <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ca0:	e018      	b.n	8002cd4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca2:	f7ff fb4b 	bl	800233c <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d911      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1d9      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	fffeffff 	.word	0xfffeffff
 8002cbc:	fffbffff 	.word	0xfffbffff
 8002cc0:	ffffe0ff 	.word	0xffffe0ff
 8002cc4:	080071d0 	.word	0x080071d0
 8002cc8:	20000010 	.word	0x20000010
 8002ccc:	20000014 	.word	0x20000014
 8002cd0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cd4:	4bc9      	ldr	r3, [pc, #804]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d0e0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce0:	4bc6      	ldr	r3, [pc, #792]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4ac6      	ldr	r2, [pc, #792]	; (8003000 <HAL_RCC_OscConfig+0x684>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	4bc3      	ldr	r3, [pc, #780]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf4:	4bc1      	ldr	r3, [pc, #772]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	0a19      	lsrs	r1, r3, #8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	061a      	lsls	r2, r3, #24
 8002d02:	4bbe      	ldr	r3, [pc, #760]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	e019      	b.n	8002d3e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d0a:	4bbc      	ldr	r3, [pc, #752]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4bbb      	ldr	r3, [pc, #748]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d10:	49bc      	ldr	r1, [pc, #752]	; (8003004 <HAL_RCC_OscConfig+0x688>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7ff fb11 	bl	800233c <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d20:	f7ff fb0c 	bl	800233c <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e19a      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d32:	4bb2      	ldr	r3, [pc, #712]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	4013      	ands	r3, r2
 8002d46:	d036      	beq.n	8002db6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d50:	4baa      	ldr	r3, [pc, #680]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d54:	4ba9      	ldr	r3, [pc, #676]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7ff faee 	bl	800233c <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d66:	f7ff fae9 	bl	800233c <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e177      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d78:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d0f1      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3ea>
 8002d82:	e018      	b.n	8002db6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b9d      	ldr	r3, [pc, #628]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d88:	4b9c      	ldr	r3, [pc, #624]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7ff fad4 	bl	800233c <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7ff facf 	bl	800233c <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e15d      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dac:	4b93      	ldr	r3, [pc, #588]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db0:	2202      	movs	r2, #2
 8002db2:	4013      	ands	r3, r2
 8002db4:	d1f1      	bne.n	8002d9a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x446>
 8002dc0:	e0ae      	b.n	8002f20 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2023      	movs	r0, #35	; 0x23
 8002dc4:	183b      	adds	r3, r7, r0
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	055b      	lsls	r3, r3, #21
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	0549      	lsls	r1, r1, #21
 8002de0:	430a      	orrs	r2, r1
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002de4:	183b      	adds	r3, r7, r0
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b87      	ldr	r3, [pc, #540]	; (8003008 <HAL_RCC_OscConfig+0x68c>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	d11a      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b84      	ldr	r3, [pc, #528]	; (8003008 <HAL_RCC_OscConfig+0x68c>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b83      	ldr	r3, [pc, #524]	; (8003008 <HAL_RCC_OscConfig+0x68c>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0049      	lsls	r1, r1, #1
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e04:	f7ff fa9a 	bl	800233c <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7ff fa95 	bl	800233c <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e123      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <HAL_RCC_OscConfig+0x68c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4cc>
 8002e38:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	651a      	str	r2, [r3, #80]	; 0x50
 8002e46:	e031      	b.n	8002eac <HAL_RCC_OscConfig+0x530>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCC_OscConfig+0x4ee>
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e54:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e56:	496b      	ldr	r1, [pc, #428]	; (8003004 <HAL_RCC_OscConfig+0x688>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e5c:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e60:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e62:	496a      	ldr	r1, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x690>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	651a      	str	r2, [r3, #80]	; 0x50
 8002e68:	e020      	b.n	8002eac <HAL_RCC_OscConfig+0x530>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	23a0      	movs	r3, #160	; 0xa0
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10e      	bne.n	8002e94 <HAL_RCC_OscConfig+0x518>
 8002e76:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e7a:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	00c9      	lsls	r1, r1, #3
 8002e80:	430a      	orrs	r2, r1
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50
 8002e84:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e88:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	0049      	lsls	r1, r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	651a      	str	r2, [r3, #80]	; 0x50
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x530>
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e98:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002e9a:	495a      	ldr	r1, [pc, #360]	; (8003004 <HAL_RCC_OscConfig+0x688>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8002ea0:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002ea6:	4959      	ldr	r1, [pc, #356]	; (800300c <HAL_RCC_OscConfig+0x690>)
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7ff fa42 	bl	800233c <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ebc:	e009      	b.n	8002ed2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7ff fa3d 	bl	800233c <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	4a51      	ldr	r2, [pc, #324]	; (8003010 <HAL_RCC_OscConfig+0x694>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0ca      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0ef      	beq.n	8002ebe <HAL_RCC_OscConfig+0x542>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7ff fa2c 	bl	800233c <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ee8:	e009      	b.n	8002efe <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7ff fa27 	bl	800233c <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	4a46      	ldr	r2, [pc, #280]	; (8003010 <HAL_RCC_OscConfig+0x694>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0b4      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d1ef      	bne.n	8002eea <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f0a:	2323      	movs	r3, #35	; 0x23
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f18:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f1a:	493e      	ldr	r1, [pc, #248]	; (8003014 <HAL_RCC_OscConfig+0x698>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d100      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5ae>
 8002f28:	e09d      	b.n	8003066 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d100      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5b6>
 8002f30:	e076      	b.n	8003020 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d145      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <HAL_RCC_OscConfig+0x69c>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7ff f9f9 	bl	800233c <HAL_GetTick>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7ff f9f4 	bl	800233c <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e082      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	049b      	lsls	r3, r3, #18
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4a2a      	ldr	r2, [pc, #168]	; (800301c <HAL_RCC_OscConfig+0x6a0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	431a      	orrs	r2, r3
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	0449      	lsls	r1, r1, #17
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7ff f9ce 	bl	800233c <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7ff f9c9 	bl	800233c <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e057      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	049b      	lsls	r3, r3, #18
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x62a>
 8002fc4:	e04f      	b.n	8003066 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002fcc:	4912      	ldr	r1, [pc, #72]	; (8003018 <HAL_RCC_OscConfig+0x69c>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7ff f9b3 	bl	800233c <HAL_GetTick>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7ff f9ae 	bl	800233c <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03c      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fee:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_OscConfig+0x680>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	049b      	lsls	r3, r3, #18
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x660>
 8002ffa:	e034      	b.n	8003066 <HAL_RCC_OscConfig+0x6ea>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	ffff1fff 	.word	0xffff1fff
 8003004:	fffffeff 	.word	0xfffffeff
 8003008:	40007000 	.word	0x40007000
 800300c:	fffffbff 	.word	0xfffffbff
 8003010:	00001388 	.word	0x00001388
 8003014:	efffffff 	.word	0xefffffff
 8003018:	feffffff 	.word	0xfeffffff
 800301c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_OscConfig+0x6f4>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	025b      	lsls	r3, r3, #9
 8003038:	401a      	ands	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	429a      	cmp	r2, r3
 8003040:	d10f      	bne.n	8003062 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	23f0      	movs	r3, #240	; 0xf0
 8003046:	039b      	lsls	r3, r3, #14
 8003048:	401a      	ands	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d107      	bne.n	8003062 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	23c0      	movs	r3, #192	; 0xc0
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b00a      	add	sp, #40	; 0x28
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b5b0      	push	{r4, r5, r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e128      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b96      	ldr	r3, [pc, #600]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	4013      	ands	r3, r2
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d91e      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b93      	ldr	r3, [pc, #588]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4393      	bics	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	4b90      	ldr	r3, [pc, #576]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030a8:	f7ff f948 	bl	800233c <HAL_GetTick>
 80030ac:	0003      	movs	r3, r0
 80030ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b0:	e009      	b.n	80030c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b2:	f7ff f943 	bl	800233c <HAL_GetTick>
 80030b6:	0002      	movs	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	4a8a      	ldr	r2, [pc, #552]	; (80032e8 <HAL_RCC_ClockConfig+0x274>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e109      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b87      	ldr	r3, [pc, #540]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1ee      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030de:	4b83      	ldr	r3, [pc, #524]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	22f0      	movs	r2, #240	; 0xf0
 80030e4:	4393      	bics	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d100      	bne.n	80030fe <HAL_RCC_ClockConfig+0x8a>
 80030fc:	e089      	b.n	8003212 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003106:	4b79      	ldr	r3, [pc, #484]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	029b      	lsls	r3, r3, #10
 800310e:	4013      	ands	r3, r2
 8003110:	d120      	bne.n	8003154 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0e1      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	049b      	lsls	r3, r3, #18
 8003126:	4013      	ands	r3, r2
 8003128:	d114      	bne.n	8003154 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0d5      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003136:	4b6d      	ldr	r3, [pc, #436]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	4013      	ands	r3, r2
 800313e:	d109      	bne.n	8003154 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ca      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003144:	4b69      	ldr	r3, [pc, #420]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4013      	ands	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0c2      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003154:	4b65      	ldr	r3, [pc, #404]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2203      	movs	r2, #3
 800315a:	4393      	bics	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4b62      	ldr	r3, [pc, #392]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7ff f8e8 	bl	800233c <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d111      	bne.n	800319c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003178:	e009      	b.n	800318e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317a:	f7ff f8df 	bl	800233c <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x274>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0a5      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800318e:	4b57      	ldr	r3, [pc, #348]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	220c      	movs	r2, #12
 8003194:	4013      	ands	r3, r2
 8003196:	2b08      	cmp	r3, #8
 8003198:	d1ef      	bne.n	800317a <HAL_RCC_ClockConfig+0x106>
 800319a:	e03a      	b.n	8003212 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d111      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a4:	e009      	b.n	80031ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a6:	f7ff f8c9 	bl	800233c <HAL_GetTick>
 80031aa:	0002      	movs	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	4a4d      	ldr	r2, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x274>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e08f      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	220c      	movs	r2, #12
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d1ef      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x132>
 80031c6:	e024      	b.n	8003212 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d11b      	bne.n	8003208 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d2:	f7ff f8b3 	bl	800233c <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	4a42      	ldr	r2, [pc, #264]	; (80032e8 <HAL_RCC_ClockConfig+0x274>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e079      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	220c      	movs	r2, #12
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d1ef      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x15e>
 80031f2:	e00e      	b.n	8003212 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7ff f8a2 	bl	800233c <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_RCC_ClockConfig+0x274>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e068      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003208:	4b38      	ldr	r3, [pc, #224]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	220c      	movs	r2, #12
 800320e:	4013      	ands	r3, r2
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2201      	movs	r2, #1
 8003218:	4013      	ands	r3, r2
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d21e      	bcs.n	800325e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4393      	bics	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003232:	f7ff f883 	bl	800233c <HAL_GetTick>
 8003236:	0003      	movs	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	e009      	b.n	8003250 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7ff f87e 	bl	800233c <HAL_GetTick>
 8003240:	0002      	movs	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <HAL_RCC_ClockConfig+0x274>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e044      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x27c>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2208      	movs	r2, #8
 8003282:	4013      	ands	r3, r2
 8003284:	d00a      	beq.n	800329c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <HAL_RCC_ClockConfig+0x280>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00da      	lsls	r2, r3, #3
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 8003298:	430a      	orrs	r2, r1
 800329a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329c:	f000 f832 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032a0:	0001      	movs	r1, r0
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_ClockConfig+0x278>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	220f      	movs	r2, #15
 80032aa:	4013      	ands	r3, r2
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <HAL_RCC_ClockConfig+0x284>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	000a      	movs	r2, r1
 80032b2:	40da      	lsrs	r2, r3
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_ClockConfig+0x288>)
 80032b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_RCC_ClockConfig+0x28c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	250b      	movs	r5, #11
 80032be:	197c      	adds	r4, r7, r5
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fe fff5 	bl	80022b0 <HAL_InitTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032ca:	197b      	adds	r3, r7, r5
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032d2:	197b      	adds	r3, r7, r5
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	e000      	b.n	80032da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bdb0      	pop	{r4, r5, r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40022000 	.word	0x40022000
 80032e8:	00001388 	.word	0x00001388
 80032ec:	40021000 	.word	0x40021000
 80032f0:	fffff8ff 	.word	0xfffff8ff
 80032f4:	ffffc7ff 	.word	0xffffc7ff
 80032f8:	080071d0 	.word	0x080071d0
 80032fc:	20000010 	.word	0x20000010
 8003300:	20000014 	.word	0x20000014

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800330a:	4b4c      	ldr	r3, [pc, #304]	; (800343c <HAL_RCC_GetSysClockFreq+0x138>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003312:	230c      	movs	r3, #12
 8003314:	4013      	ands	r3, r2
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d014      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 800331a:	d900      	bls.n	800331e <HAL_RCC_GetSysClockFreq+0x1a>
 800331c:	e07b      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x112>
 800331e:	2b04      	cmp	r3, #4
 8003320:	d002      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x24>
 8003322:	2b08      	cmp	r3, #8
 8003324:	d00b      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3a>
 8003326:	e076      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003328:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_GetSysClockFreq+0x138>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2210      	movs	r2, #16
 800332e:	4013      	ands	r3, r2
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003336:	e07c      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003338:	4b42      	ldr	r3, [pc, #264]	; (8003444 <HAL_RCC_GetSysClockFreq+0x140>)
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800333c:	e079      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_GetSysClockFreq+0x144>)
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003342:	e076      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	0c9a      	lsrs	r2, r3, #18
 8003348:	230f      	movs	r3, #15
 800334a:	401a      	ands	r2, r3
 800334c:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_RCC_GetSysClockFreq+0x148>)
 800334e:	5c9b      	ldrb	r3, [r3, r2]
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	0d9a      	lsrs	r2, r3, #22
 8003356:	2303      	movs	r3, #3
 8003358:	4013      	ands	r3, r2
 800335a:	3301      	adds	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCC_GetSysClockFreq+0x138>)
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	025b      	lsls	r3, r3, #9
 8003366:	4013      	ands	r3, r2
 8003368:	d01a      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	4a35      	ldr	r2, [pc, #212]	; (8003448 <HAL_RCC_GetSysClockFreq+0x144>)
 8003374:	2300      	movs	r3, #0
 8003376:	69b8      	ldr	r0, [r7, #24]
 8003378:	69f9      	ldr	r1, [r7, #28]
 800337a:	f7fc ffbf 	bl	80002fc <__aeabi_lmul>
 800337e:	0002      	movs	r2, r0
 8003380:	000b      	movs	r3, r1
 8003382:	0010      	movs	r0, r2
 8003384:	0019      	movs	r1, r3
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f7fc ff93 	bl	80002bc <__aeabi_uldivmod>
 8003396:	0002      	movs	r2, r0
 8003398:	000b      	movs	r3, r1
 800339a:	0013      	movs	r3, r2
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
 800339e:	e037      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_GetSysClockFreq+0x138>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2210      	movs	r2, #16
 80033a6:	4013      	ands	r3, r2
 80033a8:	d01a      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033b4:	2300      	movs	r3, #0
 80033b6:	68b8      	ldr	r0, [r7, #8]
 80033b8:	68f9      	ldr	r1, [r7, #12]
 80033ba:	f7fc ff9f 	bl	80002fc <__aeabi_lmul>
 80033be:	0002      	movs	r2, r0
 80033c0:	000b      	movs	r3, r1
 80033c2:	0010      	movs	r0, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f7fc ff73 	bl	80002bc <__aeabi_uldivmod>
 80033d6:	0002      	movs	r2, r0
 80033d8:	000b      	movs	r3, r1
 80033da:	0013      	movs	r3, r2
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	e017      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	0018      	movs	r0, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	0019      	movs	r1, r3
 80033e8:	4a16      	ldr	r2, [pc, #88]	; (8003444 <HAL_RCC_GetSysClockFreq+0x140>)
 80033ea:	2300      	movs	r3, #0
 80033ec:	f7fc ff86 	bl	80002fc <__aeabi_lmul>
 80033f0:	0002      	movs	r2, r0
 80033f2:	000b      	movs	r3, r1
 80033f4:	0010      	movs	r0, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	001c      	movs	r4, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	001d      	movs	r5, r3
 8003400:	0022      	movs	r2, r4
 8003402:	002b      	movs	r3, r5
 8003404:	f7fc ff5a 	bl	80002bc <__aeabi_uldivmod>
 8003408:	0002      	movs	r2, r0
 800340a:	000b      	movs	r3, r1
 800340c:	0013      	movs	r3, r2
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003414:	e00d      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_GetSysClockFreq+0x138>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	2207      	movs	r2, #7
 800341e:	4013      	ands	r3, r2
 8003420:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	3301      	adds	r3, #1
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	0212      	lsls	r2, r2, #8
 800342a:	409a      	lsls	r2, r3
 800342c:	0013      	movs	r3, r2
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003430:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b00e      	add	sp, #56	; 0x38
 800343a:	bdb0      	pop	{r4, r5, r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	003d0900 	.word	0x003d0900
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200
 800344c:	080071e8 	.word	0x080071e8

08003450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b02      	ldr	r3, [pc, #8]	; (8003460 <HAL_RCC_GetHCLKFreq+0x10>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	20000010 	.word	0x20000010

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003468:	f7ff fff2 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 800346c:	0001      	movs	r1, r0
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	2207      	movs	r2, #7
 8003476:	4013      	ands	r3, r2
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_RCC_GetPCLK1Freq+0x28>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	40d9      	lsrs	r1, r3
 800347e:	000b      	movs	r3, r1
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	40021000 	.word	0x40021000
 800348c:	080071e0 	.word	0x080071e0

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffdc 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003498:	0001      	movs	r1, r0
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	2207      	movs	r2, #7
 80034a2:	4013      	ands	r3, r2
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	40d9      	lsrs	r1, r3
 80034aa:	000b      	movs	r3, r1
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000
 80034b8:	080071e0 	.word	0x080071e0

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80034c4:	2017      	movs	r0, #23
 80034c6:	183b      	adds	r3, r7, r0
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2220      	movs	r2, #32
 80034d2:	4013      	ands	r3, r2
 80034d4:	d100      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80034d6:	e0c7      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	055b      	lsls	r3, r3, #21
 80034e0:	4013      	ands	r3, r2
 80034e2:	d109      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e8:	4b80      	ldr	r3, [pc, #512]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	0549      	lsls	r1, r1, #21
 80034ee:	430a      	orrs	r2, r1
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80034f2:	183b      	adds	r3, r7, r0
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b7d      	ldr	r3, [pc, #500]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d11a      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003504:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	0049      	lsls	r1, r1, #1
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003512:	f7fe ff13 	bl	800233c <HAL_GetTick>
 8003516:	0003      	movs	r3, r0
 8003518:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	e008      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351c:	f7fe ff0e 	bl	800233c <HAL_GetTick>
 8003520:	0002      	movs	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0d9      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b70      	ldr	r3, [pc, #448]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d0f0      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800353a:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	23c0      	movs	r3, #192	; 0xc0
 8003540:	039b      	lsls	r3, r3, #14
 8003542:	4013      	ands	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	23c0      	movs	r3, #192	; 0xc0
 800354c:	039b      	lsls	r3, r3, #14
 800354e:	4013      	ands	r3, r2
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	429a      	cmp	r2, r3
 8003554:	d013      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	23c0      	movs	r3, #192	; 0xc0
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	401a      	ands	r2, r3
 8003560:	23c0      	movs	r3, #192	; 0xc0
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	429a      	cmp	r2, r3
 8003566:	d10a      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003568:	4b60      	ldr	r3, [pc, #384]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	401a      	ands	r2, r3
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	429a      	cmp	r2, r3
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0b1      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800357e:	4b5b      	ldr	r3, [pc, #364]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003582:	23c0      	movs	r3, #192	; 0xc0
 8003584:	029b      	lsls	r3, r3, #10
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d03b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	23c0      	movs	r3, #192	; 0xc0
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	4013      	ands	r3, r2
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d033      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2220      	movs	r2, #32
 80035a6:	4013      	ands	r3, r2
 80035a8:	d02e      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	4a51      	ldr	r2, [pc, #324]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b8:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0309      	lsls	r1, r1, #12
 80035be:	430a      	orrs	r2, r1
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c2:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c6:	4b49      	ldr	r3, [pc, #292]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035c8:	494b      	ldr	r1, [pc, #300]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	d014      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fead 	bl	800233c <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035e6:	e009      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe fea8 	bl	800233c <HAL_GetTick>
 80035ec:	0002      	movs	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	4a42      	ldr	r2, [pc, #264]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e072      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4013      	ands	r3, r2
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d01f      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	23c0      	movs	r3, #192	; 0xc0
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	401a      	ands	r2, r3
 800361c:	23c0      	movs	r3, #192	; 0xc0
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	429a      	cmp	r2, r3
 8003622:	d10c      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003624:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800362a:	4013      	ands	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	23c0      	movs	r3, #192	; 0xc0
 8003634:	039b      	lsls	r3, r3, #14
 8003636:	401a      	ands	r2, r3
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003640:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	23c0      	movs	r3, #192	; 0xc0
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	401a      	ands	r2, r3
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800364e:	430a      	orrs	r2, r1
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003652:	2317      	movs	r3, #23
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800365e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003662:	4928      	ldr	r1, [pc, #160]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003664:	400a      	ands	r2, r1
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2202      	movs	r2, #2
 800366e:	4013      	ands	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	220c      	movs	r2, #12
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003682:	430a      	orrs	r2, r1
 8003684:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2204      	movs	r2, #4
 800368c:	4013      	ands	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036a0:	430a      	orrs	r2, r1
 80036a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2208      	movs	r2, #8
 80036aa:	4013      	ands	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	4013      	ands	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b006      	add	sp, #24
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
 80036f4:	fffcffff 	.word	0xfffcffff
 80036f8:	fff7ffff 	.word	0xfff7ffff
 80036fc:	00001388 	.word	0x00001388
 8003700:	ffcfffff 	.word	0xffcfffff
 8003704:	efffffff 	.word	0xefffffff
 8003708:	fffff3ff 	.word	0xfffff3ff
 800370c:	ffffcfff 	.word	0xffffcfff
 8003710:	fff3ffff 	.word	0xfff3ffff

08003714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e032      	b.n	800378c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2239      	movs	r2, #57	; 0x39
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2238      	movs	r2, #56	; 0x38
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7fe fbd3 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2239      	movs	r2, #57	; 0x39
 8003746:	2102      	movs	r1, #2
 8003748:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	0019      	movs	r1, r3
 8003754:	0010      	movs	r0, r2
 8003756:	f000 fbd9 	bl	8003f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223e      	movs	r2, #62	; 0x3e
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	223a      	movs	r2, #58	; 0x3a
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	223b      	movs	r2, #59	; 0x3b
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223c      	movs	r2, #60	; 0x3c
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	223d      	movs	r2, #61	; 0x3d
 800377e:	2101      	movs	r1, #1
 8003780:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2239      	movs	r2, #57	; 0x39
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e032      	b.n	800380c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2239      	movs	r2, #57	; 0x39
 80037aa:	5c9b      	ldrb	r3, [r3, r2]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2238      	movs	r2, #56	; 0x38
 80037b6:	2100      	movs	r1, #0
 80037b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 f829 	bl	8003814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2239      	movs	r2, #57	; 0x39
 80037c6:	2102      	movs	r1, #2
 80037c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	0019      	movs	r1, r3
 80037d4:	0010      	movs	r0, r2
 80037d6:	f000 fb99 	bl	8003f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223e      	movs	r2, #62	; 0x3e
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223a      	movs	r2, #58	; 0x3a
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	223b      	movs	r2, #59	; 0x3b
 80037ee:	2101      	movs	r1, #1
 80037f0:	5499      	strb	r1, [r3, r2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	223c      	movs	r2, #60	; 0x3c
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	223d      	movs	r2, #61	; 0x3d
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2239      	movs	r2, #57	; 0x39
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <HAL_TIM_PWM_Start+0x22>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	223a      	movs	r2, #58	; 0x3a
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	1e5a      	subs	r2, r3, #1
 8003840:	4193      	sbcs	r3, r2
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e01f      	b.n	8003886 <HAL_TIM_PWM_Start+0x62>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d108      	bne.n	800385e <HAL_TIM_PWM_Start+0x3a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	223b      	movs	r2, #59	; 0x3b
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	4193      	sbcs	r3, r2
 800385a:	b2db      	uxtb	r3, r3
 800385c:	e013      	b.n	8003886 <HAL_TIM_PWM_Start+0x62>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d108      	bne.n	8003876 <HAL_TIM_PWM_Start+0x52>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	223c      	movs	r2, #60	; 0x3c
 8003868:	5c9b      	ldrb	r3, [r3, r2]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	1e5a      	subs	r2, r3, #1
 8003870:	4193      	sbcs	r3, r2
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e007      	b.n	8003886 <HAL_TIM_PWM_Start+0x62>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	223d      	movs	r2, #61	; 0x3d
 800387a:	5c9b      	ldrb	r3, [r3, r2]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	4193      	sbcs	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e04d      	b.n	800392a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0x7a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	223a      	movs	r2, #58	; 0x3a
 8003898:	2102      	movs	r1, #2
 800389a:	5499      	strb	r1, [r3, r2]
 800389c:	e013      	b.n	80038c6 <HAL_TIM_PWM_Start+0xa2>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0x8a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	223b      	movs	r2, #59	; 0x3b
 80038a8:	2102      	movs	r1, #2
 80038aa:	5499      	strb	r1, [r3, r2]
 80038ac:	e00b      	b.n	80038c6 <HAL_TIM_PWM_Start+0xa2>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start+0x9a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	223c      	movs	r2, #60	; 0x3c
 80038b8:	2102      	movs	r1, #2
 80038ba:	5499      	strb	r1, [r3, r2]
 80038bc:	e003      	b.n	80038c6 <HAL_TIM_PWM_Start+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	223d      	movs	r2, #61	; 0x3d
 80038c2:	2102      	movs	r1, #2
 80038c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6839      	ldr	r1, [r7, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 fd0e 	bl	80042f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	05db      	lsls	r3, r3, #23
 80038dc:	429a      	cmp	r2, r3
 80038de:	d009      	beq.n	80038f4 <HAL_TIM_PWM_Start+0xd0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_TIM_PWM_Start+0x110>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_TIM_PWM_Start+0xd0>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_TIM_PWM_Start+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d111      	bne.n	8003918 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2207      	movs	r2, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d010      	beq.n	8003928 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e007      	b.n	8003928 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b004      	add	sp, #16
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	40010800 	.word	0x40010800
 8003938:	40011400 	.word	0x40011400

0800393c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fcce 	bl	80042f0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_TIM_PWM_Stop+0x78>)
 800395c:	4013      	ands	r3, r2
 800395e:	d107      	bne.n	8003970 <HAL_TIM_PWM_Stop+0x34>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	438a      	bics	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_TIM_PWM_Stop+0x44>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223a      	movs	r2, #58	; 0x3a
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
 800397e:	e013      	b.n	80039a8 <HAL_TIM_PWM_Stop+0x6c>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d104      	bne.n	8003990 <HAL_TIM_PWM_Stop+0x54>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223b      	movs	r2, #59	; 0x3b
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
 800398e:	e00b      	b.n	80039a8 <HAL_TIM_PWM_Stop+0x6c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b08      	cmp	r3, #8
 8003994:	d104      	bne.n	80039a0 <HAL_TIM_PWM_Stop+0x64>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223c      	movs	r2, #60	; 0x3c
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	e003      	b.n	80039a8 <HAL_TIM_PWM_Stop+0x6c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	223d      	movs	r2, #61	; 0x3d
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	00001111 	.word	0x00001111

080039b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2202      	movs	r2, #2
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d124      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2202      	movs	r2, #2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d11d      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2203      	movs	r2, #3
 80039e2:	4252      	negs	r2, r2
 80039e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2203      	movs	r2, #3
 80039f4:	4013      	ands	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 fa6e 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003a00:	e007      	b.n	8003a12 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 fa61 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 fa6d 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d125      	bne.n	8003a72 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d11e      	bne.n	8003a72 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2205      	movs	r2, #5
 8003a3a:	4252      	negs	r2, r2
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	23c0      	movs	r3, #192	; 0xc0
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 fa41 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003a5a:	e007      	b.n	8003a6c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fa34 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fa40 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d124      	bne.n	8003aca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2208      	movs	r2, #8
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11d      	bne.n	8003aca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2209      	movs	r2, #9
 8003a94:	4252      	negs	r2, r2
 8003a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 fa15 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003ab2:	e007      	b.n	8003ac4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 fa08 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fa14 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d125      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d11e      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2211      	movs	r2, #17
 8003aec:	4252      	negs	r2, r2
 8003aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2208      	movs	r2, #8
 8003af4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	23c0      	movs	r3, #192	; 0xc0
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f9e8 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e007      	b.n	8003b1e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 f9db 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f000 f9e7 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10f      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d108      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2202      	movs	r2, #2
 8003b46:	4252      	negs	r2, r2
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 f9b5 	bl	8003ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2240      	movs	r2, #64	; 0x40
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d10f      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d108      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2241      	movs	r2, #65	; 0x41
 8003b74:	4252      	negs	r2, r2
 8003b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 f9be 	bl	8003efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2317      	movs	r3, #23
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2238      	movs	r2, #56	; 0x38
 8003ba0:	5c9b      	ldrb	r3, [r3, r2]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0ad      	b.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2238      	movs	r2, #56	; 0x38
 8003bae:	2101      	movs	r1, #1
 8003bb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d100      	bne.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x32>
 8003bb8:	e076      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d900      	bls.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003bc0:	e095      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x166>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d04e      	beq.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d900      	bls.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003bce:	e08e      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x166>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x56>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d021      	beq.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003bdc:	e087      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f9e4 	bl	8003fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2108      	movs	r1, #8
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2104      	movs	r1, #4
 8003c08:	438a      	bics	r2, r1
 8003c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6999      	ldr	r1, [r3, #24]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	619a      	str	r2, [r3, #24]
      break;
 8003c1e:	e06b      	b.n	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f9ff 	bl	800402c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	0109      	lsls	r1, r1, #4
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4931      	ldr	r1, [pc, #196]	; (8003d10 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]
      break;
 8003c64:	e048      	b.n	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	0011      	movs	r1, r2
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f000 fa1e 	bl	80040b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2108      	movs	r1, #8
 8003c80:	430a      	orrs	r2, r1
 8003c82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2104      	movs	r1, #4
 8003c90:	438a      	bics	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69d9      	ldr	r1, [r3, #28]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	61da      	str	r2, [r3, #28]
      break;
 8003ca6:	e027      	b.n	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	0011      	movs	r1, r2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 fa3d 	bl	8004130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	0109      	lsls	r1, r1, #4
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	490f      	ldr	r1, [pc, #60]	; (8003d10 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69d9      	ldr	r1, [r3, #28]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
      break;
 8003cec:	e004      	b.n	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003cee:	2317      	movs	r3, #23
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
      break;
 8003cf6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2238      	movs	r2, #56	; 0x38
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5499      	strb	r1, [r3, r2]

  return status;
 8003d00:	2317      	movs	r3, #23
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b006      	add	sp, #24
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	fffffbff 	.word	0xfffffbff

08003d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	230f      	movs	r3, #15
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2238      	movs	r2, #56	; 0x38
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIM_ConfigClockSource+0x20>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e0bc      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x19a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2238      	movs	r2, #56	; 0x38
 8003d38:	2101      	movs	r1, #1
 8003d3a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2239      	movs	r2, #57	; 0x39
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2277      	movs	r2, #119	; 0x77
 8003d50:	4393      	bics	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	0192      	lsls	r2, r2, #6
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xde>
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	0192      	lsls	r2, r2, #6
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d900      	bls.n	8003d7a <HAL_TIM_ConfigClockSource+0x66>
 8003d78:	e088      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	0152      	lsls	r2, r2, #5
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d100      	bne.n	8003d84 <HAL_TIM_ConfigClockSource+0x70>
 8003d82:	e088      	b.n	8003e96 <HAL_TIM_ConfigClockSource+0x182>
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	0152      	lsls	r2, r2, #5
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d900      	bls.n	8003d8e <HAL_TIM_ConfigClockSource+0x7a>
 8003d8c:	e07e      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003d8e:	2b70      	cmp	r3, #112	; 0x70
 8003d90:	d018      	beq.n	8003dc4 <HAL_TIM_ConfigClockSource+0xb0>
 8003d92:	d900      	bls.n	8003d96 <HAL_TIM_ConfigClockSource+0x82>
 8003d94:	e07a      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003d96:	2b60      	cmp	r3, #96	; 0x60
 8003d98:	d04f      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x126>
 8003d9a:	d900      	bls.n	8003d9e <HAL_TIM_ConfigClockSource+0x8a>
 8003d9c:	e076      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003d9e:	2b50      	cmp	r3, #80	; 0x50
 8003da0:	d03b      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x106>
 8003da2:	d900      	bls.n	8003da6 <HAL_TIM_ConfigClockSource+0x92>
 8003da4:	e072      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d057      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x146>
 8003daa:	d900      	bls.n	8003dae <HAL_TIM_ConfigClockSource+0x9a>
 8003dac:	e06e      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003dae:	2b30      	cmp	r3, #48	; 0x30
 8003db0:	d063      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x166>
 8003db2:	d86b      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d060      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x166>
 8003db8:	d868      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d05d      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x166>
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d05b      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x166>
 8003dc2:	e063      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f000 fa6c 	bl	80042b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2277      	movs	r2, #119	; 0x77
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]
      break;
 8003df0:	e052      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 fa55 	bl	80042b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2180      	movs	r1, #128	; 0x80
 8003e12:	01c9      	lsls	r1, r1, #7
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
      break;
 8003e18:	e03e      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	001a      	movs	r2, r3
 8003e28:	f000 f9c8 	bl	80041bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2150      	movs	r1, #80	; 0x50
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 fa22 	bl	800427c <TIM_ITRx_SetConfig>
      break;
 8003e38:	e02e      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	001a      	movs	r2, r3
 8003e48:	f000 f9e6 	bl	8004218 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2160      	movs	r1, #96	; 0x60
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 fa12 	bl	800427c <TIM_ITRx_SetConfig>
      break;
 8003e58:	e01e      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	001a      	movs	r2, r3
 8003e68:	f000 f9a8 	bl	80041bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2140      	movs	r1, #64	; 0x40
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 fa02 	bl	800427c <TIM_ITRx_SetConfig>
      break;
 8003e78:	e00e      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	0019      	movs	r1, r3
 8003e84:	0010      	movs	r0, r2
 8003e86:	f000 f9f9 	bl	800427c <TIM_ITRx_SetConfig>
      break;
 8003e8a:	e005      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e96:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2239      	movs	r2, #57	; 0x39
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2238      	movs	r2, #56	; 0x38
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	ffff00ff 	.word	0xffff00ff

08003ebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	05db      	lsls	r3, r3, #23
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0x2a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <TIM_Base_SetConfig+0x9c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0x2a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <TIM_Base_SetConfig+0xa0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2270      	movs	r2, #112	; 0x70
 8003f3a:	4393      	bics	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	05db      	lsls	r3, r3, #23
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x56>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <TIM_Base_SetConfig+0x9c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x56>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <TIM_Base_SetConfig+0xa0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <TIM_Base_SetConfig+0xa4>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	4393      	bics	r3, r2
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	615a      	str	r2, [r3, #20]
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40010800 	.word	0x40010800
 8003fac:	40011400 	.word	0x40011400
 8003fb0:	fffffcff 	.word	0xfffffcff

08003fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2270      	movs	r2, #112	; 0x70
 8003fe2:	4393      	bics	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4393      	bics	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	621a      	str	r2, [r3, #32]
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b006      	add	sp, #24
 800402a:	bd80      	pop	{r7, pc}

0800402c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	2210      	movs	r2, #16
 800403c:	4393      	bics	r3, r2
 800403e:	001a      	movs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <TIM_OC2_SetConfig+0x7c>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a12      	ldr	r2, [pc, #72]	; (80040ac <TIM_OC2_SetConfig+0x80>)
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2220      	movs	r2, #32
 8004076:	4393      	bics	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	ffff8fff 	.word	0xffff8fff
 80040ac:	fffffcff 	.word	0xfffffcff

080040b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <TIM_OC3_SetConfig+0x78>)
 80040c0:	401a      	ands	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2270      	movs	r2, #112	; 0x70
 80040dc:	4393      	bics	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2203      	movs	r2, #3
 80040e4:	4393      	bics	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <TIM_OC3_SetConfig+0x7c>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	621a      	str	r2, [r3, #32]
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b006      	add	sp, #24
 8004126:	bd80      	pop	{r7, pc}
 8004128:	fffffeff 	.word	0xfffffeff
 800412c:	fffffdff 	.word	0xfffffdff

08004130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <TIM_OC4_SetConfig+0x7c>)
 8004140:	401a      	ands	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <TIM_OC4_SetConfig+0x80>)
 800415c:	4013      	ands	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <TIM_OC4_SetConfig+0x84>)
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <TIM_OC4_SetConfig+0x88>)
 8004178:	4013      	ands	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	031b      	lsls	r3, r3, #12
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b006      	add	sp, #24
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	ffffefff 	.word	0xffffefff
 80041b0:	ffff8fff 	.word	0xffff8fff
 80041b4:	fffffcff 	.word	0xfffffcff
 80041b8:	ffffdfff 	.word	0xffffdfff

080041bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4393      	bics	r3, r2
 80041d6:	001a      	movs	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	22f0      	movs	r2, #240	; 0xf0
 80041e6:	4393      	bics	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	220a      	movs	r2, #10
 80041f8:	4393      	bics	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b006      	add	sp, #24
 8004216:	bd80      	pop	{r7, pc}

08004218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	2210      	movs	r2, #16
 800422a:	4393      	bics	r3, r2
 800422c:	001a      	movs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <TIM_TI2_ConfigInputStage+0x60>)
 8004242:	4013      	ands	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	031b      	lsls	r3, r3, #12
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	22a0      	movs	r2, #160	; 0xa0
 8004254:	4393      	bics	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b006      	add	sp, #24
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	ffff0fff 	.word	0xffff0fff

0800427c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2270      	movs	r2, #112	; 0x70
 8004290:	4393      	bics	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	2207      	movs	r2, #7
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b004      	add	sp, #16
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <TIM_ETR_SetConfig+0x3c>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	609a      	str	r2, [r3, #8]
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b006      	add	sp, #24
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	ffff00ff 	.word	0xffff00ff

080042f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	221f      	movs	r2, #31
 8004300:	4013      	ands	r3, r2
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	0013      	movs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	43d2      	mvns	r2, r2
 8004312:	401a      	ands	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	211f      	movs	r1, #31
 8004320:	400b      	ands	r3, r1
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4099      	lsls	r1, r3
 8004326:	000b      	movs	r3, r1
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b006      	add	sp, #24
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2238      	movs	r2, #56	; 0x38
 8004346:	5c9b      	ldrb	r3, [r3, r2]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800434c:	2302      	movs	r3, #2
 800434e:	e042      	b.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2238      	movs	r2, #56	; 0x38
 8004354:	2101      	movs	r1, #1
 8004356:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2239      	movs	r2, #57	; 0x39
 800435c:	2102      	movs	r1, #2
 800435e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2270      	movs	r2, #112	; 0x70
 8004374:	4393      	bics	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	05db      	lsls	r3, r3, #23
 8004392:	429a      	cmp	r2, r3
 8004394:	d009      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10c      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2280      	movs	r2, #128	; 0x80
 80043ae:	4393      	bics	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2239      	movs	r2, #57	; 0x39
 80043c8:	2101      	movs	r1, #1
 80043ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2238      	movs	r2, #56	; 0x38
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	40010800 	.word	0x40010800
 80043e4:	40011400 	.word	0x40011400

080043e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e044      	b.n	8004484 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2278      	movs	r2, #120	; 0x78
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	0018      	movs	r0, r3
 800440e:	f7fd fdc5 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2224      	movs	r2, #36	; 0x24
 8004416:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2101      	movs	r1, #1
 8004424:	438a      	bics	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	0018      	movs	r0, r3
 800442c:	f000 fc2c 	bl	8004c88 <UART_SetConfig>
 8004430:	0003      	movs	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e024      	b.n	8004484 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 fe69 	bl	800511c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	490d      	ldr	r1, [pc, #52]	; (800448c <HAL_UART_Init+0xa4>)
 8004456:	400a      	ands	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	212a      	movs	r1, #42	; 0x2a
 8004466:	438a      	bics	r2, r1
 8004468:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 ff01 	bl	8005284 <UART_CheckIdleState>
 8004482:	0003      	movs	r3, r0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}
 800448c:	ffffb7ff 	.word	0xffffb7ff

08004490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	1dbb      	adds	r3, r7, #6
 800449e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d000      	beq.n	80044aa <HAL_UART_Transmit+0x1a>
 80044a8:	e08c      	b.n	80045c4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_UART_Transmit+0x28>
 80044b0:	1dbb      	adds	r3, r7, #6
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e084      	b.n	80045c6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	015b      	lsls	r3, r3, #5
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d109      	bne.n	80044dc <HAL_UART_Transmit+0x4c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2201      	movs	r2, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	d001      	beq.n	80044dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e074      	b.n	80045c6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2284      	movs	r2, #132	; 0x84
 80044e0:	2100      	movs	r1, #0
 80044e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2221      	movs	r2, #33	; 0x21
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ea:	f7fd ff27 	bl	800233c <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1dba      	adds	r2, r7, #6
 80044f6:	2150      	movs	r1, #80	; 0x50
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1dba      	adds	r2, r7, #6
 8004500:	2152      	movs	r1, #82	; 0x52
 8004502:	8812      	ldrh	r2, [r2, #0]
 8004504:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	015b      	lsls	r3, r3, #5
 800450e:	429a      	cmp	r2, r3
 8004510:	d108      	bne.n	8004524 <HAL_UART_Transmit+0x94>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e003      	b.n	800452c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800452c:	e02f      	b.n	800458e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	0013      	movs	r3, r2
 8004538:	2200      	movs	r2, #0
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	f000 ff4a 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004540:	1e03      	subs	r3, r0, #0
 8004542:	d004      	beq.n	800454e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e03b      	b.n	80045c6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	001a      	movs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	05d2      	lsls	r2, r2, #23
 8004560:	0dd2      	lsrs	r2, r2, #23
 8004562:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	3302      	adds	r3, #2
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e007      	b.n	800457c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3301      	adds	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2252      	movs	r2, #82	; 0x52
 8004580:	5a9b      	ldrh	r3, [r3, r2]
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b299      	uxth	r1, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2252      	movs	r2, #82	; 0x52
 800458c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2252      	movs	r2, #82	; 0x52
 8004592:	5a9b      	ldrh	r3, [r3, r2]
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1c9      	bne.n	800452e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	0013      	movs	r3, r2
 80045a4:	2200      	movs	r2, #0
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	f000 ff14 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 80045ac:	1e03      	subs	r3, r0, #0
 80045ae:	d004      	beq.n	80045ba <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e005      	b.n	80045c6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b008      	add	sp, #32
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	589b      	ldr	r3, [r3, r2]
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d14a      	bne.n	800467e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_UART_Receive_IT+0x26>
 80045ee:	1dbb      	adds	r3, r7, #6
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e042      	b.n	8004680 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	015b      	lsls	r3, r3, #5
 8004602:	429a      	cmp	r2, r3
 8004604:	d109      	bne.n	800461a <HAL_UART_Receive_IT+0x4a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2201      	movs	r2, #1
 8004612:	4013      	ands	r3, r2
 8004614:	d001      	beq.n	800461a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e032      	b.n	8004680 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_UART_Receive_IT+0xb8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d020      	beq.n	800466c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	4013      	ands	r3, r2
 8004636:	d019      	beq.n	800466c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004638:	f3ef 8310 	mrs	r3, PRIMASK
 800463c:	613b      	str	r3, [r7, #16]
  return(result);
 800463e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	2301      	movs	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	04c9      	lsls	r1, r1, #19
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800466c:	1dbb      	adds	r3, r7, #6
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 ff17 	bl	80054a8 <UART_Start_Receive_IT>
 800467a:	0003      	movs	r3, r0
 800467c:	e000      	b.n	8004680 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800467e:	2302      	movs	r3, #2
  }
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b008      	add	sp, #32
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40004800 	.word	0x40004800

0800468c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b0ab      	sub	sp, #172	; 0xac
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	22a4      	movs	r2, #164	; 0xa4
 800469c:	18b9      	adds	r1, r7, r2
 800469e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	20a0      	movs	r0, #160	; 0xa0
 80046a8:	1839      	adds	r1, r7, r0
 80046aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	219c      	movs	r1, #156	; 0x9c
 80046b4:	1879      	adds	r1, r7, r1
 80046b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046b8:	0011      	movs	r1, r2
 80046ba:	18bb      	adds	r3, r7, r2
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a99      	ldr	r2, [pc, #612]	; (8004924 <HAL_UART_IRQHandler+0x298>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	2298      	movs	r2, #152	; 0x98
 80046c4:	18bc      	adds	r4, r7, r2
 80046c6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80046c8:	18bb      	adds	r3, r7, r2
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d114      	bne.n	80046fa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2220      	movs	r2, #32
 80046d6:	4013      	ands	r3, r2
 80046d8:	d00f      	beq.n	80046fa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046da:	183b      	adds	r3, r7, r0
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2220      	movs	r2, #32
 80046e0:	4013      	ands	r3, r2
 80046e2:	d00a      	beq.n	80046fa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d100      	bne.n	80046ee <HAL_UART_IRQHandler+0x62>
 80046ec:	e2a0      	b.n	8004c30 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	0010      	movs	r0, r2
 80046f6:	4798      	blx	r3
      }
      return;
 80046f8:	e29a      	b.n	8004c30 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046fa:	2398      	movs	r3, #152	; 0x98
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d100      	bne.n	8004706 <HAL_UART_IRQHandler+0x7a>
 8004704:	e114      	b.n	8004930 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004706:	239c      	movs	r3, #156	; 0x9c
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	4013      	ands	r3, r2
 8004710:	d106      	bne.n	8004720 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004712:	23a0      	movs	r3, #160	; 0xa0
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a83      	ldr	r2, [pc, #524]	; (8004928 <HAL_UART_IRQHandler+0x29c>)
 800471a:	4013      	ands	r3, r2
 800471c:	d100      	bne.n	8004720 <HAL_UART_IRQHandler+0x94>
 800471e:	e107      	b.n	8004930 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004720:	23a4      	movs	r3, #164	; 0xa4
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	4013      	ands	r3, r2
 800472a:	d012      	beq.n	8004752 <HAL_UART_IRQHandler+0xc6>
 800472c:	23a0      	movs	r3, #160	; 0xa0
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4013      	ands	r3, r2
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2284      	movs	r2, #132	; 0x84
 8004746:	589b      	ldr	r3, [r3, r2]
 8004748:	2201      	movs	r2, #1
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2184      	movs	r1, #132	; 0x84
 8004750:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004752:	23a4      	movs	r3, #164	; 0xa4
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d011      	beq.n	8004782 <HAL_UART_IRQHandler+0xf6>
 800475e:	239c      	movs	r3, #156	; 0x9c
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	4013      	ands	r3, r2
 8004768:	d00b      	beq.n	8004782 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2202      	movs	r2, #2
 8004770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2284      	movs	r2, #132	; 0x84
 8004776:	589b      	ldr	r3, [r3, r2]
 8004778:	2204      	movs	r2, #4
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2184      	movs	r1, #132	; 0x84
 8004780:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004782:	23a4      	movs	r3, #164	; 0xa4
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2204      	movs	r2, #4
 800478a:	4013      	ands	r3, r2
 800478c:	d011      	beq.n	80047b2 <HAL_UART_IRQHandler+0x126>
 800478e:	239c      	movs	r3, #156	; 0x9c
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2204      	movs	r2, #4
 80047a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2284      	movs	r2, #132	; 0x84
 80047a6:	589b      	ldr	r3, [r3, r2]
 80047a8:	2202      	movs	r2, #2
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2184      	movs	r1, #132	; 0x84
 80047b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047b2:	23a4      	movs	r3, #164	; 0xa4
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2208      	movs	r2, #8
 80047ba:	4013      	ands	r3, r2
 80047bc:	d017      	beq.n	80047ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047be:	23a0      	movs	r3, #160	; 0xa0
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2220      	movs	r2, #32
 80047c6:	4013      	ands	r3, r2
 80047c8:	d105      	bne.n	80047d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047ca:	239c      	movs	r3, #156	; 0x9c
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d4:	d00b      	beq.n	80047ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2208      	movs	r2, #8
 80047dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2284      	movs	r2, #132	; 0x84
 80047e2:	589b      	ldr	r3, [r3, r2]
 80047e4:	2208      	movs	r2, #8
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2184      	movs	r1, #132	; 0x84
 80047ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047ee:	23a4      	movs	r3, #164	; 0xa4
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	4013      	ands	r3, r2
 80047fa:	d013      	beq.n	8004824 <HAL_UART_IRQHandler+0x198>
 80047fc:	23a0      	movs	r3, #160	; 0xa0
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	04db      	lsls	r3, r3, #19
 8004806:	4013      	ands	r3, r2
 8004808:	d00c      	beq.n	8004824 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2280      	movs	r2, #128	; 0x80
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2284      	movs	r2, #132	; 0x84
 8004818:	589b      	ldr	r3, [r3, r2]
 800481a:	2220      	movs	r2, #32
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2184      	movs	r1, #132	; 0x84
 8004822:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2284      	movs	r2, #132	; 0x84
 8004828:	589b      	ldr	r3, [r3, r2]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d100      	bne.n	8004830 <HAL_UART_IRQHandler+0x1a4>
 800482e:	e201      	b.n	8004c34 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004830:	23a4      	movs	r3, #164	; 0xa4
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2220      	movs	r2, #32
 8004838:	4013      	ands	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800483c:	23a0      	movs	r3, #160	; 0xa0
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2220      	movs	r2, #32
 8004844:	4013      	ands	r3, r2
 8004846:	d008      	beq.n	800485a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	0010      	movs	r0, r2
 8004858:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2284      	movs	r2, #132	; 0x84
 800485e:	589b      	ldr	r3, [r3, r2]
 8004860:	2194      	movs	r1, #148	; 0x94
 8004862:	187a      	adds	r2, r7, r1
 8004864:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2240      	movs	r2, #64	; 0x40
 800486e:	4013      	ands	r3, r2
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d004      	beq.n	800487e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004874:	187b      	adds	r3, r7, r1
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2228      	movs	r2, #40	; 0x28
 800487a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800487c:	d047      	beq.n	800490e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 fedb 	bl	800563c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2240      	movs	r2, #64	; 0x40
 800488e:	4013      	ands	r3, r2
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d137      	bne.n	8004904 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004894:	f3ef 8310 	mrs	r3, PRIMASK
 8004898:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800489a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489c:	2090      	movs	r0, #144	; 0x90
 800489e:	183a      	adds	r2, r7, r0
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	2301      	movs	r3, #1
 80048a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2140      	movs	r1, #64	; 0x40
 80048ba:	438a      	bics	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c6:	f383 8810 	msr	PRIMASK, r3
}
 80048ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <HAL_UART_IRQHandler+0x2a0>)
 80048da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fd fe77 	bl	80025d4 <HAL_DMA_Abort_IT>
 80048e6:	1e03      	subs	r3, r0, #0
 80048e8:	d01a      	beq.n	8004920 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f4:	0018      	movs	r0, r3
 80048f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	e012      	b.n	8004920 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 f9af 	bl	8004c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004902:	e00d      	b.n	8004920 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f000 f9aa 	bl	8004c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e008      	b.n	8004920 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f9a5 	bl	8004c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2284      	movs	r2, #132	; 0x84
 800491a:	2100      	movs	r1, #0
 800491c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800491e:	e189      	b.n	8004c34 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	46c0      	nop			; (mov r8, r8)
    return;
 8004922:	e187      	b.n	8004c34 <HAL_UART_IRQHandler+0x5a8>
 8004924:	0000080f 	.word	0x0000080f
 8004928:	04000120 	.word	0x04000120
 800492c:	08005705 	.word	0x08005705

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	2b01      	cmp	r3, #1
 8004936:	d000      	beq.n	800493a <HAL_UART_IRQHandler+0x2ae>
 8004938:	e13b      	b.n	8004bb2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800493a:	23a4      	movs	r3, #164	; 0xa4
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2210      	movs	r2, #16
 8004942:	4013      	ands	r3, r2
 8004944:	d100      	bne.n	8004948 <HAL_UART_IRQHandler+0x2bc>
 8004946:	e134      	b.n	8004bb2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004948:	23a0      	movs	r3, #160	; 0xa0
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2210      	movs	r2, #16
 8004950:	4013      	ands	r3, r2
 8004952:	d100      	bne.n	8004956 <HAL_UART_IRQHandler+0x2ca>
 8004954:	e12d      	b.n	8004bb2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2210      	movs	r2, #16
 800495c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2240      	movs	r2, #64	; 0x40
 8004966:	4013      	ands	r3, r2
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d000      	beq.n	800496e <HAL_UART_IRQHandler+0x2e2>
 800496c:	e0a1      	b.n	8004ab2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	217e      	movs	r1, #126	; 0x7e
 8004978:	187b      	adds	r3, r7, r1
 800497a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800497c:	187b      	adds	r3, r7, r1
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d100      	bne.n	8004986 <HAL_UART_IRQHandler+0x2fa>
 8004984:	e158      	b.n	8004c38 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2258      	movs	r2, #88	; 0x58
 800498a:	5a9b      	ldrh	r3, [r3, r2]
 800498c:	187a      	adds	r2, r7, r1
 800498e:	8812      	ldrh	r2, [r2, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d300      	bcc.n	8004996 <HAL_UART_IRQHandler+0x30a>
 8004994:	e150      	b.n	8004c38 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	187a      	adds	r2, r7, r1
 800499a:	215a      	movs	r1, #90	; 0x5a
 800499c:	8812      	ldrh	r2, [r2, #0]
 800499e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	d16f      	bne.n	8004a8e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80049b8:	2301      	movs	r3, #1
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	499e      	ldr	r1, [pc, #632]	; (8004c48 <HAL_UART_IRQHandler+0x5bc>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e0:	f3ef 8310 	mrs	r3, PRIMASK
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	677b      	str	r3, [r7, #116]	; 0x74
 80049ea:	2301      	movs	r3, #1
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	f383 8810 	msr	PRIMASK, r3
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2101      	movs	r1, #1
 8004a02:	438a      	bics	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a08:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a12:	f3ef 8310 	mrs	r3, PRIMASK
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	f383 8810 	msr	PRIMASK, r3
}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2140      	movs	r1, #64	; 0x40
 8004a34:	438a      	bics	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a3a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3e:	f383 8810 	msr	PRIMASK, r3
}
 8004a42:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2280      	movs	r2, #128	; 0x80
 8004a48:	2120      	movs	r1, #32
 8004a4a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a52:	f3ef 8310 	mrs	r3, PRIMASK
 8004a56:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2110      	movs	r1, #16
 8004a74:	438a      	bics	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7fd fd63 	bl	8002554 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2258      	movs	r2, #88	; 0x58
 8004a98:	5a9a      	ldrh	r2, [r3, r2]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	215a      	movs	r1, #90	; 0x5a
 8004a9e:	5a5b      	ldrh	r3, [r3, r1]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0011      	movs	r1, r2
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 f8e0 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab0:	e0c2      	b.n	8004c38 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2258      	movs	r2, #88	; 0x58
 8004ab6:	5a99      	ldrh	r1, [r3, r2]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	225a      	movs	r2, #90	; 0x5a
 8004abc:	5a9b      	ldrh	r3, [r3, r2]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	208e      	movs	r0, #142	; 0x8e
 8004ac2:	183b      	adds	r3, r7, r0
 8004ac4:	1a8a      	subs	r2, r1, r2
 8004ac6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	225a      	movs	r2, #90	; 0x5a
 8004acc:	5a9b      	ldrh	r3, [r3, r2]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d100      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x44a>
 8004ad4:	e0b2      	b.n	8004c3c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004ad6:	183b      	adds	r3, r7, r0
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d100      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x454>
 8004ade:	e0ad      	b.n	8004c3c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae8:	2488      	movs	r4, #136	; 0x88
 8004aea:	193a      	adds	r2, r7, r4
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	2301      	movs	r3, #1
 8004af0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4951      	ldr	r1, [pc, #324]	; (8004c4c <HAL_UART_IRQHandler+0x5c0>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f383 8810 	msr	PRIMASK, r3
}
 8004b16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b1e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	2484      	movs	r4, #132	; 0x84
 8004b22:	193a      	adds	r2, r7, r4
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	2301      	movs	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f383 8810 	msr	PRIMASK, r3
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	438a      	bics	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	; 0x80
 8004b54:	2120      	movs	r1, #32
 8004b56:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b64:	f3ef 8310 	mrs	r3, PRIMASK
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	2480      	movs	r4, #128	; 0x80
 8004b6e:	193a      	adds	r2, r7, r4
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	2301      	movs	r3, #1
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2110      	movs	r1, #16
 8004b8a:	438a      	bics	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	193b      	adds	r3, r7, r4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	f383 8810 	msr	PRIMASK, r3
}
 8004b9a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ba2:	183b      	adds	r3, r7, r0
 8004ba4:	881a      	ldrh	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0011      	movs	r1, r2
 8004baa:	0018      	movs	r0, r3
 8004bac:	f000 f860 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bb0:	e044      	b.n	8004c3c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bb2:	23a4      	movs	r3, #164	; 0xa4
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	035b      	lsls	r3, r3, #13
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d010      	beq.n	8004be2 <HAL_UART_IRQHandler+0x556>
 8004bc0:	239c      	movs	r3, #156	; 0x9c
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	03db      	lsls	r3, r3, #15
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	0352      	lsls	r2, r2, #13
 8004bd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 ff98 	bl	8005b10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004be0:	e02f      	b.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004be2:	23a4      	movs	r3, #164	; 0xa4
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	4013      	ands	r3, r2
 8004bec:	d00f      	beq.n	8004c0e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bee:	23a0      	movs	r3, #160	; 0xa0
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01e      	beq.n	8004c40 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	0010      	movs	r0, r2
 8004c0a:	4798      	blx	r3
    }
    return;
 8004c0c:	e018      	b.n	8004c40 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c0e:	23a4      	movs	r3, #164	; 0xa4
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2240      	movs	r2, #64	; 0x40
 8004c16:	4013      	ands	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
 8004c1a:	23a0      	movs	r3, #160	; 0xa0
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2240      	movs	r2, #64	; 0x40
 8004c22:	4013      	ands	r3, r2
 8004c24:	d00d      	beq.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 fd82 	bl	8005732 <UART_EndTransmit_IT>
    return;
 8004c2e:	e008      	b.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	e006      	b.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	e004      	b.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	e002      	b.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004c40:	46c0      	nop			; (mov r8, r8)
  }

}
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b02b      	add	sp, #172	; 0xac
 8004c46:	bd90      	pop	{r4, r7, pc}
 8004c48:	fffffeff 	.word	0xfffffeff
 8004c4c:	fffffedf 	.word	0xfffffedf

08004c50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	000a      	movs	r2, r1
 8004c7a:	1cbb      	adds	r3, r7, #2
 8004c7c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b002      	add	sp, #8
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c88:	b5b0      	push	{r4, r5, r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c90:	231a      	movs	r3, #26
 8004c92:	2218      	movs	r2, #24
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	19db      	adds	r3, r3, r7
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4ab4      	ldr	r2, [pc, #720]	; (8004f8c <UART_SetConfig+0x304>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4aaf      	ldr	r2, [pc, #700]	; (8004f90 <UART_SetConfig+0x308>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4aa9      	ldr	r2, [pc, #676]	; (8004f94 <UART_SetConfig+0x30c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4aa5      	ldr	r2, [pc, #660]	; (8004f98 <UART_SetConfig+0x310>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4aa1      	ldr	r2, [pc, #644]	; (8004f9c <UART_SetConfig+0x314>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d131      	bne.n	8004d80 <UART_SetConfig+0xf8>
 8004d1c:	4ba0      	ldr	r3, [pc, #640]	; (8004fa0 <UART_SetConfig+0x318>)
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d20:	220c      	movs	r2, #12
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d01d      	beq.n	8004d64 <UART_SetConfig+0xdc>
 8004d28:	d823      	bhi.n	8004d72 <UART_SetConfig+0xea>
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d00c      	beq.n	8004d48 <UART_SetConfig+0xc0>
 8004d2e:	d820      	bhi.n	8004d72 <UART_SetConfig+0xea>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <UART_SetConfig+0xb2>
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d00e      	beq.n	8004d56 <UART_SetConfig+0xce>
 8004d38:	e01b      	b.n	8004d72 <UART_SetConfig+0xea>
 8004d3a:	231b      	movs	r3, #27
 8004d3c:	2218      	movs	r2, #24
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	19db      	adds	r3, r3, r7
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e065      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004d48:	231b      	movs	r3, #27
 8004d4a:	2218      	movs	r2, #24
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	2202      	movs	r2, #2
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e05e      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004d56:	231b      	movs	r3, #27
 8004d58:	2218      	movs	r2, #24
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	19db      	adds	r3, r3, r7
 8004d5e:	2204      	movs	r2, #4
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e057      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004d64:	231b      	movs	r3, #27
 8004d66:	2218      	movs	r2, #24
 8004d68:	189b      	adds	r3, r3, r2
 8004d6a:	19db      	adds	r3, r3, r7
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e050      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004d72:	231b      	movs	r3, #27
 8004d74:	2218      	movs	r2, #24
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	19db      	adds	r3, r3, r7
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e049      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a83      	ldr	r2, [pc, #524]	; (8004f94 <UART_SetConfig+0x30c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d13e      	bne.n	8004e08 <UART_SetConfig+0x180>
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <UART_SetConfig+0x318>)
 8004d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d8e:	23c0      	movs	r3, #192	; 0xc0
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	4013      	ands	r3, r2
 8004d94:	22c0      	movs	r2, #192	; 0xc0
 8004d96:	0112      	lsls	r2, r2, #4
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d027      	beq.n	8004dec <UART_SetConfig+0x164>
 8004d9c:	22c0      	movs	r2, #192	; 0xc0
 8004d9e:	0112      	lsls	r2, r2, #4
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d82a      	bhi.n	8004dfa <UART_SetConfig+0x172>
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	0112      	lsls	r2, r2, #4
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d011      	beq.n	8004dd0 <UART_SetConfig+0x148>
 8004dac:	2280      	movs	r2, #128	; 0x80
 8004dae:	0112      	lsls	r2, r2, #4
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d822      	bhi.n	8004dfa <UART_SetConfig+0x172>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <UART_SetConfig+0x13a>
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <UART_SetConfig+0x156>
 8004dc0:	e01b      	b.n	8004dfa <UART_SetConfig+0x172>
 8004dc2:	231b      	movs	r3, #27
 8004dc4:	2218      	movs	r2, #24
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	19db      	adds	r3, r3, r7
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e021      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004dd0:	231b      	movs	r3, #27
 8004dd2:	2218      	movs	r2, #24
 8004dd4:	189b      	adds	r3, r3, r2
 8004dd6:	19db      	adds	r3, r3, r7
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e01a      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004dde:	231b      	movs	r3, #27
 8004de0:	2218      	movs	r2, #24
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	19db      	adds	r3, r3, r7
 8004de6:	2204      	movs	r2, #4
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e013      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004dec:	231b      	movs	r3, #27
 8004dee:	2218      	movs	r2, #24
 8004df0:	189b      	adds	r3, r3, r2
 8004df2:	19db      	adds	r3, r3, r7
 8004df4:	2208      	movs	r2, #8
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e00c      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004dfa:	231b      	movs	r3, #27
 8004dfc:	2218      	movs	r2, #24
 8004dfe:	189b      	adds	r3, r3, r2
 8004e00:	19db      	adds	r3, r3, r7
 8004e02:	2210      	movs	r2, #16
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e005      	b.n	8004e14 <UART_SetConfig+0x18c>
 8004e08:	231b      	movs	r3, #27
 8004e0a:	2218      	movs	r2, #24
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	19db      	adds	r3, r3, r7
 8004e10:	2210      	movs	r2, #16
 8004e12:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5e      	ldr	r2, [pc, #376]	; (8004f94 <UART_SetConfig+0x30c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d000      	beq.n	8004e20 <UART_SetConfig+0x198>
 8004e1e:	e084      	b.n	8004f2a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e20:	231b      	movs	r3, #27
 8004e22:	2218      	movs	r2, #24
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	19db      	adds	r3, r3, r7
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d01d      	beq.n	8004e6a <UART_SetConfig+0x1e2>
 8004e2e:	dc20      	bgt.n	8004e72 <UART_SetConfig+0x1ea>
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d015      	beq.n	8004e60 <UART_SetConfig+0x1d8>
 8004e34:	dc1d      	bgt.n	8004e72 <UART_SetConfig+0x1ea>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <UART_SetConfig+0x1b8>
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d005      	beq.n	8004e4a <UART_SetConfig+0x1c2>
 8004e3e:	e018      	b.n	8004e72 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe fb10 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8004e44:	0003      	movs	r3, r0
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e48:	e01c      	b.n	8004e84 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4a:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <UART_SetConfig+0x318>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	4013      	ands	r3, r2
 8004e52:	d002      	beq.n	8004e5a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e54:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <UART_SetConfig+0x31c>)
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e58:	e014      	b.n	8004e84 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004e5a:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <UART_SetConfig+0x320>)
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e5e:	e011      	b.n	8004e84 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e60:	f7fe fa50 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004e64:	0003      	movs	r3, r0
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e68:	e00c      	b.n	8004e84 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e70:	e008      	b.n	8004e84 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e76:	231a      	movs	r3, #26
 8004e78:	2218      	movs	r2, #24
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	19db      	adds	r3, r3, r7
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
        break;
 8004e82:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d100      	bne.n	8004e8c <UART_SetConfig+0x204>
 8004e8a:	e12f      	b.n	80050ec <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	0013      	movs	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d305      	bcc.n	8004ea8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d906      	bls.n	8004eb6 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004ea8:	231a      	movs	r3, #26
 8004eaa:	2218      	movs	r2, #24
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	19db      	adds	r3, r3, r7
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e11a      	b.n	80050ec <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	6939      	ldr	r1, [r7, #16]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	000b      	movs	r3, r1
 8004ec4:	0e1b      	lsrs	r3, r3, #24
 8004ec6:	0010      	movs	r0, r2
 8004ec8:	0205      	lsls	r5, r0, #8
 8004eca:	431d      	orrs	r5, r3
 8004ecc:	000b      	movs	r3, r1
 8004ece:	021c      	lsls	r4, r3, #8
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	1900      	adds	r0, r0, r4
 8004ee2:	4169      	adcs	r1, r5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f7fb f9e3 	bl	80002bc <__aeabi_uldivmod>
 8004ef6:	0002      	movs	r2, r0
 8004ef8:	000b      	movs	r3, r1
 8004efa:	0013      	movs	r3, r2
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f00:	23c0      	movs	r3, #192	; 0xc0
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d309      	bcc.n	8004f1c <UART_SetConfig+0x294>
 8004f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	035b      	lsls	r3, r3, #13
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d204      	bcs.n	8004f1c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e0e7      	b.n	80050ec <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004f1c:	231a      	movs	r3, #26
 8004f1e:	2218      	movs	r2, #24
 8004f20:	189b      	adds	r3, r3, r2
 8004f22:	19db      	adds	r3, r3, r7
 8004f24:	2201      	movs	r2, #1
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e0e0      	b.n	80050ec <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d000      	beq.n	8004f38 <UART_SetConfig+0x2b0>
 8004f36:	e082      	b.n	800503e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004f38:	231b      	movs	r3, #27
 8004f3a:	2218      	movs	r2, #24
 8004f3c:	189b      	adds	r3, r3, r2
 8004f3e:	19db      	adds	r3, r3, r7
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d834      	bhi.n	8004fb0 <UART_SetConfig+0x328>
 8004f46:	009a      	lsls	r2, r3, #2
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <UART_SetConfig+0x324>)
 8004f4a:	18d3      	adds	r3, r2, r3
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fa88 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8004f54:	0003      	movs	r3, r0
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f58:	e033      	b.n	8004fc2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f5a:	f7fe fa99 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f62:	e02e      	b.n	8004fc2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <UART_SetConfig+0x318>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d002      	beq.n	8004f74 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <UART_SetConfig+0x31c>)
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f72:	e026      	b.n	8004fc2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <UART_SetConfig+0x320>)
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f78:	e023      	b.n	8004fc2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe f9c3 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f82:	e01e      	b.n	8004fc2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f8a:	e01a      	b.n	8004fc2 <UART_SetConfig+0x33a>
 8004f8c:	efff69f3 	.word	0xefff69f3
 8004f90:	ffffcfff 	.word	0xffffcfff
 8004f94:	40004800 	.word	0x40004800
 8004f98:	fffff4ff 	.word	0xfffff4ff
 8004f9c:	40004400 	.word	0x40004400
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	00f42400 	.word	0x00f42400
 8004fac:	080071f4 	.word	0x080071f4
      default:
        pclk = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fb4:	231a      	movs	r3, #26
 8004fb6:	2218      	movs	r2, #24
 8004fb8:	189b      	adds	r3, r3, r2
 8004fba:	19db      	adds	r3, r3, r7
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
        break;
 8004fc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d100      	bne.n	8004fca <UART_SetConfig+0x342>
 8004fc8:	e090      	b.n	80050ec <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	005a      	lsls	r2, r3, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	18d2      	adds	r2, r2, r3
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	0019      	movs	r1, r3
 8004fdc:	0010      	movs	r0, r2
 8004fde:	f7fb f8a7 	bl	8000130 <__udivsi3>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	2b0f      	cmp	r3, #15
 8004fea:	d921      	bls.n	8005030 <UART_SetConfig+0x3a8>
 8004fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	025b      	lsls	r3, r3, #9
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d21c      	bcs.n	8005030 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	200e      	movs	r0, #14
 8004ffc:	2418      	movs	r4, #24
 8004ffe:	1903      	adds	r3, r0, r4
 8005000:	19db      	adds	r3, r3, r7
 8005002:	210f      	movs	r1, #15
 8005004:	438a      	bics	r2, r1
 8005006:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	b29b      	uxth	r3, r3
 800500e:	2207      	movs	r2, #7
 8005010:	4013      	ands	r3, r2
 8005012:	b299      	uxth	r1, r3
 8005014:	1903      	adds	r3, r0, r4
 8005016:	19db      	adds	r3, r3, r7
 8005018:	1902      	adds	r2, r0, r4
 800501a:	19d2      	adds	r2, r2, r7
 800501c:	8812      	ldrh	r2, [r2, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	1902      	adds	r2, r0, r4
 8005028:	19d2      	adds	r2, r2, r7
 800502a:	8812      	ldrh	r2, [r2, #0]
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	e05d      	b.n	80050ec <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005030:	231a      	movs	r3, #26
 8005032:	2218      	movs	r2, #24
 8005034:	189b      	adds	r3, r3, r2
 8005036:	19db      	adds	r3, r3, r7
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e056      	b.n	80050ec <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800503e:	231b      	movs	r3, #27
 8005040:	2218      	movs	r2, #24
 8005042:	189b      	adds	r3, r3, r2
 8005044:	19db      	adds	r3, r3, r7
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d822      	bhi.n	8005092 <UART_SetConfig+0x40a>
 800504c:	009a      	lsls	r2, r3, #2
 800504e:	4b2f      	ldr	r3, [pc, #188]	; (800510c <UART_SetConfig+0x484>)
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005056:	f7fe fa05 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 800505a:	0003      	movs	r3, r0
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800505e:	e021      	b.n	80050a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fe fa16 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8005064:	0003      	movs	r3, r0
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005068:	e01c      	b.n	80050a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800506a:	4b29      	ldr	r3, [pc, #164]	; (8005110 <UART_SetConfig+0x488>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2210      	movs	r2, #16
 8005070:	4013      	ands	r3, r2
 8005072:	d002      	beq.n	800507a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005074:	4b27      	ldr	r3, [pc, #156]	; (8005114 <UART_SetConfig+0x48c>)
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005078:	e014      	b.n	80050a4 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <UART_SetConfig+0x490>)
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800507e:	e011      	b.n	80050a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005080:	f7fe f940 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8005084:	0003      	movs	r3, r0
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005088:	e00c      	b.n	80050a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005090:	e008      	b.n	80050a4 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005096:	231a      	movs	r3, #26
 8005098:	2218      	movs	r2, #24
 800509a:	189b      	adds	r3, r3, r2
 800509c:	19db      	adds	r3, r3, r7
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]
        break;
 80050a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d020      	beq.n	80050ec <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	085a      	lsrs	r2, r3, #1
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	18d2      	adds	r2, r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	0019      	movs	r1, r3
 80050ba:	0010      	movs	r0, r2
 80050bc:	f7fb f838 	bl	8000130 <__udivsi3>
 80050c0:	0003      	movs	r3, r0
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d90a      	bls.n	80050e0 <UART_SetConfig+0x458>
 80050ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	025b      	lsls	r3, r3, #9
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d205      	bcs.n	80050e0 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	e005      	b.n	80050ec <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80050e0:	231a      	movs	r3, #26
 80050e2:	2218      	movs	r2, #24
 80050e4:	189b      	adds	r3, r3, r2
 80050e6:	19db      	adds	r3, r3, r7
 80050e8:	2201      	movs	r2, #1
 80050ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2200      	movs	r2, #0
 80050f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2200      	movs	r2, #0
 80050f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050f8:	231a      	movs	r3, #26
 80050fa:	2218      	movs	r2, #24
 80050fc:	189b      	adds	r3, r3, r2
 80050fe:	19db      	adds	r3, r3, r7
 8005100:	781b      	ldrb	r3, [r3, #0]
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b00e      	add	sp, #56	; 0x38
 8005108:	bdb0      	pop	{r4, r5, r7, pc}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	08007218 	.word	0x08007218
 8005110:	40021000 	.word	0x40021000
 8005114:	003d0900 	.word	0x003d0900
 8005118:	00f42400 	.word	0x00f42400

0800511c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2201      	movs	r2, #1
 800512a:	4013      	ands	r3, r2
 800512c:	d00b      	beq.n	8005146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a4a      	ldr	r2, [pc, #296]	; (8005260 <UART_AdvFeatureConfig+0x144>)
 8005136:	4013      	ands	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2202      	movs	r2, #2
 800514c:	4013      	ands	r3, r2
 800514e:	d00b      	beq.n	8005168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4a43      	ldr	r2, [pc, #268]	; (8005264 <UART_AdvFeatureConfig+0x148>)
 8005158:	4013      	ands	r3, r2
 800515a:	0019      	movs	r1, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2204      	movs	r2, #4
 800516e:	4013      	ands	r3, r2
 8005170:	d00b      	beq.n	800518a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a3b      	ldr	r2, [pc, #236]	; (8005268 <UART_AdvFeatureConfig+0x14c>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2208      	movs	r2, #8
 8005190:	4013      	ands	r3, r2
 8005192:	d00b      	beq.n	80051ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4a34      	ldr	r2, [pc, #208]	; (800526c <UART_AdvFeatureConfig+0x150>)
 800519c:	4013      	ands	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2210      	movs	r2, #16
 80051b2:	4013      	ands	r3, r2
 80051b4:	d00b      	beq.n	80051ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <UART_AdvFeatureConfig+0x154>)
 80051be:	4013      	ands	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2220      	movs	r2, #32
 80051d4:	4013      	ands	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a25      	ldr	r2, [pc, #148]	; (8005274 <UART_AdvFeatureConfig+0x158>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2240      	movs	r2, #64	; 0x40
 80051f6:	4013      	ands	r3, r2
 80051f8:	d01d      	beq.n	8005236 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <UART_AdvFeatureConfig+0x15c>)
 8005202:	4013      	ands	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	035b      	lsls	r3, r3, #13
 800521a:	429a      	cmp	r2, r3
 800521c:	d10b      	bne.n	8005236 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4a15      	ldr	r2, [pc, #84]	; (800527c <UART_AdvFeatureConfig+0x160>)
 8005226:	4013      	ands	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	4013      	ands	r3, r2
 800523e:	d00b      	beq.n	8005258 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4a0e      	ldr	r2, [pc, #56]	; (8005280 <UART_AdvFeatureConfig+0x164>)
 8005248:	4013      	ands	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b002      	add	sp, #8
 800525e:	bd80      	pop	{r7, pc}
 8005260:	fffdffff 	.word	0xfffdffff
 8005264:	fffeffff 	.word	0xfffeffff
 8005268:	fffbffff 	.word	0xfffbffff
 800526c:	ffff7fff 	.word	0xffff7fff
 8005270:	ffffefff 	.word	0xffffefff
 8005274:	ffffdfff 	.word	0xffffdfff
 8005278:	ffefffff 	.word	0xffefffff
 800527c:	ff9fffff 	.word	0xff9fffff
 8005280:	fff7ffff 	.word	0xfff7ffff

08005284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b092      	sub	sp, #72	; 0x48
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2284      	movs	r2, #132	; 0x84
 8005290:	2100      	movs	r1, #0
 8005292:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005294:	f7fd f852 	bl	800233c <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2208      	movs	r2, #8
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d12c      	bne.n	8005304 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	2280      	movs	r2, #128	; 0x80
 80052ae:	0391      	lsls	r1, r2, #14
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4a46      	ldr	r2, [pc, #280]	; (80053cc <UART_CheckIdleState+0x148>)
 80052b4:	9200      	str	r2, [sp, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f000 f88c 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 80052bc:	1e03      	subs	r3, r0, #0
 80052be:	d021      	beq.n	8005304 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ca:	2301      	movs	r3, #1
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	438a      	bics	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2278      	movs	r2, #120	; 0x78
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e05f      	b.n	80053c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2204      	movs	r2, #4
 800530c:	4013      	ands	r3, r2
 800530e:	2b04      	cmp	r3, #4
 8005310:	d146      	bne.n	80053a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2280      	movs	r2, #128	; 0x80
 8005316:	03d1      	lsls	r1, r2, #15
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <UART_CheckIdleState+0x148>)
 800531c:	9200      	str	r2, [sp, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	f000 f858 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8005324:	1e03      	subs	r3, r0, #0
 8005326:	d03b      	beq.n	80053a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005328:	f3ef 8310 	mrs	r3, PRIMASK
 800532c:	60fb      	str	r3, [r7, #12]
  return(result);
 800532e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	2301      	movs	r3, #1
 8005334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f383 8810 	msr	PRIMASK, r3
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4921      	ldr	r1, [pc, #132]	; (80053d0 <UART_CheckIdleState+0x14c>)
 800534a:	400a      	ands	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f383 8810 	msr	PRIMASK, r3
}
 8005358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535a:	f3ef 8310 	mrs	r3, PRIMASK
 800535e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005360:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
 8005364:	2301      	movs	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f383 8810 	msr	PRIMASK, r3
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2101      	movs	r1, #1
 800537c:	438a      	bics	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	f383 8810 	msr	PRIMASK, r3
}
 800538a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	2120      	movs	r1, #32
 8005392:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2278      	movs	r2, #120	; 0x78
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e011      	b.n	80053c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	2120      	movs	r1, #32
 80053ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2278      	movs	r2, #120	; 0x78
 80053be:	2100      	movs	r1, #0
 80053c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b010      	add	sp, #64	; 0x40
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	01ffffff 	.word	0x01ffffff
 80053d0:	fffffedf 	.word	0xfffffedf

080053d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	1dfb      	adds	r3, r7, #7
 80053e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	e04b      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3301      	adds	r3, #1
 80053ea:	d048      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ec:	f7fc ffa6 	bl	800233c <HAL_GetTick>
 80053f0:	0002      	movs	r2, r0
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <UART_WaitOnFlagUntilTimeout+0x2e>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e04b      	b.n	800549e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2204      	movs	r2, #4
 800540e:	4013      	ands	r3, r2
 8005410:	d035      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2208      	movs	r2, #8
 800541a:	4013      	ands	r3, r2
 800541c:	2b08      	cmp	r3, #8
 800541e:	d111      	bne.n	8005444 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	0018      	movs	r0, r3
 800542c:	f000 f906 	bl	800563c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2284      	movs	r2, #132	; 0x84
 8005434:	2108      	movs	r1, #8
 8005436:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2278      	movs	r2, #120	; 0x78
 800543c:	2100      	movs	r1, #0
 800543e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e02c      	b.n	800549e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	401a      	ands	r2, r3
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	429a      	cmp	r2, r3
 8005456:	d112      	bne.n	800547e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2280      	movs	r2, #128	; 0x80
 800545e:	0112      	lsls	r2, r2, #4
 8005460:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 f8e9 	bl	800563c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2284      	movs	r2, #132	; 0x84
 800546e:	2120      	movs	r1, #32
 8005470:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2278      	movs	r2, #120	; 0x78
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e00f      	b.n	800549e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	425a      	negs	r2, r3
 800548e:	4153      	adcs	r3, r2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	001a      	movs	r2, r3
 8005494:	1dfb      	adds	r3, r7, #7
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d0a4      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b090      	sub	sp, #64	; 0x40
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	1dbb      	adds	r3, r7, #6
 80054b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1dba      	adds	r2, r7, #6
 80054c0:	2158      	movs	r1, #88	; 0x58
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1dba      	adds	r2, r7, #6
 80054ca:	215a      	movs	r1, #90	; 0x5a
 80054cc:	8812      	ldrh	r2, [r2, #0]
 80054ce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	015b      	lsls	r3, r3, #5
 80054de:	429a      	cmp	r2, r3
 80054e0:	d10d      	bne.n	80054fe <UART_Start_Receive_IT+0x56>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <UART_Start_Receive_IT+0x4c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	225c      	movs	r2, #92	; 0x5c
 80054ee:	4950      	ldr	r1, [pc, #320]	; (8005630 <UART_Start_Receive_IT+0x188>)
 80054f0:	5299      	strh	r1, [r3, r2]
 80054f2:	e02e      	b.n	8005552 <UART_Start_Receive_IT+0xaa>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	225c      	movs	r2, #92	; 0x5c
 80054f8:	21ff      	movs	r1, #255	; 0xff
 80054fa:	5299      	strh	r1, [r3, r2]
 80054fc:	e029      	b.n	8005552 <UART_Start_Receive_IT+0xaa>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <UART_Start_Receive_IT+0x7a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <UART_Start_Receive_IT+0x70>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	225c      	movs	r2, #92	; 0x5c
 8005512:	21ff      	movs	r1, #255	; 0xff
 8005514:	5299      	strh	r1, [r3, r2]
 8005516:	e01c      	b.n	8005552 <UART_Start_Receive_IT+0xaa>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	225c      	movs	r2, #92	; 0x5c
 800551c:	217f      	movs	r1, #127	; 0x7f
 800551e:	5299      	strh	r1, [r3, r2]
 8005520:	e017      	b.n	8005552 <UART_Start_Receive_IT+0xaa>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	055b      	lsls	r3, r3, #21
 800552a:	429a      	cmp	r2, r3
 800552c:	d10d      	bne.n	800554a <UART_Start_Receive_IT+0xa2>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <UART_Start_Receive_IT+0x98>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	225c      	movs	r2, #92	; 0x5c
 800553a:	217f      	movs	r1, #127	; 0x7f
 800553c:	5299      	strh	r1, [r3, r2]
 800553e:	e008      	b.n	8005552 <UART_Start_Receive_IT+0xaa>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	225c      	movs	r2, #92	; 0x5c
 8005544:	213f      	movs	r1, #63	; 0x3f
 8005546:	5299      	strh	r1, [r3, r2]
 8005548:	e003      	b.n	8005552 <UART_Start_Receive_IT+0xaa>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	225c      	movs	r2, #92	; 0x5c
 800554e:	2100      	movs	r1, #0
 8005550:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2284      	movs	r2, #132	; 0x84
 8005556:	2100      	movs	r1, #0
 8005558:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	2122      	movs	r1, #34	; 0x22
 8005560:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005562:	f3ef 8310 	mrs	r3, PRIMASK
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	2301      	movs	r3, #1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2101      	movs	r1, #1
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	f383 8810 	msr	PRIMASK, r3
}
 8005592:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	429a      	cmp	r2, r3
 800559e:	d107      	bne.n	80055b0 <UART_Start_Receive_IT+0x108>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a22      	ldr	r2, [pc, #136]	; (8005634 <UART_Start_Receive_IT+0x18c>)
 80055ac:	669a      	str	r2, [r3, #104]	; 0x68
 80055ae:	e002      	b.n	80055b6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a21      	ldr	r2, [pc, #132]	; (8005638 <UART_Start_Receive_IT+0x190>)
 80055b4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d019      	beq.n	80055f2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80055c4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	2301      	movs	r3, #1
 80055ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2190      	movs	r1, #144	; 0x90
 80055e0:	0049      	lsls	r1, r1, #1
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	e018      	b.n	8005624 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f2:	f3ef 8310 	mrs	r3, PRIMASK
 80055f6:	613b      	str	r3, [r7, #16]
  return(result);
 80055f8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f383 8810 	msr	PRIMASK, r3
}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2120      	movs	r1, #32
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f383 8810 	msr	PRIMASK, r3
}
 8005622:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	b010      	add	sp, #64	; 0x40
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	000001ff 	.word	0x000001ff
 8005634:	0800594d 	.word	0x0800594d
 8005638:	08005789 	.word	0x08005789

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08e      	sub	sp, #56	; 0x38
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005644:	f3ef 8310 	mrs	r3, PRIMASK
 8005648:	617b      	str	r3, [r7, #20]
  return(result);
 800564a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
 800564e:	2301      	movs	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f383 8810 	msr	PRIMASK, r3
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4926      	ldr	r1, [pc, #152]	; (8005700 <UART_EndRxTransfer+0xc4>)
 8005666:	400a      	ands	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f383 8810 	msr	PRIMASK, r3
}
 8005674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005676:	f3ef 8310 	mrs	r3, PRIMASK
 800567a:	623b      	str	r3, [r7, #32]
  return(result);
 800567c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	633b      	str	r3, [r7, #48]	; 0x30
 8005680:	2301      	movs	r3, #1
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	f383 8810 	msr	PRIMASK, r3
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2101      	movs	r1, #1
 8005698:	438a      	bics	r2, r1
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	f383 8810 	msr	PRIMASK, r3
}
 80056a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d118      	bne.n	80056e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b0:	f3ef 8310 	mrs	r3, PRIMASK
 80056b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ba:	2301      	movs	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f383 8810 	msr	PRIMASK, r3
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2110      	movs	r1, #16
 80056d2:	438a      	bics	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	2120      	movs	r1, #32
 80056e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b00e      	add	sp, #56	; 0x38
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	fffffedf 	.word	0xfffffedf

08005704 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	225a      	movs	r2, #90	; 0x5a
 8005716:	2100      	movs	r1, #0
 8005718:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2252      	movs	r2, #82	; 0x52
 800571e:	2100      	movs	r1, #0
 8005720:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff fa9b 	bl	8004c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573a:	f3ef 8310 	mrs	r3, PRIMASK
 800573e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005740:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	2301      	movs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2140      	movs	r1, #64	; 0x40
 800575c:	438a      	bics	r2, r1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f383 8810 	msr	PRIMASK, r3
}
 800576a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	0018      	movs	r0, r3
 800577c:	f7ff fa68 	bl	8004c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b006      	add	sp, #24
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b094      	sub	sp, #80	; 0x50
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005790:	204e      	movs	r0, #78	; 0x4e
 8005792:	183b      	adds	r3, r7, r0
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	215c      	movs	r1, #92	; 0x5c
 8005798:	5a52      	ldrh	r2, [r2, r1]
 800579a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	589b      	ldr	r3, [r3, r2]
 80057a2:	2b22      	cmp	r3, #34	; 0x22
 80057a4:	d000      	beq.n	80057a8 <UART_RxISR_8BIT+0x20>
 80057a6:	e0bf      	b.n	8005928 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ae:	214c      	movs	r1, #76	; 0x4c
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	183b      	adds	r3, r7, r0
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b2d9      	uxtb	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	400a      	ands	r2, r1
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	225a      	movs	r2, #90	; 0x5a
 80057d8:	5a9b      	ldrh	r3, [r3, r2]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b299      	uxth	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	225a      	movs	r2, #90	; 0x5a
 80057e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	225a      	movs	r2, #90	; 0x5a
 80057ea:	5a9b      	ldrh	r3, [r3, r2]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d000      	beq.n	80057f4 <UART_RxISR_8BIT+0x6c>
 80057f2:	e0a1      	b.n	8005938 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f4:	f3ef 8310 	mrs	r3, PRIMASK
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80057fe:	2301      	movs	r3, #1
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	f383 8810 	msr	PRIMASK, r3
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	494a      	ldr	r1, [pc, #296]	; (8005940 <UART_RxISR_8BIT+0x1b8>)
 8005816:	400a      	ands	r2, r1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	f383 8810 	msr	PRIMASK, r3
}
 8005824:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005826:	f3ef 8310 	mrs	r3, PRIMASK
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
 8005830:	2301      	movs	r3, #1
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	f383 8810 	msr	PRIMASK, r3
}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2101      	movs	r1, #1
 8005848:	438a      	bics	r2, r1
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	f383 8810 	msr	PRIMASK, r3
}
 8005856:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2280      	movs	r2, #128	; 0x80
 800585c:	2120      	movs	r1, #32
 800585e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a34      	ldr	r2, [pc, #208]	; (8005944 <UART_RxISR_8BIT+0x1bc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01f      	beq.n	80058b6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	4013      	ands	r3, r2
 8005882:	d018      	beq.n	80058b6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005884:	f3ef 8310 	mrs	r3, PRIMASK
 8005888:	61bb      	str	r3, [r7, #24]
  return(result);
 800588a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800588c:	643b      	str	r3, [r7, #64]	; 0x40
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4928      	ldr	r1, [pc, #160]	; (8005948 <UART_RxISR_8BIT+0x1c0>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d12f      	bne.n	800591e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c4:	f3ef 8310 	mrs	r3, PRIMASK
 80058c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ce:	2301      	movs	r3, #1
 80058d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f383 8810 	msr	PRIMASK, r3
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2110      	movs	r1, #16
 80058e6:	438a      	bics	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f383 8810 	msr	PRIMASK, r3
}
 80058f4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2210      	movs	r2, #16
 80058fe:	4013      	ands	r3, r2
 8005900:	2b10      	cmp	r3, #16
 8005902:	d103      	bne.n	800590c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2210      	movs	r2, #16
 800590a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2258      	movs	r2, #88	; 0x58
 8005910:	5a9a      	ldrh	r2, [r3, r2]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	0011      	movs	r1, r2
 8005916:	0018      	movs	r0, r3
 8005918:	f7ff f9aa 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800591c:	e00c      	b.n	8005938 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f7fc fa8d 	bl	8001e40 <HAL_UART_RxCpltCallback>
}
 8005926:	e007      	b.n	8005938 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2108      	movs	r1, #8
 8005934:	430a      	orrs	r2, r1
 8005936:	619a      	str	r2, [r3, #24]
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	b014      	add	sp, #80	; 0x50
 800593e:	bd80      	pop	{r7, pc}
 8005940:	fffffedf 	.word	0xfffffedf
 8005944:	40004800 	.word	0x40004800
 8005948:	fbffffff 	.word	0xfbffffff

0800594c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b094      	sub	sp, #80	; 0x50
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005954:	204e      	movs	r0, #78	; 0x4e
 8005956:	183b      	adds	r3, r7, r0
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	215c      	movs	r1, #92	; 0x5c
 800595c:	5a52      	ldrh	r2, [r2, r1]
 800595e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	589b      	ldr	r3, [r3, r2]
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	d000      	beq.n	800596c <UART_RxISR_16BIT+0x20>
 800596a:	e0bf      	b.n	8005aec <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005972:	214c      	movs	r1, #76	; 0x4c
 8005974:	187b      	adds	r3, r7, r1
 8005976:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800597e:	187b      	adds	r3, r7, r1
 8005980:	183a      	adds	r2, r7, r0
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	8812      	ldrh	r2, [r2, #0]
 8005986:	4013      	ands	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	225a      	movs	r2, #90	; 0x5a
 800599c:	5a9b      	ldrh	r3, [r3, r2]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b299      	uxth	r1, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	225a      	movs	r2, #90	; 0x5a
 80059a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	225a      	movs	r2, #90	; 0x5a
 80059ae:	5a9b      	ldrh	r3, [r3, r2]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d000      	beq.n	80059b8 <UART_RxISR_16BIT+0x6c>
 80059b6:	e0a1      	b.n	8005afc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b8:	f3ef 8310 	mrs	r3, PRIMASK
 80059bc:	623b      	str	r3, [r7, #32]
  return(result);
 80059be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
 80059c2:	2301      	movs	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	f383 8810 	msr	PRIMASK, r3
}
 80059cc:	46c0      	nop			; (mov r8, r8)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	494a      	ldr	r1, [pc, #296]	; (8005b04 <UART_RxISR_16BIT+0x1b8>)
 80059da:	400a      	ands	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	f383 8810 	msr	PRIMASK, r3
}
 80059e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8310 	mrs	r3, PRIMASK
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
 80059f4:	2301      	movs	r3, #1
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	438a      	bics	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2280      	movs	r2, #128	; 0x80
 8005a20:	2120      	movs	r1, #32
 8005a22:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a34      	ldr	r2, [pc, #208]	; (8005b08 <UART_RxISR_16BIT+0x1bc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01f      	beq.n	8005a7a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	4013      	ands	r3, r2
 8005a46:	d018      	beq.n	8005a7a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a48:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a4e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a52:	2301      	movs	r3, #1
 8005a54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f383 8810 	msr	PRIMASK, r3
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4928      	ldr	r1, [pc, #160]	; (8005b0c <UART_RxISR_16BIT+0x1c0>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f383 8810 	msr	PRIMASK, r3
}
 8005a78:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d12f      	bne.n	8005ae2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a8e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a92:	2301      	movs	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2110      	movs	r1, #16
 8005aaa:	438a      	bics	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f383 8810 	msr	PRIMASK, r3
}
 8005ab8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d103      	bne.n	8005ad0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2210      	movs	r2, #16
 8005ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2258      	movs	r2, #88	; 0x58
 8005ad4:	5a9a      	ldrh	r2, [r3, r2]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7ff f8c8 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae0:	e00c      	b.n	8005afc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fc f9ab 	bl	8001e40 <HAL_UART_RxCpltCallback>
}
 8005aea:	e007      	b.n	8005afc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2108      	movs	r1, #8
 8005af8:	430a      	orrs	r2, r1
 8005afa:	619a      	str	r2, [r3, #24]
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b014      	add	sp, #80	; 0x50
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	fffffedf 	.word	0xfffffedf
 8005b08:	40004800 	.word	0x40004800
 8005b0c:	fbffffff 	.word	0xfbffffff

08005b10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <atoi>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	220a      	movs	r2, #10
 8005b24:	2100      	movs	r1, #0
 8005b26:	f000 f9bb 	bl	8005ea0 <strtol>
 8005b2a:	bd10      	pop	{r4, pc}

08005b2c <__errno>:
 8005b2c:	4b01      	ldr	r3, [pc, #4]	; (8005b34 <__errno+0x8>)
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	4770      	bx	lr
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	2000001c 	.word	0x2000001c

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	4d0c      	ldr	r5, [pc, #48]	; (8005b70 <__libc_init_array+0x38>)
 8005b3e:	4c0d      	ldr	r4, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	2600      	movs	r6, #0
 8005b4a:	f001 f9fd 	bl	8006f48 <_init>
 8005b4e:	4d0a      	ldr	r5, [pc, #40]	; (8005b78 <__libc_init_array+0x40>)
 8005b50:	4c0a      	ldr	r4, [pc, #40]	; (8005b7c <__libc_init_array+0x44>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	00b3      	lsls	r3, r6, #2
 8005b5e:	58eb      	ldr	r3, [r5, r3]
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	00b3      	lsls	r3, r6, #2
 8005b68:	58eb      	ldr	r3, [r5, r3]
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08007490 	.word	0x08007490
 8005b74:	08007490 	.word	0x08007490
 8005b78:	08007490 	.word	0x08007490
 8005b7c:	08007494 	.word	0x08007494

08005b80 <memset>:
 8005b80:	0003      	movs	r3, r0
 8005b82:	1882      	adds	r2, r0, r2
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d100      	bne.n	8005b8a <memset+0xa>
 8005b88:	4770      	bx	lr
 8005b8a:	7019      	strb	r1, [r3, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	e7f9      	b.n	8005b84 <memset+0x4>

08005b90 <iprintf>:
 8005b90:	b40f      	push	{r0, r1, r2, r3}
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <iprintf+0x30>)
 8005b94:	b513      	push	{r0, r1, r4, lr}
 8005b96:	681c      	ldr	r4, [r3, #0]
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	d005      	beq.n	8005ba8 <iprintf+0x18>
 8005b9c:	69a3      	ldr	r3, [r4, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <iprintf+0x18>
 8005ba2:	0020      	movs	r0, r4
 8005ba4:	f000 fba2 	bl	80062ec <__sinit>
 8005ba8:	ab05      	add	r3, sp, #20
 8005baa:	0020      	movs	r0, r4
 8005bac:	9a04      	ldr	r2, [sp, #16]
 8005bae:	68a1      	ldr	r1, [r4, #8]
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	f000 fdcf 	bl	8006754 <_vfiprintf_r>
 8005bb6:	bc16      	pop	{r1, r2, r4}
 8005bb8:	bc08      	pop	{r3}
 8005bba:	b004      	add	sp, #16
 8005bbc:	4718      	bx	r3
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	2000001c 	.word	0x2000001c

08005bc4 <_puts_r>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	0005      	movs	r5, r0
 8005bc8:	000e      	movs	r6, r1
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d004      	beq.n	8005bd8 <_puts_r+0x14>
 8005bce:	6983      	ldr	r3, [r0, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <_puts_r+0x14>
 8005bd4:	f000 fb8a 	bl	80062ec <__sinit>
 8005bd8:	69ab      	ldr	r3, [r5, #24]
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <_puts_r+0x22>
 8005be0:	0028      	movs	r0, r5
 8005be2:	f000 fb83 	bl	80062ec <__sinit>
 8005be6:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <_puts_r+0xd8>)
 8005be8:	429c      	cmp	r4, r3
 8005bea:	d122      	bne.n	8005c32 <_puts_r+0x6e>
 8005bec:	686c      	ldr	r4, [r5, #4]
 8005bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf0:	07db      	lsls	r3, r3, #31
 8005bf2:	d405      	bmi.n	8005c00 <_puts_r+0x3c>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	059b      	lsls	r3, r3, #22
 8005bf8:	d402      	bmi.n	8005c00 <_puts_r+0x3c>
 8005bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfc:	f000 fc27 	bl	800644e <__retarget_lock_acquire_recursive>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	071b      	lsls	r3, r3, #28
 8005c04:	d502      	bpl.n	8005c0c <_puts_r+0x48>
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d129      	bne.n	8005c60 <_puts_r+0x9c>
 8005c0c:	0021      	movs	r1, r4
 8005c0e:	0028      	movs	r0, r5
 8005c10:	f000 f9a8 	bl	8005f64 <__swsetup_r>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d023      	beq.n	8005c60 <_puts_r+0x9c>
 8005c18:	2501      	movs	r5, #1
 8005c1a:	426d      	negs	r5, r5
 8005c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d405      	bmi.n	8005c2e <_puts_r+0x6a>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	059b      	lsls	r3, r3, #22
 8005c26:	d402      	bmi.n	8005c2e <_puts_r+0x6a>
 8005c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2a:	f000 fc11 	bl	8006450 <__retarget_lock_release_recursive>
 8005c2e:	0028      	movs	r0, r5
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <_puts_r+0xdc>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	d101      	bne.n	8005c3c <_puts_r+0x78>
 8005c38:	68ac      	ldr	r4, [r5, #8]
 8005c3a:	e7d8      	b.n	8005bee <_puts_r+0x2a>
 8005c3c:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <_puts_r+0xe0>)
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	d1d5      	bne.n	8005bee <_puts_r+0x2a>
 8005c42:	68ec      	ldr	r4, [r5, #12]
 8005c44:	e7d3      	b.n	8005bee <_puts_r+0x2a>
 8005c46:	3601      	adds	r6, #1
 8005c48:	60a3      	str	r3, [r4, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da04      	bge.n	8005c58 <_puts_r+0x94>
 8005c4e:	69a2      	ldr	r2, [r4, #24]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	dc16      	bgt.n	8005c82 <_puts_r+0xbe>
 8005c54:	290a      	cmp	r1, #10
 8005c56:	d014      	beq.n	8005c82 <_puts_r+0xbe>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	7019      	strb	r1, [r3, #0]
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	7831      	ldrb	r1, [r6, #0]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d1ed      	bne.n	8005c46 <_puts_r+0x82>
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da0f      	bge.n	8005c90 <_puts_r+0xcc>
 8005c70:	0028      	movs	r0, r5
 8005c72:	0022      	movs	r2, r4
 8005c74:	310a      	adds	r1, #10
 8005c76:	f000 f91f 	bl	8005eb8 <__swbuf_r>
 8005c7a:	250a      	movs	r5, #10
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d1cd      	bne.n	8005c1c <_puts_r+0x58>
 8005c80:	e7ca      	b.n	8005c18 <_puts_r+0x54>
 8005c82:	0022      	movs	r2, r4
 8005c84:	0028      	movs	r0, r5
 8005c86:	f000 f917 	bl	8005eb8 <__swbuf_r>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d1e8      	bne.n	8005c60 <_puts_r+0x9c>
 8005c8e:	e7c3      	b.n	8005c18 <_puts_r+0x54>
 8005c90:	250a      	movs	r5, #10
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	701d      	strb	r5, [r3, #0]
 8005c9a:	e7bf      	b.n	8005c1c <_puts_r+0x58>
 8005c9c:	08007414 	.word	0x08007414
 8005ca0:	08007434 	.word	0x08007434
 8005ca4:	080073f4 	.word	0x080073f4

08005ca8 <puts>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <puts+0x10>)
 8005cac:	0001      	movs	r1, r0
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	f7ff ff88 	bl	8005bc4 <_puts_r>
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	2000001c 	.word	0x2000001c

08005cbc <strtok>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <strtok+0x5c>)
 8005cc0:	0005      	movs	r5, r0
 8005cc2:	681f      	ldr	r7, [r3, #0]
 8005cc4:	000e      	movs	r6, r1
 8005cc6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	d11d      	bne.n	8005d08 <strtok+0x4c>
 8005ccc:	2050      	movs	r0, #80	; 0x50
 8005cce:	f000 fc2d 	bl	800652c <malloc>
 8005cd2:	1e02      	subs	r2, r0, #0
 8005cd4:	65b8      	str	r0, [r7, #88]	; 0x58
 8005cd6:	d104      	bne.n	8005ce2 <strtok+0x26>
 8005cd8:	2157      	movs	r1, #87	; 0x57
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <strtok+0x60>)
 8005cdc:	4810      	ldr	r0, [pc, #64]	; (8005d20 <strtok+0x64>)
 8005cde:	f000 f9b9 	bl	8006054 <__assert_func>
 8005ce2:	6004      	str	r4, [r0, #0]
 8005ce4:	6044      	str	r4, [r0, #4]
 8005ce6:	6084      	str	r4, [r0, #8]
 8005ce8:	60c4      	str	r4, [r0, #12]
 8005cea:	6104      	str	r4, [r0, #16]
 8005cec:	6144      	str	r4, [r0, #20]
 8005cee:	6184      	str	r4, [r0, #24]
 8005cf0:	6284      	str	r4, [r0, #40]	; 0x28
 8005cf2:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005cf4:	6304      	str	r4, [r0, #48]	; 0x30
 8005cf6:	6344      	str	r4, [r0, #52]	; 0x34
 8005cf8:	6384      	str	r4, [r0, #56]	; 0x38
 8005cfa:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005cfc:	6404      	str	r4, [r0, #64]	; 0x40
 8005cfe:	6444      	str	r4, [r0, #68]	; 0x44
 8005d00:	6484      	str	r4, [r0, #72]	; 0x48
 8005d02:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005d04:	7704      	strb	r4, [r0, #28]
 8005d06:	6244      	str	r4, [r0, #36]	; 0x24
 8005d08:	0031      	movs	r1, r6
 8005d0a:	0028      	movs	r0, r5
 8005d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f000 f808 	bl	8005d24 <__strtok_r>
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	2000001c 	.word	0x2000001c
 8005d1c:	08007240 	.word	0x08007240
 8005d20:	08007257 	.word	0x08007257

08005d24 <__strtok_r>:
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d102      	bne.n	8005d30 <__strtok_r+0xc>
 8005d2a:	6810      	ldr	r0, [r2, #0]
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d013      	beq.n	8005d58 <__strtok_r+0x34>
 8005d30:	0004      	movs	r4, r0
 8005d32:	0020      	movs	r0, r4
 8005d34:	000e      	movs	r6, r1
 8005d36:	7805      	ldrb	r5, [r0, #0]
 8005d38:	3401      	adds	r4, #1
 8005d3a:	7837      	ldrb	r7, [r6, #0]
 8005d3c:	2f00      	cmp	r7, #0
 8005d3e:	d104      	bne.n	8005d4a <__strtok_r+0x26>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	d10f      	bne.n	8005d64 <__strtok_r+0x40>
 8005d44:	0028      	movs	r0, r5
 8005d46:	6015      	str	r5, [r2, #0]
 8005d48:	e006      	b.n	8005d58 <__strtok_r+0x34>
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	42bd      	cmp	r5, r7
 8005d4e:	d1f4      	bne.n	8005d3a <__strtok_r+0x16>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1ee      	bne.n	8005d32 <__strtok_r+0xe>
 8005d54:	6014      	str	r4, [r2, #0]
 8005d56:	7003      	strb	r3, [r0, #0]
 8005d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d5a:	002f      	movs	r7, r5
 8005d5c:	e00f      	b.n	8005d7e <__strtok_r+0x5a>
 8005d5e:	3301      	adds	r3, #1
 8005d60:	2e00      	cmp	r6, #0
 8005d62:	d104      	bne.n	8005d6e <__strtok_r+0x4a>
 8005d64:	0023      	movs	r3, r4
 8005d66:	3401      	adds	r4, #1
 8005d68:	781d      	ldrb	r5, [r3, #0]
 8005d6a:	0027      	movs	r7, r4
 8005d6c:	000b      	movs	r3, r1
 8005d6e:	781e      	ldrb	r6, [r3, #0]
 8005d70:	42b5      	cmp	r5, r6
 8005d72:	d1f4      	bne.n	8005d5e <__strtok_r+0x3a>
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	d0f0      	beq.n	8005d5a <__strtok_r+0x36>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	3c01      	subs	r4, #1
 8005d7c:	7023      	strb	r3, [r4, #0]
 8005d7e:	6017      	str	r7, [r2, #0]
 8005d80:	e7ea      	b.n	8005d58 <__strtok_r+0x34>
	...

08005d84 <_strtol_l.constprop.0>:
 8005d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d86:	b087      	sub	sp, #28
 8005d88:	001e      	movs	r6, r3
 8005d8a:	9005      	str	r0, [sp, #20]
 8005d8c:	9101      	str	r1, [sp, #4]
 8005d8e:	9202      	str	r2, [sp, #8]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d045      	beq.n	8005e20 <_strtol_l.constprop.0+0x9c>
 8005d94:	000b      	movs	r3, r1
 8005d96:	2e24      	cmp	r6, #36	; 0x24
 8005d98:	d842      	bhi.n	8005e20 <_strtol_l.constprop.0+0x9c>
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	; (8005e98 <_strtol_l.constprop.0+0x114>)
 8005d9c:	2108      	movs	r1, #8
 8005d9e:	4694      	mov	ip, r2
 8005da0:	001a      	movs	r2, r3
 8005da2:	4660      	mov	r0, ip
 8005da4:	7814      	ldrb	r4, [r2, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	5d00      	ldrb	r0, [r0, r4]
 8005daa:	001d      	movs	r5, r3
 8005dac:	0007      	movs	r7, r0
 8005dae:	400f      	ands	r7, r1
 8005db0:	4208      	tst	r0, r1
 8005db2:	d1f5      	bne.n	8005da0 <_strtol_l.constprop.0+0x1c>
 8005db4:	2c2d      	cmp	r4, #45	; 0x2d
 8005db6:	d13a      	bne.n	8005e2e <_strtol_l.constprop.0+0xaa>
 8005db8:	2701      	movs	r7, #1
 8005dba:	781c      	ldrb	r4, [r3, #0]
 8005dbc:	1c95      	adds	r5, r2, #2
 8005dbe:	2e00      	cmp	r6, #0
 8005dc0:	d065      	beq.n	8005e8e <_strtol_l.constprop.0+0x10a>
 8005dc2:	2e10      	cmp	r6, #16
 8005dc4:	d109      	bne.n	8005dda <_strtol_l.constprop.0+0x56>
 8005dc6:	2c30      	cmp	r4, #48	; 0x30
 8005dc8:	d107      	bne.n	8005dda <_strtol_l.constprop.0+0x56>
 8005dca:	2220      	movs	r2, #32
 8005dcc:	782b      	ldrb	r3, [r5, #0]
 8005dce:	4393      	bics	r3, r2
 8005dd0:	2b58      	cmp	r3, #88	; 0x58
 8005dd2:	d157      	bne.n	8005e84 <_strtol_l.constprop.0+0x100>
 8005dd4:	2610      	movs	r6, #16
 8005dd6:	786c      	ldrb	r4, [r5, #1]
 8005dd8:	3502      	adds	r5, #2
 8005dda:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <_strtol_l.constprop.0+0x118>)
 8005ddc:	0031      	movs	r1, r6
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	0018      	movs	r0, r3
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	f7fa fa2a 	bl	800023c <__aeabi_uidivmod>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2201      	movs	r2, #1
 8005dec:	4684      	mov	ip, r0
 8005dee:	0018      	movs	r0, r3
 8005df0:	9104      	str	r1, [sp, #16]
 8005df2:	4252      	negs	r2, r2
 8005df4:	0021      	movs	r1, r4
 8005df6:	3930      	subs	r1, #48	; 0x30
 8005df8:	2909      	cmp	r1, #9
 8005dfa:	d81d      	bhi.n	8005e38 <_strtol_l.constprop.0+0xb4>
 8005dfc:	000c      	movs	r4, r1
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	dd28      	ble.n	8005e54 <_strtol_l.constprop.0+0xd0>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	db24      	blt.n	8005e50 <_strtol_l.constprop.0+0xcc>
 8005e06:	0013      	movs	r3, r2
 8005e08:	4584      	cmp	ip, r0
 8005e0a:	d306      	bcc.n	8005e1a <_strtol_l.constprop.0+0x96>
 8005e0c:	d102      	bne.n	8005e14 <_strtol_l.constprop.0+0x90>
 8005e0e:	9904      	ldr	r1, [sp, #16]
 8005e10:	42a1      	cmp	r1, r4
 8005e12:	db02      	blt.n	8005e1a <_strtol_l.constprop.0+0x96>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4370      	muls	r0, r6
 8005e18:	1820      	adds	r0, r4, r0
 8005e1a:	782c      	ldrb	r4, [r5, #0]
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	e7e9      	b.n	8005df4 <_strtol_l.constprop.0+0x70>
 8005e20:	f7ff fe84 	bl	8005b2c <__errno>
 8005e24:	2316      	movs	r3, #22
 8005e26:	6003      	str	r3, [r0, #0]
 8005e28:	2000      	movs	r0, #0
 8005e2a:	b007      	add	sp, #28
 8005e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2e:	2c2b      	cmp	r4, #43	; 0x2b
 8005e30:	d1c5      	bne.n	8005dbe <_strtol_l.constprop.0+0x3a>
 8005e32:	781c      	ldrb	r4, [r3, #0]
 8005e34:	1c95      	adds	r5, r2, #2
 8005e36:	e7c2      	b.n	8005dbe <_strtol_l.constprop.0+0x3a>
 8005e38:	0021      	movs	r1, r4
 8005e3a:	3941      	subs	r1, #65	; 0x41
 8005e3c:	2919      	cmp	r1, #25
 8005e3e:	d801      	bhi.n	8005e44 <_strtol_l.constprop.0+0xc0>
 8005e40:	3c37      	subs	r4, #55	; 0x37
 8005e42:	e7dc      	b.n	8005dfe <_strtol_l.constprop.0+0x7a>
 8005e44:	0021      	movs	r1, r4
 8005e46:	3961      	subs	r1, #97	; 0x61
 8005e48:	2919      	cmp	r1, #25
 8005e4a:	d803      	bhi.n	8005e54 <_strtol_l.constprop.0+0xd0>
 8005e4c:	3c57      	subs	r4, #87	; 0x57
 8005e4e:	e7d6      	b.n	8005dfe <_strtol_l.constprop.0+0x7a>
 8005e50:	0013      	movs	r3, r2
 8005e52:	e7e2      	b.n	8005e1a <_strtol_l.constprop.0+0x96>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da09      	bge.n	8005e6c <_strtol_l.constprop.0+0xe8>
 8005e58:	2322      	movs	r3, #34	; 0x22
 8005e5a:	9a05      	ldr	r2, [sp, #20]
 8005e5c:	9803      	ldr	r0, [sp, #12]
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	9b02      	ldr	r3, [sp, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0e1      	beq.n	8005e2a <_strtol_l.constprop.0+0xa6>
 8005e66:	1e6b      	subs	r3, r5, #1
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	e007      	b.n	8005e7c <_strtol_l.constprop.0+0xf8>
 8005e6c:	2f00      	cmp	r7, #0
 8005e6e:	d000      	beq.n	8005e72 <_strtol_l.constprop.0+0xee>
 8005e70:	4240      	negs	r0, r0
 8005e72:	9a02      	ldr	r2, [sp, #8]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d0d8      	beq.n	8005e2a <_strtol_l.constprop.0+0xa6>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f4      	bne.n	8005e66 <_strtol_l.constprop.0+0xe2>
 8005e7c:	9b02      	ldr	r3, [sp, #8]
 8005e7e:	9a01      	ldr	r2, [sp, #4]
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e7d2      	b.n	8005e2a <_strtol_l.constprop.0+0xa6>
 8005e84:	2430      	movs	r4, #48	; 0x30
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	d1a7      	bne.n	8005dda <_strtol_l.constprop.0+0x56>
 8005e8a:	3608      	adds	r6, #8
 8005e8c:	e7a5      	b.n	8005dda <_strtol_l.constprop.0+0x56>
 8005e8e:	2c30      	cmp	r4, #48	; 0x30
 8005e90:	d09b      	beq.n	8005dca <_strtol_l.constprop.0+0x46>
 8005e92:	260a      	movs	r6, #10
 8005e94:	e7a1      	b.n	8005dda <_strtol_l.constprop.0+0x56>
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	080072f1 	.word	0x080072f1
 8005e9c:	7fffffff 	.word	0x7fffffff

08005ea0 <strtol>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	0013      	movs	r3, r2
 8005ea4:	000a      	movs	r2, r1
 8005ea6:	0001      	movs	r1, r0
 8005ea8:	4802      	ldr	r0, [pc, #8]	; (8005eb4 <strtol+0x14>)
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	f7ff ff6a 	bl	8005d84 <_strtol_l.constprop.0>
 8005eb0:	bd10      	pop	{r4, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	2000001c 	.word	0x2000001c

08005eb8 <__swbuf_r>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	0005      	movs	r5, r0
 8005ebc:	000e      	movs	r6, r1
 8005ebe:	0014      	movs	r4, r2
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d004      	beq.n	8005ece <__swbuf_r+0x16>
 8005ec4:	6983      	ldr	r3, [r0, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <__swbuf_r+0x16>
 8005eca:	f000 fa0f 	bl	80062ec <__sinit>
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <__swbuf_r+0xa0>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	d12e      	bne.n	8005f32 <__swbuf_r+0x7a>
 8005ed4:	686c      	ldr	r4, [r5, #4]
 8005ed6:	69a3      	ldr	r3, [r4, #24]
 8005ed8:	60a3      	str	r3, [r4, #8]
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	d532      	bpl.n	8005f46 <__swbuf_r+0x8e>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02f      	beq.n	8005f46 <__swbuf_r+0x8e>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	6922      	ldr	r2, [r4, #16]
 8005eea:	b2f7      	uxtb	r7, r6
 8005eec:	1a98      	subs	r0, r3, r2
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	b2f6      	uxtb	r6, r6
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	dc05      	bgt.n	8005f02 <__swbuf_r+0x4a>
 8005ef6:	0021      	movs	r1, r4
 8005ef8:	0028      	movs	r0, r5
 8005efa:	f000 f955 	bl	80061a8 <_fflush_r>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d127      	bne.n	8005f52 <__swbuf_r+0x9a>
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	3001      	adds	r0, #1
 8005f06:	3b01      	subs	r3, #1
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	6022      	str	r2, [r4, #0]
 8005f10:	701f      	strb	r7, [r3, #0]
 8005f12:	6963      	ldr	r3, [r4, #20]
 8005f14:	4283      	cmp	r3, r0
 8005f16:	d004      	beq.n	8005f22 <__swbuf_r+0x6a>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	07db      	lsls	r3, r3, #31
 8005f1c:	d507      	bpl.n	8005f2e <__swbuf_r+0x76>
 8005f1e:	2e0a      	cmp	r6, #10
 8005f20:	d105      	bne.n	8005f2e <__swbuf_r+0x76>
 8005f22:	0021      	movs	r1, r4
 8005f24:	0028      	movs	r0, r5
 8005f26:	f000 f93f 	bl	80061a8 <_fflush_r>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d111      	bne.n	8005f52 <__swbuf_r+0x9a>
 8005f2e:	0030      	movs	r0, r6
 8005f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <__swbuf_r+0xa4>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d101      	bne.n	8005f3c <__swbuf_r+0x84>
 8005f38:	68ac      	ldr	r4, [r5, #8]
 8005f3a:	e7cc      	b.n	8005ed6 <__swbuf_r+0x1e>
 8005f3c:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <__swbuf_r+0xa8>)
 8005f3e:	429c      	cmp	r4, r3
 8005f40:	d1c9      	bne.n	8005ed6 <__swbuf_r+0x1e>
 8005f42:	68ec      	ldr	r4, [r5, #12]
 8005f44:	e7c7      	b.n	8005ed6 <__swbuf_r+0x1e>
 8005f46:	0021      	movs	r1, r4
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f000 f80b 	bl	8005f64 <__swsetup_r>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d0c9      	beq.n	8005ee6 <__swbuf_r+0x2e>
 8005f52:	2601      	movs	r6, #1
 8005f54:	4276      	negs	r6, r6
 8005f56:	e7ea      	b.n	8005f2e <__swbuf_r+0x76>
 8005f58:	08007414 	.word	0x08007414
 8005f5c:	08007434 	.word	0x08007434
 8005f60:	080073f4 	.word	0x080073f4

08005f64 <__swsetup_r>:
 8005f64:	4b37      	ldr	r3, [pc, #220]	; (8006044 <__swsetup_r+0xe0>)
 8005f66:	b570      	push	{r4, r5, r6, lr}
 8005f68:	681d      	ldr	r5, [r3, #0]
 8005f6a:	0006      	movs	r6, r0
 8005f6c:	000c      	movs	r4, r1
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	d005      	beq.n	8005f7e <__swsetup_r+0x1a>
 8005f72:	69ab      	ldr	r3, [r5, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <__swsetup_r+0x1a>
 8005f78:	0028      	movs	r0, r5
 8005f7a:	f000 f9b7 	bl	80062ec <__sinit>
 8005f7e:	4b32      	ldr	r3, [pc, #200]	; (8006048 <__swsetup_r+0xe4>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	d10f      	bne.n	8005fa4 <__swsetup_r+0x40>
 8005f84:	686c      	ldr	r4, [r5, #4]
 8005f86:	230c      	movs	r3, #12
 8005f88:	5ee2      	ldrsh	r2, [r4, r3]
 8005f8a:	b293      	uxth	r3, r2
 8005f8c:	0711      	lsls	r1, r2, #28
 8005f8e:	d42d      	bmi.n	8005fec <__swsetup_r+0x88>
 8005f90:	06d9      	lsls	r1, r3, #27
 8005f92:	d411      	bmi.n	8005fb8 <__swsetup_r+0x54>
 8005f94:	2309      	movs	r3, #9
 8005f96:	2001      	movs	r0, #1
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	3337      	adds	r3, #55	; 0x37
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	4240      	negs	r0, r0
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	4b29      	ldr	r3, [pc, #164]	; (800604c <__swsetup_r+0xe8>)
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d101      	bne.n	8005fae <__swsetup_r+0x4a>
 8005faa:	68ac      	ldr	r4, [r5, #8]
 8005fac:	e7eb      	b.n	8005f86 <__swsetup_r+0x22>
 8005fae:	4b28      	ldr	r3, [pc, #160]	; (8006050 <__swsetup_r+0xec>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d1e8      	bne.n	8005f86 <__swsetup_r+0x22>
 8005fb4:	68ec      	ldr	r4, [r5, #12]
 8005fb6:	e7e6      	b.n	8005f86 <__swsetup_r+0x22>
 8005fb8:	075b      	lsls	r3, r3, #29
 8005fba:	d513      	bpl.n	8005fe4 <__swsetup_r+0x80>
 8005fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d008      	beq.n	8005fd4 <__swsetup_r+0x70>
 8005fc2:	0023      	movs	r3, r4
 8005fc4:	3344      	adds	r3, #68	; 0x44
 8005fc6:	4299      	cmp	r1, r3
 8005fc8:	d002      	beq.n	8005fd0 <__swsetup_r+0x6c>
 8005fca:	0030      	movs	r0, r6
 8005fcc:	f000 fab8 	bl	8006540 <_free_r>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	6363      	str	r3, [r4, #52]	; 0x34
 8005fd4:	2224      	movs	r2, #36	; 0x24
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	4393      	bics	r3, r2
 8005fda:	81a3      	strh	r3, [r4, #12]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	89a2      	ldrh	r2, [r4, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <__swsetup_r+0xa6>
 8005ff2:	21a0      	movs	r1, #160	; 0xa0
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	0089      	lsls	r1, r1, #2
 8005ffa:	0092      	lsls	r2, r2, #2
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <__swsetup_r+0xa6>
 8006002:	0021      	movs	r1, r4
 8006004:	0030      	movs	r0, r6
 8006006:	f000 fa4d 	bl	80064a4 <__smakebuf_r>
 800600a:	220c      	movs	r2, #12
 800600c:	5ea3      	ldrsh	r3, [r4, r2]
 800600e:	2001      	movs	r0, #1
 8006010:	001a      	movs	r2, r3
 8006012:	b299      	uxth	r1, r3
 8006014:	4002      	ands	r2, r0
 8006016:	4203      	tst	r3, r0
 8006018:	d00f      	beq.n	800603a <__swsetup_r+0xd6>
 800601a:	2200      	movs	r2, #0
 800601c:	60a2      	str	r2, [r4, #8]
 800601e:	6962      	ldr	r2, [r4, #20]
 8006020:	4252      	negs	r2, r2
 8006022:	61a2      	str	r2, [r4, #24]
 8006024:	2000      	movs	r0, #0
 8006026:	6922      	ldr	r2, [r4, #16]
 8006028:	4282      	cmp	r2, r0
 800602a:	d1ba      	bne.n	8005fa2 <__swsetup_r+0x3e>
 800602c:	060a      	lsls	r2, r1, #24
 800602e:	d5b8      	bpl.n	8005fa2 <__swsetup_r+0x3e>
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	4313      	orrs	r3, r2
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	3801      	subs	r0, #1
 8006038:	e7b3      	b.n	8005fa2 <__swsetup_r+0x3e>
 800603a:	0788      	lsls	r0, r1, #30
 800603c:	d400      	bmi.n	8006040 <__swsetup_r+0xdc>
 800603e:	6962      	ldr	r2, [r4, #20]
 8006040:	60a2      	str	r2, [r4, #8]
 8006042:	e7ef      	b.n	8006024 <__swsetup_r+0xc0>
 8006044:	2000001c 	.word	0x2000001c
 8006048:	08007414 	.word	0x08007414
 800604c:	08007434 	.word	0x08007434
 8006050:	080073f4 	.word	0x080073f4

08006054 <__assert_func>:
 8006054:	b530      	push	{r4, r5, lr}
 8006056:	0014      	movs	r4, r2
 8006058:	001a      	movs	r2, r3
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <__assert_func+0x2c>)
 800605c:	0005      	movs	r5, r0
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	b085      	sub	sp, #20
 8006062:	68d8      	ldr	r0, [r3, #12]
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <__assert_func+0x30>)
 8006066:	2c00      	cmp	r4, #0
 8006068:	d101      	bne.n	800606e <__assert_func+0x1a>
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <__assert_func+0x34>)
 800606c:	001c      	movs	r4, r3
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	9100      	str	r1, [sp, #0]
 8006072:	002b      	movs	r3, r5
 8006074:	4905      	ldr	r1, [pc, #20]	; (800608c <__assert_func+0x38>)
 8006076:	9402      	str	r4, [sp, #8]
 8006078:	f000 f9b8 	bl	80063ec <fiprintf>
 800607c:	f000 fe98 	bl	8006db0 <abort>
 8006080:	2000001c 	.word	0x2000001c
 8006084:	080072b4 	.word	0x080072b4
 8006088:	080072ef 	.word	0x080072ef
 800608c:	080072c1 	.word	0x080072c1

08006090 <__sflush_r>:
 8006090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006092:	898b      	ldrh	r3, [r1, #12]
 8006094:	0005      	movs	r5, r0
 8006096:	000c      	movs	r4, r1
 8006098:	071a      	lsls	r2, r3, #28
 800609a:	d45f      	bmi.n	800615c <__sflush_r+0xcc>
 800609c:	684a      	ldr	r2, [r1, #4]
 800609e:	2a00      	cmp	r2, #0
 80060a0:	dc04      	bgt.n	80060ac <__sflush_r+0x1c>
 80060a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	dc01      	bgt.n	80060ac <__sflush_r+0x1c>
 80060a8:	2000      	movs	r0, #0
 80060aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060ae:	2f00      	cmp	r7, #0
 80060b0:	d0fa      	beq.n	80060a8 <__sflush_r+0x18>
 80060b2:	2200      	movs	r2, #0
 80060b4:	2180      	movs	r1, #128	; 0x80
 80060b6:	682e      	ldr	r6, [r5, #0]
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	001a      	movs	r2, r3
 80060bc:	0149      	lsls	r1, r1, #5
 80060be:	400a      	ands	r2, r1
 80060c0:	420b      	tst	r3, r1
 80060c2:	d034      	beq.n	800612e <__sflush_r+0x9e>
 80060c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	075b      	lsls	r3, r3, #29
 80060ca:	d506      	bpl.n	80060da <__sflush_r+0x4a>
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	1ac0      	subs	r0, r0, r3
 80060d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <__sflush_r+0x4a>
 80060d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060d8:	1ac0      	subs	r0, r0, r3
 80060da:	0002      	movs	r2, r0
 80060dc:	6a21      	ldr	r1, [r4, #32]
 80060de:	2300      	movs	r3, #0
 80060e0:	0028      	movs	r0, r5
 80060e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060e4:	47b8      	blx	r7
 80060e6:	89a1      	ldrh	r1, [r4, #12]
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d106      	bne.n	80060fa <__sflush_r+0x6a>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	2b1d      	cmp	r3, #29
 80060f0:	d831      	bhi.n	8006156 <__sflush_r+0xc6>
 80060f2:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <__sflush_r+0x114>)
 80060f4:	40da      	lsrs	r2, r3
 80060f6:	07d3      	lsls	r3, r2, #31
 80060f8:	d52d      	bpl.n	8006156 <__sflush_r+0xc6>
 80060fa:	2300      	movs	r3, #0
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	04cb      	lsls	r3, r1, #19
 8006104:	d505      	bpl.n	8006112 <__sflush_r+0x82>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d102      	bne.n	8006110 <__sflush_r+0x80>
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d100      	bne.n	8006112 <__sflush_r+0x82>
 8006110:	6560      	str	r0, [r4, #84]	; 0x54
 8006112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006114:	602e      	str	r6, [r5, #0]
 8006116:	2900      	cmp	r1, #0
 8006118:	d0c6      	beq.n	80060a8 <__sflush_r+0x18>
 800611a:	0023      	movs	r3, r4
 800611c:	3344      	adds	r3, #68	; 0x44
 800611e:	4299      	cmp	r1, r3
 8006120:	d002      	beq.n	8006128 <__sflush_r+0x98>
 8006122:	0028      	movs	r0, r5
 8006124:	f000 fa0c 	bl	8006540 <_free_r>
 8006128:	2000      	movs	r0, #0
 800612a:	6360      	str	r0, [r4, #52]	; 0x34
 800612c:	e7bd      	b.n	80060aa <__sflush_r+0x1a>
 800612e:	2301      	movs	r3, #1
 8006130:	0028      	movs	r0, r5
 8006132:	6a21      	ldr	r1, [r4, #32]
 8006134:	47b8      	blx	r7
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d1c5      	bne.n	80060c6 <__sflush_r+0x36>
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0c2      	beq.n	80060c6 <__sflush_r+0x36>
 8006140:	2b1d      	cmp	r3, #29
 8006142:	d001      	beq.n	8006148 <__sflush_r+0xb8>
 8006144:	2b16      	cmp	r3, #22
 8006146:	d101      	bne.n	800614c <__sflush_r+0xbc>
 8006148:	602e      	str	r6, [r5, #0]
 800614a:	e7ad      	b.n	80060a8 <__sflush_r+0x18>
 800614c:	2340      	movs	r3, #64	; 0x40
 800614e:	89a2      	ldrh	r2, [r4, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	e7a9      	b.n	80060aa <__sflush_r+0x1a>
 8006156:	2340      	movs	r3, #64	; 0x40
 8006158:	430b      	orrs	r3, r1
 800615a:	e7fa      	b.n	8006152 <__sflush_r+0xc2>
 800615c:	690f      	ldr	r7, [r1, #16]
 800615e:	2f00      	cmp	r7, #0
 8006160:	d0a2      	beq.n	80060a8 <__sflush_r+0x18>
 8006162:	680a      	ldr	r2, [r1, #0]
 8006164:	600f      	str	r7, [r1, #0]
 8006166:	1bd2      	subs	r2, r2, r7
 8006168:	9201      	str	r2, [sp, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	079b      	lsls	r3, r3, #30
 800616e:	d100      	bne.n	8006172 <__sflush_r+0xe2>
 8006170:	694a      	ldr	r2, [r1, #20]
 8006172:	60a2      	str	r2, [r4, #8]
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dc00      	bgt.n	800617c <__sflush_r+0xec>
 800617a:	e795      	b.n	80060a8 <__sflush_r+0x18>
 800617c:	003a      	movs	r2, r7
 800617e:	0028      	movs	r0, r5
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	6a21      	ldr	r1, [r4, #32]
 8006184:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006186:	47b0      	blx	r6
 8006188:	2800      	cmp	r0, #0
 800618a:	dc06      	bgt.n	800619a <__sflush_r+0x10a>
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	2001      	movs	r0, #1
 8006190:	89a2      	ldrh	r2, [r4, #12]
 8006192:	4240      	negs	r0, r0
 8006194:	4313      	orrs	r3, r2
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	e787      	b.n	80060aa <__sflush_r+0x1a>
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	183f      	adds	r7, r7, r0
 800619e:	1a1b      	subs	r3, r3, r0
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	e7e7      	b.n	8006174 <__sflush_r+0xe4>
 80061a4:	20400001 	.word	0x20400001

080061a8 <_fflush_r>:
 80061a8:	690b      	ldr	r3, [r1, #16]
 80061aa:	b570      	push	{r4, r5, r6, lr}
 80061ac:	0005      	movs	r5, r0
 80061ae:	000c      	movs	r4, r1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <_fflush_r+0x12>
 80061b4:	2500      	movs	r5, #0
 80061b6:	0028      	movs	r0, r5
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d004      	beq.n	80061c8 <_fflush_r+0x20>
 80061be:	6983      	ldr	r3, [r0, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <_fflush_r+0x20>
 80061c4:	f000 f892 	bl	80062ec <__sinit>
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <_fflush_r+0x74>)
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d11b      	bne.n	8006206 <_fflush_r+0x5e>
 80061ce:	686c      	ldr	r4, [r5, #4]
 80061d0:	220c      	movs	r2, #12
 80061d2:	5ea3      	ldrsh	r3, [r4, r2]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ed      	beq.n	80061b4 <_fflush_r+0xc>
 80061d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061da:	07d2      	lsls	r2, r2, #31
 80061dc:	d404      	bmi.n	80061e8 <_fflush_r+0x40>
 80061de:	059b      	lsls	r3, r3, #22
 80061e0:	d402      	bmi.n	80061e8 <_fflush_r+0x40>
 80061e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e4:	f000 f933 	bl	800644e <__retarget_lock_acquire_recursive>
 80061e8:	0028      	movs	r0, r5
 80061ea:	0021      	movs	r1, r4
 80061ec:	f7ff ff50 	bl	8006090 <__sflush_r>
 80061f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061f2:	0005      	movs	r5, r0
 80061f4:	07db      	lsls	r3, r3, #31
 80061f6:	d4de      	bmi.n	80061b6 <_fflush_r+0xe>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	059b      	lsls	r3, r3, #22
 80061fc:	d4db      	bmi.n	80061b6 <_fflush_r+0xe>
 80061fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006200:	f000 f926 	bl	8006450 <__retarget_lock_release_recursive>
 8006204:	e7d7      	b.n	80061b6 <_fflush_r+0xe>
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <_fflush_r+0x78>)
 8006208:	429c      	cmp	r4, r3
 800620a:	d101      	bne.n	8006210 <_fflush_r+0x68>
 800620c:	68ac      	ldr	r4, [r5, #8]
 800620e:	e7df      	b.n	80061d0 <_fflush_r+0x28>
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <_fflush_r+0x7c>)
 8006212:	429c      	cmp	r4, r3
 8006214:	d1dc      	bne.n	80061d0 <_fflush_r+0x28>
 8006216:	68ec      	ldr	r4, [r5, #12]
 8006218:	e7da      	b.n	80061d0 <_fflush_r+0x28>
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	08007414 	.word	0x08007414
 8006220:	08007434 	.word	0x08007434
 8006224:	080073f4 	.word	0x080073f4

08006228 <std>:
 8006228:	2300      	movs	r3, #0
 800622a:	b510      	push	{r4, lr}
 800622c:	0004      	movs	r4, r0
 800622e:	6003      	str	r3, [r0, #0]
 8006230:	6043      	str	r3, [r0, #4]
 8006232:	6083      	str	r3, [r0, #8]
 8006234:	8181      	strh	r1, [r0, #12]
 8006236:	6643      	str	r3, [r0, #100]	; 0x64
 8006238:	0019      	movs	r1, r3
 800623a:	81c2      	strh	r2, [r0, #14]
 800623c:	6103      	str	r3, [r0, #16]
 800623e:	6143      	str	r3, [r0, #20]
 8006240:	6183      	str	r3, [r0, #24]
 8006242:	2208      	movs	r2, #8
 8006244:	305c      	adds	r0, #92	; 0x5c
 8006246:	f7ff fc9b 	bl	8005b80 <memset>
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <std+0x38>)
 800624c:	6224      	str	r4, [r4, #32]
 800624e:	6263      	str	r3, [r4, #36]	; 0x24
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <std+0x3c>)
 8006252:	62a3      	str	r3, [r4, #40]	; 0x28
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <std+0x40>)
 8006256:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <std+0x44>)
 800625a:	6323      	str	r3, [r4, #48]	; 0x30
 800625c:	bd10      	pop	{r4, pc}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	08006cf1 	.word	0x08006cf1
 8006264:	08006d19 	.word	0x08006d19
 8006268:	08006d51 	.word	0x08006d51
 800626c:	08006d7d 	.word	0x08006d7d

08006270 <_cleanup_r>:
 8006270:	b510      	push	{r4, lr}
 8006272:	4902      	ldr	r1, [pc, #8]	; (800627c <_cleanup_r+0xc>)
 8006274:	f000 f8ca 	bl	800640c <_fwalk_reent>
 8006278:	bd10      	pop	{r4, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	080061a9 	.word	0x080061a9

08006280 <__sfmoreglue>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	2568      	movs	r5, #104	; 0x68
 8006284:	1e4a      	subs	r2, r1, #1
 8006286:	4355      	muls	r5, r2
 8006288:	000e      	movs	r6, r1
 800628a:	0029      	movs	r1, r5
 800628c:	3174      	adds	r1, #116	; 0x74
 800628e:	f000 f9c3 	bl	8006618 <_malloc_r>
 8006292:	1e04      	subs	r4, r0, #0
 8006294:	d008      	beq.n	80062a8 <__sfmoreglue+0x28>
 8006296:	2100      	movs	r1, #0
 8006298:	002a      	movs	r2, r5
 800629a:	6001      	str	r1, [r0, #0]
 800629c:	6046      	str	r6, [r0, #4]
 800629e:	300c      	adds	r0, #12
 80062a0:	60a0      	str	r0, [r4, #8]
 80062a2:	3268      	adds	r2, #104	; 0x68
 80062a4:	f7ff fc6c 	bl	8005b80 <memset>
 80062a8:	0020      	movs	r0, r4
 80062aa:	bd70      	pop	{r4, r5, r6, pc}

080062ac <__sfp_lock_acquire>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	4802      	ldr	r0, [pc, #8]	; (80062b8 <__sfp_lock_acquire+0xc>)
 80062b0:	f000 f8cd 	bl	800644e <__retarget_lock_acquire_recursive>
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	20000185 	.word	0x20000185

080062bc <__sfp_lock_release>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	4802      	ldr	r0, [pc, #8]	; (80062c8 <__sfp_lock_release+0xc>)
 80062c0:	f000 f8c6 	bl	8006450 <__retarget_lock_release_recursive>
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	20000185 	.word	0x20000185

080062cc <__sinit_lock_acquire>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	4802      	ldr	r0, [pc, #8]	; (80062d8 <__sinit_lock_acquire+0xc>)
 80062d0:	f000 f8bd 	bl	800644e <__retarget_lock_acquire_recursive>
 80062d4:	bd10      	pop	{r4, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	20000186 	.word	0x20000186

080062dc <__sinit_lock_release>:
 80062dc:	b510      	push	{r4, lr}
 80062de:	4802      	ldr	r0, [pc, #8]	; (80062e8 <__sinit_lock_release+0xc>)
 80062e0:	f000 f8b6 	bl	8006450 <__retarget_lock_release_recursive>
 80062e4:	bd10      	pop	{r4, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	20000186 	.word	0x20000186

080062ec <__sinit>:
 80062ec:	b513      	push	{r0, r1, r4, lr}
 80062ee:	0004      	movs	r4, r0
 80062f0:	f7ff ffec 	bl	80062cc <__sinit_lock_acquire>
 80062f4:	69a3      	ldr	r3, [r4, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <__sinit+0x14>
 80062fa:	f7ff ffef 	bl	80062dc <__sinit_lock_release>
 80062fe:	bd13      	pop	{r0, r1, r4, pc}
 8006300:	64a3      	str	r3, [r4, #72]	; 0x48
 8006302:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006304:	6523      	str	r3, [r4, #80]	; 0x50
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <__sinit+0x68>)
 8006308:	4a13      	ldr	r2, [pc, #76]	; (8006358 <__sinit+0x6c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	62a2      	str	r2, [r4, #40]	; 0x28
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	42a3      	cmp	r3, r4
 8006312:	d101      	bne.n	8006318 <__sinit+0x2c>
 8006314:	2301      	movs	r3, #1
 8006316:	61a3      	str	r3, [r4, #24]
 8006318:	0020      	movs	r0, r4
 800631a:	f000 f81f 	bl	800635c <__sfp>
 800631e:	6060      	str	r0, [r4, #4]
 8006320:	0020      	movs	r0, r4
 8006322:	f000 f81b 	bl	800635c <__sfp>
 8006326:	60a0      	str	r0, [r4, #8]
 8006328:	0020      	movs	r0, r4
 800632a:	f000 f817 	bl	800635c <__sfp>
 800632e:	2200      	movs	r2, #0
 8006330:	2104      	movs	r1, #4
 8006332:	60e0      	str	r0, [r4, #12]
 8006334:	6860      	ldr	r0, [r4, #4]
 8006336:	f7ff ff77 	bl	8006228 <std>
 800633a:	2201      	movs	r2, #1
 800633c:	2109      	movs	r1, #9
 800633e:	68a0      	ldr	r0, [r4, #8]
 8006340:	f7ff ff72 	bl	8006228 <std>
 8006344:	2202      	movs	r2, #2
 8006346:	2112      	movs	r1, #18
 8006348:	68e0      	ldr	r0, [r4, #12]
 800634a:	f7ff ff6d 	bl	8006228 <std>
 800634e:	2301      	movs	r3, #1
 8006350:	61a3      	str	r3, [r4, #24]
 8006352:	e7d2      	b.n	80062fa <__sinit+0xe>
 8006354:	0800723c 	.word	0x0800723c
 8006358:	08006271 	.word	0x08006271

0800635c <__sfp>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	0007      	movs	r7, r0
 8006360:	f7ff ffa4 	bl	80062ac <__sfp_lock_acquire>
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <__sfp+0x88>)
 8006366:	681e      	ldr	r6, [r3, #0]
 8006368:	69b3      	ldr	r3, [r6, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <__sfp+0x18>
 800636e:	0030      	movs	r0, r6
 8006370:	f7ff ffbc 	bl	80062ec <__sinit>
 8006374:	3648      	adds	r6, #72	; 0x48
 8006376:	68b4      	ldr	r4, [r6, #8]
 8006378:	6873      	ldr	r3, [r6, #4]
 800637a:	3b01      	subs	r3, #1
 800637c:	d504      	bpl.n	8006388 <__sfp+0x2c>
 800637e:	6833      	ldr	r3, [r6, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d022      	beq.n	80063ca <__sfp+0x6e>
 8006384:	6836      	ldr	r6, [r6, #0]
 8006386:	e7f6      	b.n	8006376 <__sfp+0x1a>
 8006388:	220c      	movs	r2, #12
 800638a:	5ea5      	ldrsh	r5, [r4, r2]
 800638c:	2d00      	cmp	r5, #0
 800638e:	d11a      	bne.n	80063c6 <__sfp+0x6a>
 8006390:	0020      	movs	r0, r4
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <__sfp+0x8c>)
 8006394:	3058      	adds	r0, #88	; 0x58
 8006396:	60e3      	str	r3, [r4, #12]
 8006398:	6665      	str	r5, [r4, #100]	; 0x64
 800639a:	f000 f857 	bl	800644c <__retarget_lock_init_recursive>
 800639e:	f7ff ff8d 	bl	80062bc <__sfp_lock_release>
 80063a2:	0020      	movs	r0, r4
 80063a4:	2208      	movs	r2, #8
 80063a6:	0029      	movs	r1, r5
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	60a5      	str	r5, [r4, #8]
 80063ac:	6065      	str	r5, [r4, #4]
 80063ae:	6125      	str	r5, [r4, #16]
 80063b0:	6165      	str	r5, [r4, #20]
 80063b2:	61a5      	str	r5, [r4, #24]
 80063b4:	305c      	adds	r0, #92	; 0x5c
 80063b6:	f7ff fbe3 	bl	8005b80 <memset>
 80063ba:	6365      	str	r5, [r4, #52]	; 0x34
 80063bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80063be:	64a5      	str	r5, [r4, #72]	; 0x48
 80063c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80063c2:	0020      	movs	r0, r4
 80063c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c6:	3468      	adds	r4, #104	; 0x68
 80063c8:	e7d7      	b.n	800637a <__sfp+0x1e>
 80063ca:	2104      	movs	r1, #4
 80063cc:	0038      	movs	r0, r7
 80063ce:	f7ff ff57 	bl	8006280 <__sfmoreglue>
 80063d2:	1e04      	subs	r4, r0, #0
 80063d4:	6030      	str	r0, [r6, #0]
 80063d6:	d1d5      	bne.n	8006384 <__sfp+0x28>
 80063d8:	f7ff ff70 	bl	80062bc <__sfp_lock_release>
 80063dc:	230c      	movs	r3, #12
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	e7ef      	b.n	80063c2 <__sfp+0x66>
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	0800723c 	.word	0x0800723c
 80063e8:	ffff0001 	.word	0xffff0001

080063ec <fiprintf>:
 80063ec:	b40e      	push	{r1, r2, r3}
 80063ee:	b503      	push	{r0, r1, lr}
 80063f0:	0001      	movs	r1, r0
 80063f2:	ab03      	add	r3, sp, #12
 80063f4:	4804      	ldr	r0, [pc, #16]	; (8006408 <fiprintf+0x1c>)
 80063f6:	cb04      	ldmia	r3!, {r2}
 80063f8:	6800      	ldr	r0, [r0, #0]
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	f000 f9aa 	bl	8006754 <_vfiprintf_r>
 8006400:	b002      	add	sp, #8
 8006402:	bc08      	pop	{r3}
 8006404:	b003      	add	sp, #12
 8006406:	4718      	bx	r3
 8006408:	2000001c 	.word	0x2000001c

0800640c <_fwalk_reent>:
 800640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640e:	0004      	movs	r4, r0
 8006410:	0006      	movs	r6, r0
 8006412:	2700      	movs	r7, #0
 8006414:	9101      	str	r1, [sp, #4]
 8006416:	3448      	adds	r4, #72	; 0x48
 8006418:	6863      	ldr	r3, [r4, #4]
 800641a:	68a5      	ldr	r5, [r4, #8]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	3b01      	subs	r3, #1
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	d504      	bpl.n	8006430 <_fwalk_reent+0x24>
 8006426:	6824      	ldr	r4, [r4, #0]
 8006428:	2c00      	cmp	r4, #0
 800642a:	d1f5      	bne.n	8006418 <_fwalk_reent+0xc>
 800642c:	0038      	movs	r0, r7
 800642e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006430:	89ab      	ldrh	r3, [r5, #12]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d908      	bls.n	8006448 <_fwalk_reent+0x3c>
 8006436:	220e      	movs	r2, #14
 8006438:	5eab      	ldrsh	r3, [r5, r2]
 800643a:	3301      	adds	r3, #1
 800643c:	d004      	beq.n	8006448 <_fwalk_reent+0x3c>
 800643e:	0029      	movs	r1, r5
 8006440:	0030      	movs	r0, r6
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	4798      	blx	r3
 8006446:	4307      	orrs	r7, r0
 8006448:	3568      	adds	r5, #104	; 0x68
 800644a:	e7e8      	b.n	800641e <_fwalk_reent+0x12>

0800644c <__retarget_lock_init_recursive>:
 800644c:	4770      	bx	lr

0800644e <__retarget_lock_acquire_recursive>:
 800644e:	4770      	bx	lr

08006450 <__retarget_lock_release_recursive>:
 8006450:	4770      	bx	lr
	...

08006454 <__swhatbuf_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	000e      	movs	r6, r1
 8006458:	001d      	movs	r5, r3
 800645a:	230e      	movs	r3, #14
 800645c:	5ec9      	ldrsh	r1, [r1, r3]
 800645e:	0014      	movs	r4, r2
 8006460:	b096      	sub	sp, #88	; 0x58
 8006462:	2900      	cmp	r1, #0
 8006464:	da08      	bge.n	8006478 <__swhatbuf_r+0x24>
 8006466:	220c      	movs	r2, #12
 8006468:	5eb3      	ldrsh	r3, [r6, r2]
 800646a:	2200      	movs	r2, #0
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	d411      	bmi.n	8006496 <__swhatbuf_r+0x42>
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	e00f      	b.n	8006498 <__swhatbuf_r+0x44>
 8006478:	466a      	mov	r2, sp
 800647a:	f000 fcb3 	bl	8006de4 <_fstat_r>
 800647e:	2800      	cmp	r0, #0
 8006480:	dbf1      	blt.n	8006466 <__swhatbuf_r+0x12>
 8006482:	23f0      	movs	r3, #240	; 0xf0
 8006484:	9901      	ldr	r1, [sp, #4]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	4019      	ands	r1, r3
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <__swhatbuf_r+0x4c>)
 800648c:	18c9      	adds	r1, r1, r3
 800648e:	424b      	negs	r3, r1
 8006490:	4159      	adcs	r1, r3
 8006492:	6029      	str	r1, [r5, #0]
 8006494:	e7ed      	b.n	8006472 <__swhatbuf_r+0x1e>
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	2000      	movs	r0, #0
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	b016      	add	sp, #88	; 0x58
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	ffffe000 	.word	0xffffe000

080064a4 <__smakebuf_r>:
 80064a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a6:	2602      	movs	r6, #2
 80064a8:	898b      	ldrh	r3, [r1, #12]
 80064aa:	0005      	movs	r5, r0
 80064ac:	000c      	movs	r4, r1
 80064ae:	4233      	tst	r3, r6
 80064b0:	d006      	beq.n	80064c0 <__smakebuf_r+0x1c>
 80064b2:	0023      	movs	r3, r4
 80064b4:	3347      	adds	r3, #71	; 0x47
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	2301      	movs	r3, #1
 80064bc:	6163      	str	r3, [r4, #20]
 80064be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80064c0:	466a      	mov	r2, sp
 80064c2:	ab01      	add	r3, sp, #4
 80064c4:	f7ff ffc6 	bl	8006454 <__swhatbuf_r>
 80064c8:	9900      	ldr	r1, [sp, #0]
 80064ca:	0007      	movs	r7, r0
 80064cc:	0028      	movs	r0, r5
 80064ce:	f000 f8a3 	bl	8006618 <_malloc_r>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d108      	bne.n	80064e8 <__smakebuf_r+0x44>
 80064d6:	220c      	movs	r2, #12
 80064d8:	5ea3      	ldrsh	r3, [r4, r2]
 80064da:	059a      	lsls	r2, r3, #22
 80064dc:	d4ef      	bmi.n	80064be <__smakebuf_r+0x1a>
 80064de:	2203      	movs	r2, #3
 80064e0:	4393      	bics	r3, r2
 80064e2:	431e      	orrs	r6, r3
 80064e4:	81a6      	strh	r6, [r4, #12]
 80064e6:	e7e4      	b.n	80064b2 <__smakebuf_r+0xe>
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <__smakebuf_r+0x84>)
 80064ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	89a2      	ldrh	r2, [r4, #12]
 80064f0:	6020      	str	r0, [r4, #0]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	9b00      	ldr	r3, [sp, #0]
 80064f8:	6120      	str	r0, [r4, #16]
 80064fa:	6163      	str	r3, [r4, #20]
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <__smakebuf_r+0x7a>
 8006502:	0028      	movs	r0, r5
 8006504:	230e      	movs	r3, #14
 8006506:	5ee1      	ldrsh	r1, [r4, r3]
 8006508:	f000 fc7e 	bl	8006e08 <_isatty_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	d006      	beq.n	800651e <__smakebuf_r+0x7a>
 8006510:	2203      	movs	r2, #3
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	4393      	bics	r3, r2
 8006516:	001a      	movs	r2, r3
 8006518:	2301      	movs	r3, #1
 800651a:	4313      	orrs	r3, r2
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	89a0      	ldrh	r0, [r4, #12]
 8006520:	4307      	orrs	r7, r0
 8006522:	81a7      	strh	r7, [r4, #12]
 8006524:	e7cb      	b.n	80064be <__smakebuf_r+0x1a>
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	08006271 	.word	0x08006271

0800652c <malloc>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4b03      	ldr	r3, [pc, #12]	; (800653c <malloc+0x10>)
 8006530:	0001      	movs	r1, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	f000 f870 	bl	8006618 <_malloc_r>
 8006538:	bd10      	pop	{r4, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	2000001c 	.word	0x2000001c

08006540 <_free_r>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	0005      	movs	r5, r0
 8006544:	2900      	cmp	r1, #0
 8006546:	d010      	beq.n	800656a <_free_r+0x2a>
 8006548:	1f0c      	subs	r4, r1, #4
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	da00      	bge.n	8006552 <_free_r+0x12>
 8006550:	18e4      	adds	r4, r4, r3
 8006552:	0028      	movs	r0, r5
 8006554:	f000 fc8a 	bl	8006e6c <__malloc_lock>
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <_free_r+0x90>)
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <_free_r+0x2c>
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	6014      	str	r4, [r2, #0]
 8006564:	0028      	movs	r0, r5
 8006566:	f000 fc89 	bl	8006e7c <__malloc_unlock>
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	42a3      	cmp	r3, r4
 800656e:	d908      	bls.n	8006582 <_free_r+0x42>
 8006570:	6821      	ldr	r1, [r4, #0]
 8006572:	1860      	adds	r0, r4, r1
 8006574:	4283      	cmp	r3, r0
 8006576:	d1f3      	bne.n	8006560 <_free_r+0x20>
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	1841      	adds	r1, r0, r1
 800657e:	6021      	str	r1, [r4, #0]
 8006580:	e7ee      	b.n	8006560 <_free_r+0x20>
 8006582:	001a      	movs	r2, r3
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <_free_r+0x4e>
 800658a:	42a3      	cmp	r3, r4
 800658c:	d9f9      	bls.n	8006582 <_free_r+0x42>
 800658e:	6811      	ldr	r1, [r2, #0]
 8006590:	1850      	adds	r0, r2, r1
 8006592:	42a0      	cmp	r0, r4
 8006594:	d10b      	bne.n	80065ae <_free_r+0x6e>
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	1809      	adds	r1, r1, r0
 800659a:	1850      	adds	r0, r2, r1
 800659c:	6011      	str	r1, [r2, #0]
 800659e:	4283      	cmp	r3, r0
 80065a0:	d1e0      	bne.n	8006564 <_free_r+0x24>
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	1841      	adds	r1, r0, r1
 80065a8:	6011      	str	r1, [r2, #0]
 80065aa:	6053      	str	r3, [r2, #4]
 80065ac:	e7da      	b.n	8006564 <_free_r+0x24>
 80065ae:	42a0      	cmp	r0, r4
 80065b0:	d902      	bls.n	80065b8 <_free_r+0x78>
 80065b2:	230c      	movs	r3, #12
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	e7d5      	b.n	8006564 <_free_r+0x24>
 80065b8:	6821      	ldr	r1, [r4, #0]
 80065ba:	1860      	adds	r0, r4, r1
 80065bc:	4283      	cmp	r3, r0
 80065be:	d103      	bne.n	80065c8 <_free_r+0x88>
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	1841      	adds	r1, r0, r1
 80065c6:	6021      	str	r1, [r4, #0]
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	6054      	str	r4, [r2, #4]
 80065cc:	e7ca      	b.n	8006564 <_free_r+0x24>
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	20000188 	.word	0x20000188

080065d4 <sbrk_aligned>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	4e0f      	ldr	r6, [pc, #60]	; (8006614 <sbrk_aligned+0x40>)
 80065d8:	000d      	movs	r5, r1
 80065da:	6831      	ldr	r1, [r6, #0]
 80065dc:	0004      	movs	r4, r0
 80065de:	2900      	cmp	r1, #0
 80065e0:	d102      	bne.n	80065e8 <sbrk_aligned+0x14>
 80065e2:	f000 fb73 	bl	8006ccc <_sbrk_r>
 80065e6:	6030      	str	r0, [r6, #0]
 80065e8:	0029      	movs	r1, r5
 80065ea:	0020      	movs	r0, r4
 80065ec:	f000 fb6e 	bl	8006ccc <_sbrk_r>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d00a      	beq.n	800660a <sbrk_aligned+0x36>
 80065f4:	2303      	movs	r3, #3
 80065f6:	1cc5      	adds	r5, r0, #3
 80065f8:	439d      	bics	r5, r3
 80065fa:	42a8      	cmp	r0, r5
 80065fc:	d007      	beq.n	800660e <sbrk_aligned+0x3a>
 80065fe:	1a29      	subs	r1, r5, r0
 8006600:	0020      	movs	r0, r4
 8006602:	f000 fb63 	bl	8006ccc <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d101      	bne.n	800660e <sbrk_aligned+0x3a>
 800660a:	2501      	movs	r5, #1
 800660c:	426d      	negs	r5, r5
 800660e:	0028      	movs	r0, r5
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	2000018c 	.word	0x2000018c

08006618 <_malloc_r>:
 8006618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800661a:	2203      	movs	r2, #3
 800661c:	1ccb      	adds	r3, r1, #3
 800661e:	4393      	bics	r3, r2
 8006620:	3308      	adds	r3, #8
 8006622:	0006      	movs	r6, r0
 8006624:	001f      	movs	r7, r3
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d232      	bcs.n	8006690 <_malloc_r+0x78>
 800662a:	270c      	movs	r7, #12
 800662c:	42b9      	cmp	r1, r7
 800662e:	d831      	bhi.n	8006694 <_malloc_r+0x7c>
 8006630:	0030      	movs	r0, r6
 8006632:	f000 fc1b 	bl	8006e6c <__malloc_lock>
 8006636:	4d32      	ldr	r5, [pc, #200]	; (8006700 <_malloc_r+0xe8>)
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	001c      	movs	r4, r3
 800663c:	2c00      	cmp	r4, #0
 800663e:	d12e      	bne.n	800669e <_malloc_r+0x86>
 8006640:	0039      	movs	r1, r7
 8006642:	0030      	movs	r0, r6
 8006644:	f7ff ffc6 	bl	80065d4 <sbrk_aligned>
 8006648:	0004      	movs	r4, r0
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d11e      	bne.n	800668c <_malloc_r+0x74>
 800664e:	682c      	ldr	r4, [r5, #0]
 8006650:	0025      	movs	r5, r4
 8006652:	2d00      	cmp	r5, #0
 8006654:	d14a      	bne.n	80066ec <_malloc_r+0xd4>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	0029      	movs	r1, r5
 800665a:	18e3      	adds	r3, r4, r3
 800665c:	0030      	movs	r0, r6
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	f000 fb34 	bl	8006ccc <_sbrk_r>
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	4283      	cmp	r3, r0
 8006668:	d143      	bne.n	80066f2 <_malloc_r+0xda>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	3703      	adds	r7, #3
 800666e:	1aff      	subs	r7, r7, r3
 8006670:	2303      	movs	r3, #3
 8006672:	439f      	bics	r7, r3
 8006674:	3708      	adds	r7, #8
 8006676:	2f0c      	cmp	r7, #12
 8006678:	d200      	bcs.n	800667c <_malloc_r+0x64>
 800667a:	270c      	movs	r7, #12
 800667c:	0039      	movs	r1, r7
 800667e:	0030      	movs	r0, r6
 8006680:	f7ff ffa8 	bl	80065d4 <sbrk_aligned>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d034      	beq.n	80066f2 <_malloc_r+0xda>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	19df      	adds	r7, r3, r7
 800668c:	6027      	str	r7, [r4, #0]
 800668e:	e013      	b.n	80066b8 <_malloc_r+0xa0>
 8006690:	2b00      	cmp	r3, #0
 8006692:	dacb      	bge.n	800662c <_malloc_r+0x14>
 8006694:	230c      	movs	r3, #12
 8006696:	2500      	movs	r5, #0
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	0028      	movs	r0, r5
 800669c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	1bd1      	subs	r1, r2, r7
 80066a2:	d420      	bmi.n	80066e6 <_malloc_r+0xce>
 80066a4:	290b      	cmp	r1, #11
 80066a6:	d917      	bls.n	80066d8 <_malloc_r+0xc0>
 80066a8:	19e2      	adds	r2, r4, r7
 80066aa:	6027      	str	r7, [r4, #0]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d111      	bne.n	80066d4 <_malloc_r+0xbc>
 80066b0:	602a      	str	r2, [r5, #0]
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	6011      	str	r1, [r2, #0]
 80066b6:	6053      	str	r3, [r2, #4]
 80066b8:	0030      	movs	r0, r6
 80066ba:	0025      	movs	r5, r4
 80066bc:	f000 fbde 	bl	8006e7c <__malloc_unlock>
 80066c0:	2207      	movs	r2, #7
 80066c2:	350b      	adds	r5, #11
 80066c4:	1d23      	adds	r3, r4, #4
 80066c6:	4395      	bics	r5, r2
 80066c8:	1aea      	subs	r2, r5, r3
 80066ca:	429d      	cmp	r5, r3
 80066cc:	d0e5      	beq.n	800669a <_malloc_r+0x82>
 80066ce:	1b5b      	subs	r3, r3, r5
 80066d0:	50a3      	str	r3, [r4, r2]
 80066d2:	e7e2      	b.n	800669a <_malloc_r+0x82>
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e7ec      	b.n	80066b2 <_malloc_r+0x9a>
 80066d8:	6862      	ldr	r2, [r4, #4]
 80066da:	42a3      	cmp	r3, r4
 80066dc:	d101      	bne.n	80066e2 <_malloc_r+0xca>
 80066de:	602a      	str	r2, [r5, #0]
 80066e0:	e7ea      	b.n	80066b8 <_malloc_r+0xa0>
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	e7e8      	b.n	80066b8 <_malloc_r+0xa0>
 80066e6:	0023      	movs	r3, r4
 80066e8:	6864      	ldr	r4, [r4, #4]
 80066ea:	e7a7      	b.n	800663c <_malloc_r+0x24>
 80066ec:	002c      	movs	r4, r5
 80066ee:	686d      	ldr	r5, [r5, #4]
 80066f0:	e7af      	b.n	8006652 <_malloc_r+0x3a>
 80066f2:	230c      	movs	r3, #12
 80066f4:	0030      	movs	r0, r6
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	f000 fbc0 	bl	8006e7c <__malloc_unlock>
 80066fc:	e7cd      	b.n	800669a <_malloc_r+0x82>
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	20000188 	.word	0x20000188

08006704 <__sfputc_r>:
 8006704:	6893      	ldr	r3, [r2, #8]
 8006706:	b510      	push	{r4, lr}
 8006708:	3b01      	subs	r3, #1
 800670a:	6093      	str	r3, [r2, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	da04      	bge.n	800671a <__sfputc_r+0x16>
 8006710:	6994      	ldr	r4, [r2, #24]
 8006712:	42a3      	cmp	r3, r4
 8006714:	db07      	blt.n	8006726 <__sfputc_r+0x22>
 8006716:	290a      	cmp	r1, #10
 8006718:	d005      	beq.n	8006726 <__sfputc_r+0x22>
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	1c58      	adds	r0, r3, #1
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	7019      	strb	r1, [r3, #0]
 8006722:	0008      	movs	r0, r1
 8006724:	bd10      	pop	{r4, pc}
 8006726:	f7ff fbc7 	bl	8005eb8 <__swbuf_r>
 800672a:	0001      	movs	r1, r0
 800672c:	e7f9      	b.n	8006722 <__sfputc_r+0x1e>

0800672e <__sfputs_r>:
 800672e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006730:	0006      	movs	r6, r0
 8006732:	000f      	movs	r7, r1
 8006734:	0014      	movs	r4, r2
 8006736:	18d5      	adds	r5, r2, r3
 8006738:	42ac      	cmp	r4, r5
 800673a:	d101      	bne.n	8006740 <__sfputs_r+0x12>
 800673c:	2000      	movs	r0, #0
 800673e:	e007      	b.n	8006750 <__sfputs_r+0x22>
 8006740:	7821      	ldrb	r1, [r4, #0]
 8006742:	003a      	movs	r2, r7
 8006744:	0030      	movs	r0, r6
 8006746:	f7ff ffdd 	bl	8006704 <__sfputc_r>
 800674a:	3401      	adds	r4, #1
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d1f3      	bne.n	8006738 <__sfputs_r+0xa>
 8006750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006754 <_vfiprintf_r>:
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	b0a1      	sub	sp, #132	; 0x84
 8006758:	0006      	movs	r6, r0
 800675a:	000c      	movs	r4, r1
 800675c:	001f      	movs	r7, r3
 800675e:	9203      	str	r2, [sp, #12]
 8006760:	2800      	cmp	r0, #0
 8006762:	d004      	beq.n	800676e <_vfiprintf_r+0x1a>
 8006764:	6983      	ldr	r3, [r0, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <_vfiprintf_r+0x1a>
 800676a:	f7ff fdbf 	bl	80062ec <__sinit>
 800676e:	4b8e      	ldr	r3, [pc, #568]	; (80069a8 <_vfiprintf_r+0x254>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d11c      	bne.n	80067ae <_vfiprintf_r+0x5a>
 8006774:	6874      	ldr	r4, [r6, #4]
 8006776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006778:	07db      	lsls	r3, r3, #31
 800677a:	d405      	bmi.n	8006788 <_vfiprintf_r+0x34>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	059b      	lsls	r3, r3, #22
 8006780:	d402      	bmi.n	8006788 <_vfiprintf_r+0x34>
 8006782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006784:	f7ff fe63 	bl	800644e <__retarget_lock_acquire_recursive>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	071b      	lsls	r3, r3, #28
 800678c:	d502      	bpl.n	8006794 <_vfiprintf_r+0x40>
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11d      	bne.n	80067d0 <_vfiprintf_r+0x7c>
 8006794:	0021      	movs	r1, r4
 8006796:	0030      	movs	r0, r6
 8006798:	f7ff fbe4 	bl	8005f64 <__swsetup_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	d017      	beq.n	80067d0 <_vfiprintf_r+0x7c>
 80067a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d50d      	bpl.n	80067c2 <_vfiprintf_r+0x6e>
 80067a6:	2001      	movs	r0, #1
 80067a8:	4240      	negs	r0, r0
 80067aa:	b021      	add	sp, #132	; 0x84
 80067ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ae:	4b7f      	ldr	r3, [pc, #508]	; (80069ac <_vfiprintf_r+0x258>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d101      	bne.n	80067b8 <_vfiprintf_r+0x64>
 80067b4:	68b4      	ldr	r4, [r6, #8]
 80067b6:	e7de      	b.n	8006776 <_vfiprintf_r+0x22>
 80067b8:	4b7d      	ldr	r3, [pc, #500]	; (80069b0 <_vfiprintf_r+0x25c>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d1db      	bne.n	8006776 <_vfiprintf_r+0x22>
 80067be:	68f4      	ldr	r4, [r6, #12]
 80067c0:	e7d9      	b.n	8006776 <_vfiprintf_r+0x22>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	059b      	lsls	r3, r3, #22
 80067c6:	d4ee      	bmi.n	80067a6 <_vfiprintf_r+0x52>
 80067c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ca:	f7ff fe41 	bl	8006450 <__retarget_lock_release_recursive>
 80067ce:	e7ea      	b.n	80067a6 <_vfiprintf_r+0x52>
 80067d0:	2300      	movs	r3, #0
 80067d2:	ad08      	add	r5, sp, #32
 80067d4:	616b      	str	r3, [r5, #20]
 80067d6:	3320      	adds	r3, #32
 80067d8:	766b      	strb	r3, [r5, #25]
 80067da:	3310      	adds	r3, #16
 80067dc:	76ab      	strb	r3, [r5, #26]
 80067de:	9707      	str	r7, [sp, #28]
 80067e0:	9f03      	ldr	r7, [sp, #12]
 80067e2:	783b      	ldrb	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <_vfiprintf_r+0x98>
 80067e8:	2b25      	cmp	r3, #37	; 0x25
 80067ea:	d14e      	bne.n	800688a <_vfiprintf_r+0x136>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	1afb      	subs	r3, r7, r3
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	429f      	cmp	r7, r3
 80067f6:	d00d      	beq.n	8006814 <_vfiprintf_r+0xc0>
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	0021      	movs	r1, r4
 80067fc:	0030      	movs	r0, r6
 80067fe:	9a03      	ldr	r2, [sp, #12]
 8006800:	f7ff ff95 	bl	800672e <__sfputs_r>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d100      	bne.n	800680a <_vfiprintf_r+0xb6>
 8006808:	e0b5      	b.n	8006976 <_vfiprintf_r+0x222>
 800680a:	696a      	ldr	r2, [r5, #20]
 800680c:	9b05      	ldr	r3, [sp, #20]
 800680e:	4694      	mov	ip, r2
 8006810:	4463      	add	r3, ip
 8006812:	616b      	str	r3, [r5, #20]
 8006814:	783b      	ldrb	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d100      	bne.n	800681c <_vfiprintf_r+0xc8>
 800681a:	e0ac      	b.n	8006976 <_vfiprintf_r+0x222>
 800681c:	2201      	movs	r2, #1
 800681e:	1c7b      	adds	r3, r7, #1
 8006820:	9303      	str	r3, [sp, #12]
 8006822:	2300      	movs	r3, #0
 8006824:	4252      	negs	r2, r2
 8006826:	606a      	str	r2, [r5, #4]
 8006828:	a904      	add	r1, sp, #16
 800682a:	3254      	adds	r2, #84	; 0x54
 800682c:	1852      	adds	r2, r2, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	60eb      	str	r3, [r5, #12]
 8006832:	60ab      	str	r3, [r5, #8]
 8006834:	7013      	strb	r3, [r2, #0]
 8006836:	65ab      	str	r3, [r5, #88]	; 0x58
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	2205      	movs	r2, #5
 800683c:	7819      	ldrb	r1, [r3, #0]
 800683e:	485d      	ldr	r0, [pc, #372]	; (80069b4 <_vfiprintf_r+0x260>)
 8006840:	f000 fb08 	bl	8006e54 <memchr>
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	1c5f      	adds	r7, r3, #1
 8006848:	2800      	cmp	r0, #0
 800684a:	d120      	bne.n	800688e <_vfiprintf_r+0x13a>
 800684c:	682a      	ldr	r2, [r5, #0]
 800684e:	06d3      	lsls	r3, r2, #27
 8006850:	d504      	bpl.n	800685c <_vfiprintf_r+0x108>
 8006852:	2353      	movs	r3, #83	; 0x53
 8006854:	a904      	add	r1, sp, #16
 8006856:	185b      	adds	r3, r3, r1
 8006858:	2120      	movs	r1, #32
 800685a:	7019      	strb	r1, [r3, #0]
 800685c:	0713      	lsls	r3, r2, #28
 800685e:	d504      	bpl.n	800686a <_vfiprintf_r+0x116>
 8006860:	2353      	movs	r3, #83	; 0x53
 8006862:	a904      	add	r1, sp, #16
 8006864:	185b      	adds	r3, r3, r1
 8006866:	212b      	movs	r1, #43	; 0x2b
 8006868:	7019      	strb	r1, [r3, #0]
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b2a      	cmp	r3, #42	; 0x2a
 8006870:	d016      	beq.n	80068a0 <_vfiprintf_r+0x14c>
 8006872:	2100      	movs	r1, #0
 8006874:	68eb      	ldr	r3, [r5, #12]
 8006876:	9f03      	ldr	r7, [sp, #12]
 8006878:	783a      	ldrb	r2, [r7, #0]
 800687a:	1c78      	adds	r0, r7, #1
 800687c:	3a30      	subs	r2, #48	; 0x30
 800687e:	4684      	mov	ip, r0
 8006880:	2a09      	cmp	r2, #9
 8006882:	d94f      	bls.n	8006924 <_vfiprintf_r+0x1d0>
 8006884:	2900      	cmp	r1, #0
 8006886:	d111      	bne.n	80068ac <_vfiprintf_r+0x158>
 8006888:	e017      	b.n	80068ba <_vfiprintf_r+0x166>
 800688a:	3701      	adds	r7, #1
 800688c:	e7a9      	b.n	80067e2 <_vfiprintf_r+0x8e>
 800688e:	4b49      	ldr	r3, [pc, #292]	; (80069b4 <_vfiprintf_r+0x260>)
 8006890:	682a      	ldr	r2, [r5, #0]
 8006892:	1ac0      	subs	r0, r0, r3
 8006894:	2301      	movs	r3, #1
 8006896:	4083      	lsls	r3, r0
 8006898:	4313      	orrs	r3, r2
 800689a:	602b      	str	r3, [r5, #0]
 800689c:	9703      	str	r7, [sp, #12]
 800689e:	e7cb      	b.n	8006838 <_vfiprintf_r+0xe4>
 80068a0:	9b07      	ldr	r3, [sp, #28]
 80068a2:	1d19      	adds	r1, r3, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	9107      	str	r1, [sp, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	db01      	blt.n	80068b0 <_vfiprintf_r+0x15c>
 80068ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ae:	e004      	b.n	80068ba <_vfiprintf_r+0x166>
 80068b0:	425b      	negs	r3, r3
 80068b2:	60eb      	str	r3, [r5, #12]
 80068b4:	2302      	movs	r3, #2
 80068b6:	4313      	orrs	r3, r2
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	783b      	ldrb	r3, [r7, #0]
 80068bc:	2b2e      	cmp	r3, #46	; 0x2e
 80068be:	d10a      	bne.n	80068d6 <_vfiprintf_r+0x182>
 80068c0:	787b      	ldrb	r3, [r7, #1]
 80068c2:	2b2a      	cmp	r3, #42	; 0x2a
 80068c4:	d137      	bne.n	8006936 <_vfiprintf_r+0x1e2>
 80068c6:	9b07      	ldr	r3, [sp, #28]
 80068c8:	3702      	adds	r7, #2
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	9207      	str	r2, [sp, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	db2d      	blt.n	8006930 <_vfiprintf_r+0x1dc>
 80068d4:	9309      	str	r3, [sp, #36]	; 0x24
 80068d6:	2203      	movs	r2, #3
 80068d8:	7839      	ldrb	r1, [r7, #0]
 80068da:	4837      	ldr	r0, [pc, #220]	; (80069b8 <_vfiprintf_r+0x264>)
 80068dc:	f000 faba 	bl	8006e54 <memchr>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d007      	beq.n	80068f4 <_vfiprintf_r+0x1a0>
 80068e4:	4b34      	ldr	r3, [pc, #208]	; (80069b8 <_vfiprintf_r+0x264>)
 80068e6:	682a      	ldr	r2, [r5, #0]
 80068e8:	1ac0      	subs	r0, r0, r3
 80068ea:	2340      	movs	r3, #64	; 0x40
 80068ec:	4083      	lsls	r3, r0
 80068ee:	4313      	orrs	r3, r2
 80068f0:	3701      	adds	r7, #1
 80068f2:	602b      	str	r3, [r5, #0]
 80068f4:	7839      	ldrb	r1, [r7, #0]
 80068f6:	1c7b      	adds	r3, r7, #1
 80068f8:	2206      	movs	r2, #6
 80068fa:	4830      	ldr	r0, [pc, #192]	; (80069bc <_vfiprintf_r+0x268>)
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	7629      	strb	r1, [r5, #24]
 8006900:	f000 faa8 	bl	8006e54 <memchr>
 8006904:	2800      	cmp	r0, #0
 8006906:	d045      	beq.n	8006994 <_vfiprintf_r+0x240>
 8006908:	4b2d      	ldr	r3, [pc, #180]	; (80069c0 <_vfiprintf_r+0x26c>)
 800690a:	2b00      	cmp	r3, #0
 800690c:	d127      	bne.n	800695e <_vfiprintf_r+0x20a>
 800690e:	2207      	movs	r2, #7
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	3307      	adds	r3, #7
 8006914:	4393      	bics	r3, r2
 8006916:	3308      	adds	r3, #8
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	696b      	ldr	r3, [r5, #20]
 800691c:	9a04      	ldr	r2, [sp, #16]
 800691e:	189b      	adds	r3, r3, r2
 8006920:	616b      	str	r3, [r5, #20]
 8006922:	e75d      	b.n	80067e0 <_vfiprintf_r+0x8c>
 8006924:	210a      	movs	r1, #10
 8006926:	434b      	muls	r3, r1
 8006928:	4667      	mov	r7, ip
 800692a:	189b      	adds	r3, r3, r2
 800692c:	3909      	subs	r1, #9
 800692e:	e7a3      	b.n	8006878 <_vfiprintf_r+0x124>
 8006930:	2301      	movs	r3, #1
 8006932:	425b      	negs	r3, r3
 8006934:	e7ce      	b.n	80068d4 <_vfiprintf_r+0x180>
 8006936:	2300      	movs	r3, #0
 8006938:	001a      	movs	r2, r3
 800693a:	3701      	adds	r7, #1
 800693c:	606b      	str	r3, [r5, #4]
 800693e:	7839      	ldrb	r1, [r7, #0]
 8006940:	1c78      	adds	r0, r7, #1
 8006942:	3930      	subs	r1, #48	; 0x30
 8006944:	4684      	mov	ip, r0
 8006946:	2909      	cmp	r1, #9
 8006948:	d903      	bls.n	8006952 <_vfiprintf_r+0x1fe>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0c3      	beq.n	80068d6 <_vfiprintf_r+0x182>
 800694e:	9209      	str	r2, [sp, #36]	; 0x24
 8006950:	e7c1      	b.n	80068d6 <_vfiprintf_r+0x182>
 8006952:	230a      	movs	r3, #10
 8006954:	435a      	muls	r2, r3
 8006956:	4667      	mov	r7, ip
 8006958:	1852      	adds	r2, r2, r1
 800695a:	3b09      	subs	r3, #9
 800695c:	e7ef      	b.n	800693e <_vfiprintf_r+0x1ea>
 800695e:	ab07      	add	r3, sp, #28
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	0022      	movs	r2, r4
 8006964:	0029      	movs	r1, r5
 8006966:	0030      	movs	r0, r6
 8006968:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <_vfiprintf_r+0x270>)
 800696a:	e000      	b.n	800696e <_vfiprintf_r+0x21a>
 800696c:	bf00      	nop
 800696e:	9004      	str	r0, [sp, #16]
 8006970:	9b04      	ldr	r3, [sp, #16]
 8006972:	3301      	adds	r3, #1
 8006974:	d1d1      	bne.n	800691a <_vfiprintf_r+0x1c6>
 8006976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006978:	07db      	lsls	r3, r3, #31
 800697a:	d405      	bmi.n	8006988 <_vfiprintf_r+0x234>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	059b      	lsls	r3, r3, #22
 8006980:	d402      	bmi.n	8006988 <_vfiprintf_r+0x234>
 8006982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006984:	f7ff fd64 	bl	8006450 <__retarget_lock_release_recursive>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	065b      	lsls	r3, r3, #25
 800698c:	d500      	bpl.n	8006990 <_vfiprintf_r+0x23c>
 800698e:	e70a      	b.n	80067a6 <_vfiprintf_r+0x52>
 8006990:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006992:	e70a      	b.n	80067aa <_vfiprintf_r+0x56>
 8006994:	ab07      	add	r3, sp, #28
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	0022      	movs	r2, r4
 800699a:	0029      	movs	r1, r5
 800699c:	0030      	movs	r0, r6
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <_vfiprintf_r+0x270>)
 80069a0:	f000 f882 	bl	8006aa8 <_printf_i>
 80069a4:	e7e3      	b.n	800696e <_vfiprintf_r+0x21a>
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	08007414 	.word	0x08007414
 80069ac:	08007434 	.word	0x08007434
 80069b0:	080073f4 	.word	0x080073f4
 80069b4:	08007454 	.word	0x08007454
 80069b8:	0800745a 	.word	0x0800745a
 80069bc:	0800745e 	.word	0x0800745e
 80069c0:	00000000 	.word	0x00000000
 80069c4:	0800672f 	.word	0x0800672f

080069c8 <_printf_common>:
 80069c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069ca:	0015      	movs	r5, r2
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	688a      	ldr	r2, [r1, #8]
 80069d0:	690b      	ldr	r3, [r1, #16]
 80069d2:	000c      	movs	r4, r1
 80069d4:	9000      	str	r0, [sp, #0]
 80069d6:	4293      	cmp	r3, r2
 80069d8:	da00      	bge.n	80069dc <_printf_common+0x14>
 80069da:	0013      	movs	r3, r2
 80069dc:	0022      	movs	r2, r4
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	3243      	adds	r2, #67	; 0x43
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d001      	beq.n	80069ec <_printf_common+0x24>
 80069e8:	3301      	adds	r3, #1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	069b      	lsls	r3, r3, #26
 80069f0:	d502      	bpl.n	80069f8 <_printf_common+0x30>
 80069f2:	682b      	ldr	r3, [r5, #0]
 80069f4:	3302      	adds	r3, #2
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	2306      	movs	r3, #6
 80069fc:	0017      	movs	r7, r2
 80069fe:	401f      	ands	r7, r3
 8006a00:	421a      	tst	r2, r3
 8006a02:	d027      	beq.n	8006a54 <_printf_common+0x8c>
 8006a04:	0023      	movs	r3, r4
 8006a06:	3343      	adds	r3, #67	; 0x43
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	4193      	sbcs	r3, r2
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	0692      	lsls	r2, r2, #26
 8006a12:	d430      	bmi.n	8006a76 <_printf_common+0xae>
 8006a14:	0022      	movs	r2, r4
 8006a16:	9901      	ldr	r1, [sp, #4]
 8006a18:	9800      	ldr	r0, [sp, #0]
 8006a1a:	9e08      	ldr	r6, [sp, #32]
 8006a1c:	3243      	adds	r2, #67	; 0x43
 8006a1e:	47b0      	blx	r6
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d025      	beq.n	8006a70 <_printf_common+0xa8>
 8006a24:	2306      	movs	r3, #6
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	682a      	ldr	r2, [r5, #0]
 8006a2a:	68e1      	ldr	r1, [r4, #12]
 8006a2c:	2500      	movs	r5, #0
 8006a2e:	4003      	ands	r3, r0
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d103      	bne.n	8006a3c <_printf_common+0x74>
 8006a34:	1a8d      	subs	r5, r1, r2
 8006a36:	43eb      	mvns	r3, r5
 8006a38:	17db      	asrs	r3, r3, #31
 8006a3a:	401d      	ands	r5, r3
 8006a3c:	68a3      	ldr	r3, [r4, #8]
 8006a3e:	6922      	ldr	r2, [r4, #16]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	dd01      	ble.n	8006a48 <_printf_common+0x80>
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	18ed      	adds	r5, r5, r3
 8006a48:	2700      	movs	r7, #0
 8006a4a:	42bd      	cmp	r5, r7
 8006a4c:	d120      	bne.n	8006a90 <_printf_common+0xc8>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e010      	b.n	8006a74 <_printf_common+0xac>
 8006a52:	3701      	adds	r7, #1
 8006a54:	68e3      	ldr	r3, [r4, #12]
 8006a56:	682a      	ldr	r2, [r5, #0]
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	42bb      	cmp	r3, r7
 8006a5c:	ddd2      	ble.n	8006a04 <_printf_common+0x3c>
 8006a5e:	0022      	movs	r2, r4
 8006a60:	2301      	movs	r3, #1
 8006a62:	9901      	ldr	r1, [sp, #4]
 8006a64:	9800      	ldr	r0, [sp, #0]
 8006a66:	9e08      	ldr	r6, [sp, #32]
 8006a68:	3219      	adds	r2, #25
 8006a6a:	47b0      	blx	r6
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d1f0      	bne.n	8006a52 <_printf_common+0x8a>
 8006a70:	2001      	movs	r0, #1
 8006a72:	4240      	negs	r0, r0
 8006a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a76:	2030      	movs	r0, #48	; 0x30
 8006a78:	18e1      	adds	r1, r4, r3
 8006a7a:	3143      	adds	r1, #67	; 0x43
 8006a7c:	7008      	strb	r0, [r1, #0]
 8006a7e:	0021      	movs	r1, r4
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	3145      	adds	r1, #69	; 0x45
 8006a84:	7809      	ldrb	r1, [r1, #0]
 8006a86:	18a2      	adds	r2, r4, r2
 8006a88:	3243      	adds	r2, #67	; 0x43
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	7011      	strb	r1, [r2, #0]
 8006a8e:	e7c1      	b.n	8006a14 <_printf_common+0x4c>
 8006a90:	0022      	movs	r2, r4
 8006a92:	2301      	movs	r3, #1
 8006a94:	9901      	ldr	r1, [sp, #4]
 8006a96:	9800      	ldr	r0, [sp, #0]
 8006a98:	9e08      	ldr	r6, [sp, #32]
 8006a9a:	321a      	adds	r2, #26
 8006a9c:	47b0      	blx	r6
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d0e6      	beq.n	8006a70 <_printf_common+0xa8>
 8006aa2:	3701      	adds	r7, #1
 8006aa4:	e7d1      	b.n	8006a4a <_printf_common+0x82>
	...

08006aa8 <_printf_i>:
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b08b      	sub	sp, #44	; 0x2c
 8006aac:	9206      	str	r2, [sp, #24]
 8006aae:	000a      	movs	r2, r1
 8006ab0:	3243      	adds	r2, #67	; 0x43
 8006ab2:	9307      	str	r3, [sp, #28]
 8006ab4:	9005      	str	r0, [sp, #20]
 8006ab6:	9204      	str	r2, [sp, #16]
 8006ab8:	7e0a      	ldrb	r2, [r1, #24]
 8006aba:	000c      	movs	r4, r1
 8006abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006abe:	2a78      	cmp	r2, #120	; 0x78
 8006ac0:	d807      	bhi.n	8006ad2 <_printf_i+0x2a>
 8006ac2:	2a62      	cmp	r2, #98	; 0x62
 8006ac4:	d809      	bhi.n	8006ada <_printf_i+0x32>
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	d100      	bne.n	8006acc <_printf_i+0x24>
 8006aca:	e0c1      	b.n	8006c50 <_printf_i+0x1a8>
 8006acc:	2a58      	cmp	r2, #88	; 0x58
 8006ace:	d100      	bne.n	8006ad2 <_printf_i+0x2a>
 8006ad0:	e08c      	b.n	8006bec <_printf_i+0x144>
 8006ad2:	0026      	movs	r6, r4
 8006ad4:	3642      	adds	r6, #66	; 0x42
 8006ad6:	7032      	strb	r2, [r6, #0]
 8006ad8:	e022      	b.n	8006b20 <_printf_i+0x78>
 8006ada:	0010      	movs	r0, r2
 8006adc:	3863      	subs	r0, #99	; 0x63
 8006ade:	2815      	cmp	r0, #21
 8006ae0:	d8f7      	bhi.n	8006ad2 <_printf_i+0x2a>
 8006ae2:	f7f9 fb1b 	bl	800011c <__gnu_thumb1_case_shi>
 8006ae6:	0016      	.short	0x0016
 8006ae8:	fff6001f 	.word	0xfff6001f
 8006aec:	fff6fff6 	.word	0xfff6fff6
 8006af0:	001ffff6 	.word	0x001ffff6
 8006af4:	fff6fff6 	.word	0xfff6fff6
 8006af8:	fff6fff6 	.word	0xfff6fff6
 8006afc:	003600a8 	.word	0x003600a8
 8006b00:	fff6009a 	.word	0xfff6009a
 8006b04:	00b9fff6 	.word	0x00b9fff6
 8006b08:	0036fff6 	.word	0x0036fff6
 8006b0c:	fff6fff6 	.word	0xfff6fff6
 8006b10:	009e      	.short	0x009e
 8006b12:	0026      	movs	r6, r4
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	3642      	adds	r6, #66	; 0x42
 8006b18:	1d11      	adds	r1, r2, #4
 8006b1a:	6019      	str	r1, [r3, #0]
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	7033      	strb	r3, [r6, #0]
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0a7      	b.n	8006c74 <_printf_i+0x1cc>
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	6819      	ldr	r1, [r3, #0]
 8006b28:	1d0a      	adds	r2, r1, #4
 8006b2a:	0605      	lsls	r5, r0, #24
 8006b2c:	d50b      	bpl.n	8006b46 <_printf_i+0x9e>
 8006b2e:	680d      	ldr	r5, [r1, #0]
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	da03      	bge.n	8006b3e <_printf_i+0x96>
 8006b36:	232d      	movs	r3, #45	; 0x2d
 8006b38:	9a04      	ldr	r2, [sp, #16]
 8006b3a:	426d      	negs	r5, r5
 8006b3c:	7013      	strb	r3, [r2, #0]
 8006b3e:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <_printf_i+0x21c>)
 8006b40:	270a      	movs	r7, #10
 8006b42:	9303      	str	r3, [sp, #12]
 8006b44:	e01b      	b.n	8006b7e <_printf_i+0xd6>
 8006b46:	680d      	ldr	r5, [r1, #0]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	0641      	lsls	r1, r0, #25
 8006b4c:	d5f1      	bpl.n	8006b32 <_printf_i+0x8a>
 8006b4e:	b22d      	sxth	r5, r5
 8006b50:	e7ef      	b.n	8006b32 <_printf_i+0x8a>
 8006b52:	680d      	ldr	r5, [r1, #0]
 8006b54:	6819      	ldr	r1, [r3, #0]
 8006b56:	1d08      	adds	r0, r1, #4
 8006b58:	6018      	str	r0, [r3, #0]
 8006b5a:	062e      	lsls	r6, r5, #24
 8006b5c:	d501      	bpl.n	8006b62 <_printf_i+0xba>
 8006b5e:	680d      	ldr	r5, [r1, #0]
 8006b60:	e003      	b.n	8006b6a <_printf_i+0xc2>
 8006b62:	066d      	lsls	r5, r5, #25
 8006b64:	d5fb      	bpl.n	8006b5e <_printf_i+0xb6>
 8006b66:	680d      	ldr	r5, [r1, #0]
 8006b68:	b2ad      	uxth	r5, r5
 8006b6a:	4b56      	ldr	r3, [pc, #344]	; (8006cc4 <_printf_i+0x21c>)
 8006b6c:	2708      	movs	r7, #8
 8006b6e:	9303      	str	r3, [sp, #12]
 8006b70:	2a6f      	cmp	r2, #111	; 0x6f
 8006b72:	d000      	beq.n	8006b76 <_printf_i+0xce>
 8006b74:	3702      	adds	r7, #2
 8006b76:	0023      	movs	r3, r4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	3343      	adds	r3, #67	; 0x43
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	6863      	ldr	r3, [r4, #4]
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	db03      	blt.n	8006b8e <_printf_i+0xe6>
 8006b86:	2204      	movs	r2, #4
 8006b88:	6821      	ldr	r1, [r4, #0]
 8006b8a:	4391      	bics	r1, r2
 8006b8c:	6021      	str	r1, [r4, #0]
 8006b8e:	2d00      	cmp	r5, #0
 8006b90:	d102      	bne.n	8006b98 <_printf_i+0xf0>
 8006b92:	9e04      	ldr	r6, [sp, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <_printf_i+0x10a>
 8006b98:	9e04      	ldr	r6, [sp, #16]
 8006b9a:	0028      	movs	r0, r5
 8006b9c:	0039      	movs	r1, r7
 8006b9e:	f7f9 fb4d 	bl	800023c <__aeabi_uidivmod>
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	3e01      	subs	r6, #1
 8006ba6:	5c5b      	ldrb	r3, [r3, r1]
 8006ba8:	7033      	strb	r3, [r6, #0]
 8006baa:	002b      	movs	r3, r5
 8006bac:	0005      	movs	r5, r0
 8006bae:	429f      	cmp	r7, r3
 8006bb0:	d9f3      	bls.n	8006b9a <_printf_i+0xf2>
 8006bb2:	2f08      	cmp	r7, #8
 8006bb4:	d109      	bne.n	8006bca <_printf_i+0x122>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d506      	bpl.n	8006bca <_printf_i+0x122>
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	6922      	ldr	r2, [r4, #16]
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	dc02      	bgt.n	8006bca <_printf_i+0x122>
 8006bc4:	2330      	movs	r3, #48	; 0x30
 8006bc6:	3e01      	subs	r6, #1
 8006bc8:	7033      	strb	r3, [r6, #0]
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	1b9b      	subs	r3, r3, r6
 8006bce:	6123      	str	r3, [r4, #16]
 8006bd0:	9b07      	ldr	r3, [sp, #28]
 8006bd2:	0021      	movs	r1, r4
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	9805      	ldr	r0, [sp, #20]
 8006bd8:	9b06      	ldr	r3, [sp, #24]
 8006bda:	aa09      	add	r2, sp, #36	; 0x24
 8006bdc:	f7ff fef4 	bl	80069c8 <_printf_common>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d14c      	bne.n	8006c7e <_printf_i+0x1d6>
 8006be4:	2001      	movs	r0, #1
 8006be6:	4240      	negs	r0, r0
 8006be8:	b00b      	add	sp, #44	; 0x2c
 8006bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bec:	3145      	adds	r1, #69	; 0x45
 8006bee:	700a      	strb	r2, [r1, #0]
 8006bf0:	4a34      	ldr	r2, [pc, #208]	; (8006cc4 <_printf_i+0x21c>)
 8006bf2:	9203      	str	r2, [sp, #12]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	6821      	ldr	r1, [r4, #0]
 8006bf8:	ca20      	ldmia	r2!, {r5}
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	0608      	lsls	r0, r1, #24
 8006bfe:	d516      	bpl.n	8006c2e <_printf_i+0x186>
 8006c00:	07cb      	lsls	r3, r1, #31
 8006c02:	d502      	bpl.n	8006c0a <_printf_i+0x162>
 8006c04:	2320      	movs	r3, #32
 8006c06:	4319      	orrs	r1, r3
 8006c08:	6021      	str	r1, [r4, #0]
 8006c0a:	2710      	movs	r7, #16
 8006c0c:	2d00      	cmp	r5, #0
 8006c0e:	d1b2      	bne.n	8006b76 <_printf_i+0xce>
 8006c10:	2320      	movs	r3, #32
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	439a      	bics	r2, r3
 8006c16:	6022      	str	r2, [r4, #0]
 8006c18:	e7ad      	b.n	8006b76 <_printf_i+0xce>
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	6809      	ldr	r1, [r1, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	6022      	str	r2, [r4, #0]
 8006c22:	0022      	movs	r2, r4
 8006c24:	2178      	movs	r1, #120	; 0x78
 8006c26:	3245      	adds	r2, #69	; 0x45
 8006c28:	7011      	strb	r1, [r2, #0]
 8006c2a:	4a27      	ldr	r2, [pc, #156]	; (8006cc8 <_printf_i+0x220>)
 8006c2c:	e7e1      	b.n	8006bf2 <_printf_i+0x14a>
 8006c2e:	0648      	lsls	r0, r1, #25
 8006c30:	d5e6      	bpl.n	8006c00 <_printf_i+0x158>
 8006c32:	b2ad      	uxth	r5, r5
 8006c34:	e7e4      	b.n	8006c00 <_printf_i+0x158>
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	680d      	ldr	r5, [r1, #0]
 8006c3a:	1d10      	adds	r0, r2, #4
 8006c3c:	6949      	ldr	r1, [r1, #20]
 8006c3e:	6018      	str	r0, [r3, #0]
 8006c40:	6813      	ldr	r3, [r2, #0]
 8006c42:	062e      	lsls	r6, r5, #24
 8006c44:	d501      	bpl.n	8006c4a <_printf_i+0x1a2>
 8006c46:	6019      	str	r1, [r3, #0]
 8006c48:	e002      	b.n	8006c50 <_printf_i+0x1a8>
 8006c4a:	066d      	lsls	r5, r5, #25
 8006c4c:	d5fb      	bpl.n	8006c46 <_printf_i+0x19e>
 8006c4e:	8019      	strh	r1, [r3, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9e04      	ldr	r6, [sp, #16]
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	e7bb      	b.n	8006bd0 <_printf_i+0x128>
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	1d11      	adds	r1, r2, #4
 8006c5c:	6019      	str	r1, [r3, #0]
 8006c5e:	6816      	ldr	r6, [r2, #0]
 8006c60:	2100      	movs	r1, #0
 8006c62:	0030      	movs	r0, r6
 8006c64:	6862      	ldr	r2, [r4, #4]
 8006c66:	f000 f8f5 	bl	8006e54 <memchr>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d001      	beq.n	8006c72 <_printf_i+0x1ca>
 8006c6e:	1b80      	subs	r0, r0, r6
 8006c70:	6060      	str	r0, [r4, #4]
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9a04      	ldr	r2, [sp, #16]
 8006c7a:	7013      	strb	r3, [r2, #0]
 8006c7c:	e7a8      	b.n	8006bd0 <_printf_i+0x128>
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	0032      	movs	r2, r6
 8006c82:	9906      	ldr	r1, [sp, #24]
 8006c84:	9805      	ldr	r0, [sp, #20]
 8006c86:	9d07      	ldr	r5, [sp, #28]
 8006c88:	47a8      	blx	r5
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	d0aa      	beq.n	8006be4 <_printf_i+0x13c>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	079b      	lsls	r3, r3, #30
 8006c92:	d415      	bmi.n	8006cc0 <_printf_i+0x218>
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	68e0      	ldr	r0, [r4, #12]
 8006c98:	4298      	cmp	r0, r3
 8006c9a:	daa5      	bge.n	8006be8 <_printf_i+0x140>
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	e7a3      	b.n	8006be8 <_printf_i+0x140>
 8006ca0:	0022      	movs	r2, r4
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	9906      	ldr	r1, [sp, #24]
 8006ca6:	9805      	ldr	r0, [sp, #20]
 8006ca8:	9e07      	ldr	r6, [sp, #28]
 8006caa:	3219      	adds	r2, #25
 8006cac:	47b0      	blx	r6
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	d098      	beq.n	8006be4 <_printf_i+0x13c>
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	68e3      	ldr	r3, [r4, #12]
 8006cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	dcf0      	bgt.n	8006ca0 <_printf_i+0x1f8>
 8006cbe:	e7e9      	b.n	8006c94 <_printf_i+0x1ec>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	e7f7      	b.n	8006cb4 <_printf_i+0x20c>
 8006cc4:	08007465 	.word	0x08007465
 8006cc8:	08007476 	.word	0x08007476

08006ccc <_sbrk_r>:
 8006ccc:	2300      	movs	r3, #0
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	4d06      	ldr	r5, [pc, #24]	; (8006cec <_sbrk_r+0x20>)
 8006cd2:	0004      	movs	r4, r0
 8006cd4:	0008      	movs	r0, r1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	f7fb fa64 	bl	80021a4 <_sbrk>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d103      	bne.n	8006ce8 <_sbrk_r+0x1c>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d000      	beq.n	8006ce8 <_sbrk_r+0x1c>
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	20000190 	.word	0x20000190

08006cf0 <__sread>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	000c      	movs	r4, r1
 8006cf4:	250e      	movs	r5, #14
 8006cf6:	5f49      	ldrsh	r1, [r1, r5]
 8006cf8:	f000 f8c8 	bl	8006e8c <_read_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	db03      	blt.n	8006d08 <__sread+0x18>
 8006d00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d02:	181b      	adds	r3, r3, r0
 8006d04:	6563      	str	r3, [r4, #84]	; 0x54
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	4a02      	ldr	r2, [pc, #8]	; (8006d14 <__sread+0x24>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	e7f9      	b.n	8006d06 <__sread+0x16>
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	ffffefff 	.word	0xffffefff

08006d18 <__swrite>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	001f      	movs	r7, r3
 8006d1c:	898b      	ldrh	r3, [r1, #12]
 8006d1e:	0005      	movs	r5, r0
 8006d20:	000c      	movs	r4, r1
 8006d22:	0016      	movs	r6, r2
 8006d24:	05db      	lsls	r3, r3, #23
 8006d26:	d505      	bpl.n	8006d34 <__swrite+0x1c>
 8006d28:	230e      	movs	r3, #14
 8006d2a:	5ec9      	ldrsh	r1, [r1, r3]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2302      	movs	r3, #2
 8006d30:	f000 f87c 	bl	8006e2c <_lseek_r>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <__swrite+0x34>)
 8006d38:	0028      	movs	r0, r5
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	0032      	movs	r2, r6
 8006d40:	230e      	movs	r3, #14
 8006d42:	5ee1      	ldrsh	r1, [r4, r3]
 8006d44:	003b      	movs	r3, r7
 8006d46:	f000 f81f 	bl	8006d88 <_write_r>
 8006d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4c:	ffffefff 	.word	0xffffefff

08006d50 <__sseek>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	000c      	movs	r4, r1
 8006d54:	250e      	movs	r5, #14
 8006d56:	5f49      	ldrsh	r1, [r1, r5]
 8006d58:	f000 f868 	bl	8006e2c <_lseek_r>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	1c42      	adds	r2, r0, #1
 8006d60:	d103      	bne.n	8006d6a <__sseek+0x1a>
 8006d62:	4a05      	ldr	r2, [pc, #20]	; (8006d78 <__sseek+0x28>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	0152      	lsls	r2, r2, #5
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	6560      	str	r0, [r4, #84]	; 0x54
 8006d74:	e7f8      	b.n	8006d68 <__sseek+0x18>
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	ffffefff 	.word	0xffffefff

08006d7c <__sclose>:
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	230e      	movs	r3, #14
 8006d80:	5ec9      	ldrsh	r1, [r1, r3]
 8006d82:	f000 f81d 	bl	8006dc0 <_close_r>
 8006d86:	bd10      	pop	{r4, pc}

08006d88 <_write_r>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	0004      	movs	r4, r0
 8006d8c:	0008      	movs	r0, r1
 8006d8e:	0011      	movs	r1, r2
 8006d90:	001a      	movs	r2, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	4d05      	ldr	r5, [pc, #20]	; (8006dac <_write_r+0x24>)
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fb f9bb 	bl	8002112 <_write>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d103      	bne.n	8006da8 <_write_r+0x20>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d000      	beq.n	8006da8 <_write_r+0x20>
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	bd70      	pop	{r4, r5, r6, pc}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	20000190 	.word	0x20000190

08006db0 <abort>:
 8006db0:	2006      	movs	r0, #6
 8006db2:	b510      	push	{r4, lr}
 8006db4:	f000 f8a8 	bl	8006f08 <raise>
 8006db8:	2001      	movs	r0, #1
 8006dba:	f7fb f981 	bl	80020c0 <_exit>
	...

08006dc0 <_close_r>:
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	4d06      	ldr	r5, [pc, #24]	; (8006de0 <_close_r+0x20>)
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	0008      	movs	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fb f9bd 	bl	800214a <_close>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_close_r+0x1c>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d000      	beq.n	8006ddc <_close_r+0x1c>
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	20000190 	.word	0x20000190

08006de4 <_fstat_r>:
 8006de4:	2300      	movs	r3, #0
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	4d06      	ldr	r5, [pc, #24]	; (8006e04 <_fstat_r+0x20>)
 8006dea:	0004      	movs	r4, r0
 8006dec:	0008      	movs	r0, r1
 8006dee:	0011      	movs	r1, r2
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	f7fb f9b4 	bl	800215e <_fstat>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d103      	bne.n	8006e02 <_fstat_r+0x1e>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d000      	beq.n	8006e02 <_fstat_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	20000190 	.word	0x20000190

08006e08 <_isatty_r>:
 8006e08:	2300      	movs	r3, #0
 8006e0a:	b570      	push	{r4, r5, r6, lr}
 8006e0c:	4d06      	ldr	r5, [pc, #24]	; (8006e28 <_isatty_r+0x20>)
 8006e0e:	0004      	movs	r4, r0
 8006e10:	0008      	movs	r0, r1
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	f7fb f9b1 	bl	800217a <_isatty>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d103      	bne.n	8006e24 <_isatty_r+0x1c>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d000      	beq.n	8006e24 <_isatty_r+0x1c>
 8006e22:	6023      	str	r3, [r4, #0]
 8006e24:	bd70      	pop	{r4, r5, r6, pc}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	20000190 	.word	0x20000190

08006e2c <_lseek_r>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	0004      	movs	r4, r0
 8006e30:	0008      	movs	r0, r1
 8006e32:	0011      	movs	r1, r2
 8006e34:	001a      	movs	r2, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	4d05      	ldr	r5, [pc, #20]	; (8006e50 <_lseek_r+0x24>)
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f7fb f9a6 	bl	800218c <_lseek>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d103      	bne.n	8006e4c <_lseek_r+0x20>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d000      	beq.n	8006e4c <_lseek_r+0x20>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	20000190 	.word	0x20000190

08006e54 <memchr>:
 8006e54:	b2c9      	uxtb	r1, r1
 8006e56:	1882      	adds	r2, r0, r2
 8006e58:	4290      	cmp	r0, r2
 8006e5a:	d101      	bne.n	8006e60 <memchr+0xc>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4770      	bx	lr
 8006e60:	7803      	ldrb	r3, [r0, #0]
 8006e62:	428b      	cmp	r3, r1
 8006e64:	d0fb      	beq.n	8006e5e <memchr+0xa>
 8006e66:	3001      	adds	r0, #1
 8006e68:	e7f6      	b.n	8006e58 <memchr+0x4>
	...

08006e6c <__malloc_lock>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	4802      	ldr	r0, [pc, #8]	; (8006e78 <__malloc_lock+0xc>)
 8006e70:	f7ff faed 	bl	800644e <__retarget_lock_acquire_recursive>
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20000184 	.word	0x20000184

08006e7c <__malloc_unlock>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4802      	ldr	r0, [pc, #8]	; (8006e88 <__malloc_unlock+0xc>)
 8006e80:	f7ff fae6 	bl	8006450 <__retarget_lock_release_recursive>
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	20000184 	.word	0x20000184

08006e8c <_read_r>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	0004      	movs	r4, r0
 8006e90:	0008      	movs	r0, r1
 8006e92:	0011      	movs	r1, r2
 8006e94:	001a      	movs	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	4d05      	ldr	r5, [pc, #20]	; (8006eb0 <_read_r+0x24>)
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	f7fb f91c 	bl	80020d8 <_read>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d103      	bne.n	8006eac <_read_r+0x20>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d000      	beq.n	8006eac <_read_r+0x20>
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	bd70      	pop	{r4, r5, r6, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	20000190 	.word	0x20000190

08006eb4 <_raise_r>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	0004      	movs	r4, r0
 8006eb8:	000d      	movs	r5, r1
 8006eba:	291f      	cmp	r1, #31
 8006ebc:	d904      	bls.n	8006ec8 <_raise_r+0x14>
 8006ebe:	2316      	movs	r3, #22
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	4240      	negs	r0, r0
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <_raise_r+0x24>
 8006ece:	008a      	lsls	r2, r1, #2
 8006ed0:	189b      	adds	r3, r3, r2
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	d108      	bne.n	8006eea <_raise_r+0x36>
 8006ed8:	0020      	movs	r0, r4
 8006eda:	f000 f831 	bl	8006f40 <_getpid_r>
 8006ede:	002a      	movs	r2, r5
 8006ee0:	0001      	movs	r1, r0
 8006ee2:	0020      	movs	r0, r4
 8006ee4:	f000 f81a 	bl	8006f1c <_kill_r>
 8006ee8:	e7ed      	b.n	8006ec6 <_raise_r+0x12>
 8006eea:	2000      	movs	r0, #0
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	d0ea      	beq.n	8006ec6 <_raise_r+0x12>
 8006ef0:	1c51      	adds	r1, r2, #1
 8006ef2:	d103      	bne.n	8006efc <_raise_r+0x48>
 8006ef4:	2316      	movs	r3, #22
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	e7e4      	b.n	8006ec6 <_raise_r+0x12>
 8006efc:	2400      	movs	r4, #0
 8006efe:	0028      	movs	r0, r5
 8006f00:	601c      	str	r4, [r3, #0]
 8006f02:	4790      	blx	r2
 8006f04:	0020      	movs	r0, r4
 8006f06:	e7de      	b.n	8006ec6 <_raise_r+0x12>

08006f08 <raise>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <raise+0x10>)
 8006f0c:	0001      	movs	r1, r0
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	f7ff ffd0 	bl	8006eb4 <_raise_r>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	2000001c 	.word	0x2000001c

08006f1c <_kill_r>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b570      	push	{r4, r5, r6, lr}
 8006f20:	4d06      	ldr	r5, [pc, #24]	; (8006f3c <_kill_r+0x20>)
 8006f22:	0004      	movs	r4, r0
 8006f24:	0008      	movs	r0, r1
 8006f26:	0011      	movs	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fb f8b9 	bl	80020a0 <_kill>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d103      	bne.n	8006f3a <_kill_r+0x1e>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d000      	beq.n	8006f3a <_kill_r+0x1e>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	20000190 	.word	0x20000190

08006f40 <_getpid_r>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	f7fb f8a7 	bl	8002094 <_getpid>
 8006f46:	bd10      	pop	{r4, pc}

08006f48 <_init>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr

08006f54 <_fini>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr

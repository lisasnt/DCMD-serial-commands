
DCMD-serial-commands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b50  08007b50  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b58  08007b58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000080  08007be0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08007be0  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff0f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002913  00000000  00000000  0002ffb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000328d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000335d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013eca  00000000  00000000  000341a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113d1  00000000  00000000  00048072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070d10  00000000  00000000  00059443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  000ca1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007388 	.word	0x08007388

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08007388 	.word	0x08007388

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cfrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	0008      	movs	r0, r1
 800024c:	4661      	mov	r1, ip
 800024e:	e7ff      	b.n	8000250 <__aeabi_cfcmpeq>

08000250 <__aeabi_cfcmpeq>:
 8000250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000252:	f000 fae9 	bl	8000828 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	d401      	bmi.n	800025e <__aeabi_cfcmpeq+0xe>
 800025a:	2100      	movs	r1, #0
 800025c:	42c8      	cmn	r0, r1
 800025e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000260 <__aeabi_fcmpeq>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fa75 	bl	8000750 <__eqsf2>
 8000266:	4240      	negs	r0, r0
 8000268:	3001      	adds	r0, #1
 800026a:	bd10      	pop	{r4, pc}

0800026c <__aeabi_fcmplt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fadb 	bl	8000828 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	db01      	blt.n	800027a <__aeabi_fcmplt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmple>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fad1 	bl	8000828 <__lesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dd01      	ble.n	800028e <__aeabi_fcmple+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpgt>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fa81 	bl	800079c <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	dc01      	bgt.n	80002a2 <__aeabi_fcmpgt+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_fcmpge>:
 80002a8:	b510      	push	{r4, lr}
 80002aa:	f000 fa77 	bl	800079c <__gesf2>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	da01      	bge.n	80002b6 <__aeabi_fcmpge+0xe>
 80002b2:	2000      	movs	r0, #0
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_uldivmod>:
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d111      	bne.n	80002e4 <__aeabi_uldivmod+0x28>
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	d10f      	bne.n	80002e4 <__aeabi_uldivmod+0x28>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d100      	bne.n	80002ca <__aeabi_uldivmod+0xe>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d002      	beq.n	80002d2 <__aeabi_uldivmod+0x16>
 80002cc:	2100      	movs	r1, #0
 80002ce:	43c9      	mvns	r1, r1
 80002d0:	0008      	movs	r0, r1
 80002d2:	b407      	push	{r0, r1, r2}
 80002d4:	4802      	ldr	r0, [pc, #8]	; (80002e0 <__aeabi_uldivmod+0x24>)
 80002d6:	a102      	add	r1, pc, #8	; (adr r1, 80002e0 <__aeabi_uldivmod+0x24>)
 80002d8:	1840      	adds	r0, r0, r1
 80002da:	9002      	str	r0, [sp, #8]
 80002dc:	bd03      	pop	{r0, r1, pc}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	ffffff65 	.word	0xffffff65
 80002e4:	b403      	push	{r0, r1}
 80002e6:	4668      	mov	r0, sp
 80002e8:	b501      	push	{r0, lr}
 80002ea:	9802      	ldr	r0, [sp, #8]
 80002ec:	f000 f84c 	bl	8000388 <__udivmoddi4>
 80002f0:	9b01      	ldr	r3, [sp, #4]
 80002f2:	469e      	mov	lr, r3
 80002f4:	b002      	add	sp, #8
 80002f6:	bc0c      	pop	{r2, r3}
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_lmul>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	46ce      	mov	lr, r9
 8000300:	4647      	mov	r7, r8
 8000302:	b580      	push	{r7, lr}
 8000304:	0007      	movs	r7, r0
 8000306:	4699      	mov	r9, r3
 8000308:	0c3b      	lsrs	r3, r7, #16
 800030a:	469c      	mov	ip, r3
 800030c:	0413      	lsls	r3, r2, #16
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	001d      	movs	r5, r3
 8000312:	000e      	movs	r6, r1
 8000314:	4661      	mov	r1, ip
 8000316:	0400      	lsls	r0, r0, #16
 8000318:	0c14      	lsrs	r4, r2, #16
 800031a:	0c00      	lsrs	r0, r0, #16
 800031c:	4345      	muls	r5, r0
 800031e:	434b      	muls	r3, r1
 8000320:	4360      	muls	r0, r4
 8000322:	4361      	muls	r1, r4
 8000324:	18c0      	adds	r0, r0, r3
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	1820      	adds	r0, r4, r0
 800032a:	468c      	mov	ip, r1
 800032c:	4283      	cmp	r3, r0
 800032e:	d903      	bls.n	8000338 <__aeabi_lmul+0x3c>
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	025b      	lsls	r3, r3, #9
 8000334:	4698      	mov	r8, r3
 8000336:	44c4      	add	ip, r8
 8000338:	4649      	mov	r1, r9
 800033a:	4379      	muls	r1, r7
 800033c:	4372      	muls	r2, r6
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	4463      	add	r3, ip
 8000342:	042d      	lsls	r5, r5, #16
 8000344:	0c2d      	lsrs	r5, r5, #16
 8000346:	18c9      	adds	r1, r1, r3
 8000348:	0400      	lsls	r0, r0, #16
 800034a:	1940      	adds	r0, r0, r5
 800034c:	1889      	adds	r1, r1, r2
 800034e:	bcc0      	pop	{r6, r7}
 8000350:	46b9      	mov	r9, r7
 8000352:	46b0      	mov	r8, r6
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)

08000358 <__aeabi_f2uiz>:
 8000358:	219e      	movs	r1, #158	; 0x9e
 800035a:	b510      	push	{r4, lr}
 800035c:	05c9      	lsls	r1, r1, #23
 800035e:	1c04      	adds	r4, r0, #0
 8000360:	f7ff ffa2 	bl	80002a8 <__aeabi_fcmpge>
 8000364:	2800      	cmp	r0, #0
 8000366:	d103      	bne.n	8000370 <__aeabi_f2uiz+0x18>
 8000368:	1c20      	adds	r0, r4, #0
 800036a:	f000 fd75 	bl	8000e58 <__aeabi_f2iz>
 800036e:	bd10      	pop	{r4, pc}
 8000370:	219e      	movs	r1, #158	; 0x9e
 8000372:	1c20      	adds	r0, r4, #0
 8000374:	05c9      	lsls	r1, r1, #23
 8000376:	f000 fbc1 	bl	8000afc <__aeabi_fsub>
 800037a:	f000 fd6d 	bl	8000e58 <__aeabi_f2iz>
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	061b      	lsls	r3, r3, #24
 8000382:	469c      	mov	ip, r3
 8000384:	4460      	add	r0, ip
 8000386:	e7f2      	b.n	800036e <__aeabi_f2uiz+0x16>

08000388 <__udivmoddi4>:
 8000388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038a:	4657      	mov	r7, sl
 800038c:	464e      	mov	r6, r9
 800038e:	4645      	mov	r5, r8
 8000390:	46de      	mov	lr, fp
 8000392:	b5e0      	push	{r5, r6, r7, lr}
 8000394:	0004      	movs	r4, r0
 8000396:	000d      	movs	r5, r1
 8000398:	4692      	mov	sl, r2
 800039a:	4699      	mov	r9, r3
 800039c:	b083      	sub	sp, #12
 800039e:	428b      	cmp	r3, r1
 80003a0:	d830      	bhi.n	8000404 <__udivmoddi4+0x7c>
 80003a2:	d02d      	beq.n	8000400 <__udivmoddi4+0x78>
 80003a4:	4649      	mov	r1, r9
 80003a6:	4650      	mov	r0, sl
 80003a8:	f001 f9d2 	bl	8001750 <__clzdi2>
 80003ac:	0029      	movs	r1, r5
 80003ae:	0006      	movs	r6, r0
 80003b0:	0020      	movs	r0, r4
 80003b2:	f001 f9cd 	bl	8001750 <__clzdi2>
 80003b6:	1a33      	subs	r3, r6, r0
 80003b8:	4698      	mov	r8, r3
 80003ba:	3b20      	subs	r3, #32
 80003bc:	469b      	mov	fp, r3
 80003be:	d433      	bmi.n	8000428 <__udivmoddi4+0xa0>
 80003c0:	465a      	mov	r2, fp
 80003c2:	4653      	mov	r3, sl
 80003c4:	4093      	lsls	r3, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	001f      	movs	r7, r3
 80003ca:	4653      	mov	r3, sl
 80003cc:	4093      	lsls	r3, r2
 80003ce:	001e      	movs	r6, r3
 80003d0:	42af      	cmp	r7, r5
 80003d2:	d83a      	bhi.n	800044a <__udivmoddi4+0xc2>
 80003d4:	42af      	cmp	r7, r5
 80003d6:	d100      	bne.n	80003da <__udivmoddi4+0x52>
 80003d8:	e078      	b.n	80004cc <__udivmoddi4+0x144>
 80003da:	465b      	mov	r3, fp
 80003dc:	1ba4      	subs	r4, r4, r6
 80003de:	41bd      	sbcs	r5, r7
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	da00      	bge.n	80003e6 <__udivmoddi4+0x5e>
 80003e4:	e075      	b.n	80004d2 <__udivmoddi4+0x14a>
 80003e6:	2200      	movs	r2, #0
 80003e8:	2300      	movs	r3, #0
 80003ea:	9200      	str	r2, [sp, #0]
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	2301      	movs	r3, #1
 80003f0:	465a      	mov	r2, fp
 80003f2:	4093      	lsls	r3, r2
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2301      	movs	r3, #1
 80003f8:	4642      	mov	r2, r8
 80003fa:	4093      	lsls	r3, r2
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	e028      	b.n	8000452 <__udivmoddi4+0xca>
 8000400:	4282      	cmp	r2, r0
 8000402:	d9cf      	bls.n	80003a4 <__udivmoddi4+0x1c>
 8000404:	2200      	movs	r2, #0
 8000406:	2300      	movs	r3, #0
 8000408:	9200      	str	r2, [sp, #0]
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <__udivmoddi4+0x8e>
 8000412:	601c      	str	r4, [r3, #0]
 8000414:	605d      	str	r5, [r3, #4]
 8000416:	9800      	ldr	r0, [sp, #0]
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	b003      	add	sp, #12
 800041c:	bcf0      	pop	{r4, r5, r6, r7}
 800041e:	46bb      	mov	fp, r7
 8000420:	46b2      	mov	sl, r6
 8000422:	46a9      	mov	r9, r5
 8000424:	46a0      	mov	r8, r4
 8000426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000428:	4642      	mov	r2, r8
 800042a:	2320      	movs	r3, #32
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	4652      	mov	r2, sl
 8000430:	40da      	lsrs	r2, r3
 8000432:	4641      	mov	r1, r8
 8000434:	0013      	movs	r3, r2
 8000436:	464a      	mov	r2, r9
 8000438:	408a      	lsls	r2, r1
 800043a:	0017      	movs	r7, r2
 800043c:	4642      	mov	r2, r8
 800043e:	431f      	orrs	r7, r3
 8000440:	4653      	mov	r3, sl
 8000442:	4093      	lsls	r3, r2
 8000444:	001e      	movs	r6, r3
 8000446:	42af      	cmp	r7, r5
 8000448:	d9c4      	bls.n	80003d4 <__udivmoddi4+0x4c>
 800044a:	2200      	movs	r2, #0
 800044c:	2300      	movs	r3, #0
 800044e:	9200      	str	r2, [sp, #0]
 8000450:	9301      	str	r3, [sp, #4]
 8000452:	4643      	mov	r3, r8
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0d9      	beq.n	800040c <__udivmoddi4+0x84>
 8000458:	07fb      	lsls	r3, r7, #31
 800045a:	0872      	lsrs	r2, r6, #1
 800045c:	431a      	orrs	r2, r3
 800045e:	4646      	mov	r6, r8
 8000460:	087b      	lsrs	r3, r7, #1
 8000462:	e00e      	b.n	8000482 <__udivmoddi4+0xfa>
 8000464:	42ab      	cmp	r3, r5
 8000466:	d101      	bne.n	800046c <__udivmoddi4+0xe4>
 8000468:	42a2      	cmp	r2, r4
 800046a:	d80c      	bhi.n	8000486 <__udivmoddi4+0xfe>
 800046c:	1aa4      	subs	r4, r4, r2
 800046e:	419d      	sbcs	r5, r3
 8000470:	2001      	movs	r0, #1
 8000472:	1924      	adds	r4, r4, r4
 8000474:	416d      	adcs	r5, r5
 8000476:	2100      	movs	r1, #0
 8000478:	3e01      	subs	r6, #1
 800047a:	1824      	adds	r4, r4, r0
 800047c:	414d      	adcs	r5, r1
 800047e:	2e00      	cmp	r6, #0
 8000480:	d006      	beq.n	8000490 <__udivmoddi4+0x108>
 8000482:	42ab      	cmp	r3, r5
 8000484:	d9ee      	bls.n	8000464 <__udivmoddi4+0xdc>
 8000486:	3e01      	subs	r6, #1
 8000488:	1924      	adds	r4, r4, r4
 800048a:	416d      	adcs	r5, r5
 800048c:	2e00      	cmp	r6, #0
 800048e:	d1f8      	bne.n	8000482 <__udivmoddi4+0xfa>
 8000490:	9800      	ldr	r0, [sp, #0]
 8000492:	9901      	ldr	r1, [sp, #4]
 8000494:	465b      	mov	r3, fp
 8000496:	1900      	adds	r0, r0, r4
 8000498:	4169      	adcs	r1, r5
 800049a:	2b00      	cmp	r3, #0
 800049c:	db24      	blt.n	80004e8 <__udivmoddi4+0x160>
 800049e:	002b      	movs	r3, r5
 80004a0:	465a      	mov	r2, fp
 80004a2:	4644      	mov	r4, r8
 80004a4:	40d3      	lsrs	r3, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	40e2      	lsrs	r2, r4
 80004aa:	001c      	movs	r4, r3
 80004ac:	465b      	mov	r3, fp
 80004ae:	0015      	movs	r5, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	db2a      	blt.n	800050a <__udivmoddi4+0x182>
 80004b4:	0026      	movs	r6, r4
 80004b6:	409e      	lsls	r6, r3
 80004b8:	0033      	movs	r3, r6
 80004ba:	0026      	movs	r6, r4
 80004bc:	4647      	mov	r7, r8
 80004be:	40be      	lsls	r6, r7
 80004c0:	0032      	movs	r2, r6
 80004c2:	1a80      	subs	r0, r0, r2
 80004c4:	4199      	sbcs	r1, r3
 80004c6:	9000      	str	r0, [sp, #0]
 80004c8:	9101      	str	r1, [sp, #4]
 80004ca:	e79f      	b.n	800040c <__udivmoddi4+0x84>
 80004cc:	42a3      	cmp	r3, r4
 80004ce:	d8bc      	bhi.n	800044a <__udivmoddi4+0xc2>
 80004d0:	e783      	b.n	80003da <__udivmoddi4+0x52>
 80004d2:	4642      	mov	r2, r8
 80004d4:	2320      	movs	r3, #32
 80004d6:	2100      	movs	r1, #0
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	2200      	movs	r2, #0
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	9201      	str	r2, [sp, #4]
 80004e0:	2201      	movs	r2, #1
 80004e2:	40da      	lsrs	r2, r3
 80004e4:	9201      	str	r2, [sp, #4]
 80004e6:	e786      	b.n	80003f6 <__udivmoddi4+0x6e>
 80004e8:	4642      	mov	r2, r8
 80004ea:	2320      	movs	r3, #32
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	002a      	movs	r2, r5
 80004f0:	4646      	mov	r6, r8
 80004f2:	409a      	lsls	r2, r3
 80004f4:	0023      	movs	r3, r4
 80004f6:	40f3      	lsrs	r3, r6
 80004f8:	4644      	mov	r4, r8
 80004fa:	4313      	orrs	r3, r2
 80004fc:	002a      	movs	r2, r5
 80004fe:	40e2      	lsrs	r2, r4
 8000500:	001c      	movs	r4, r3
 8000502:	465b      	mov	r3, fp
 8000504:	0015      	movs	r5, r2
 8000506:	2b00      	cmp	r3, #0
 8000508:	dad4      	bge.n	80004b4 <__udivmoddi4+0x12c>
 800050a:	4642      	mov	r2, r8
 800050c:	002f      	movs	r7, r5
 800050e:	2320      	movs	r3, #32
 8000510:	0026      	movs	r6, r4
 8000512:	4097      	lsls	r7, r2
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	40de      	lsrs	r6, r3
 8000518:	003b      	movs	r3, r7
 800051a:	4333      	orrs	r3, r6
 800051c:	e7cd      	b.n	80004ba <__udivmoddi4+0x132>
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_fdiv>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	464f      	mov	r7, r9
 8000524:	4646      	mov	r6, r8
 8000526:	46d6      	mov	lr, sl
 8000528:	0245      	lsls	r5, r0, #9
 800052a:	b5c0      	push	{r6, r7, lr}
 800052c:	0047      	lsls	r7, r0, #1
 800052e:	1c0c      	adds	r4, r1, #0
 8000530:	0a6d      	lsrs	r5, r5, #9
 8000532:	0e3f      	lsrs	r7, r7, #24
 8000534:	0fc6      	lsrs	r6, r0, #31
 8000536:	2f00      	cmp	r7, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fdiv+0x1c>
 800053a:	e070      	b.n	800061e <__aeabi_fdiv+0xfe>
 800053c:	2fff      	cmp	r7, #255	; 0xff
 800053e:	d100      	bne.n	8000542 <__aeabi_fdiv+0x22>
 8000540:	e075      	b.n	800062e <__aeabi_fdiv+0x10e>
 8000542:	00eb      	lsls	r3, r5, #3
 8000544:	2580      	movs	r5, #128	; 0x80
 8000546:	04ed      	lsls	r5, r5, #19
 8000548:	431d      	orrs	r5, r3
 800054a:	2300      	movs	r3, #0
 800054c:	4699      	mov	r9, r3
 800054e:	469a      	mov	sl, r3
 8000550:	3f7f      	subs	r7, #127	; 0x7f
 8000552:	0260      	lsls	r0, r4, #9
 8000554:	0a43      	lsrs	r3, r0, #9
 8000556:	4698      	mov	r8, r3
 8000558:	0063      	lsls	r3, r4, #1
 800055a:	0e1b      	lsrs	r3, r3, #24
 800055c:	0fe4      	lsrs	r4, r4, #31
 800055e:	2b00      	cmp	r3, #0
 8000560:	d04e      	beq.n	8000600 <__aeabi_fdiv+0xe0>
 8000562:	2bff      	cmp	r3, #255	; 0xff
 8000564:	d046      	beq.n	80005f4 <__aeabi_fdiv+0xd4>
 8000566:	4642      	mov	r2, r8
 8000568:	00d0      	lsls	r0, r2, #3
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	04d2      	lsls	r2, r2, #19
 800056e:	4302      	orrs	r2, r0
 8000570:	4690      	mov	r8, r2
 8000572:	2200      	movs	r2, #0
 8000574:	3b7f      	subs	r3, #127	; 0x7f
 8000576:	0031      	movs	r1, r6
 8000578:	1aff      	subs	r7, r7, r3
 800057a:	464b      	mov	r3, r9
 800057c:	4061      	eors	r1, r4
 800057e:	b2c9      	uxtb	r1, r1
 8000580:	4313      	orrs	r3, r2
 8000582:	2b0f      	cmp	r3, #15
 8000584:	d900      	bls.n	8000588 <__aeabi_fdiv+0x68>
 8000586:	e0b5      	b.n	80006f4 <__aeabi_fdiv+0x1d4>
 8000588:	486e      	ldr	r0, [pc, #440]	; (8000744 <__aeabi_fdiv+0x224>)
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	58c3      	ldr	r3, [r0, r3]
 800058e:	469f      	mov	pc, r3
 8000590:	2300      	movs	r3, #0
 8000592:	4698      	mov	r8, r3
 8000594:	0026      	movs	r6, r4
 8000596:	4645      	mov	r5, r8
 8000598:	4692      	mov	sl, r2
 800059a:	4653      	mov	r3, sl
 800059c:	2b02      	cmp	r3, #2
 800059e:	d100      	bne.n	80005a2 <__aeabi_fdiv+0x82>
 80005a0:	e089      	b.n	80006b6 <__aeabi_fdiv+0x196>
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fdiv+0x88>
 80005a6:	e09e      	b.n	80006e6 <__aeabi_fdiv+0x1c6>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d018      	beq.n	80005de <__aeabi_fdiv+0xbe>
 80005ac:	003b      	movs	r3, r7
 80005ae:	337f      	adds	r3, #127	; 0x7f
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dd69      	ble.n	8000688 <__aeabi_fdiv+0x168>
 80005b4:	076a      	lsls	r2, r5, #29
 80005b6:	d004      	beq.n	80005c2 <__aeabi_fdiv+0xa2>
 80005b8:	220f      	movs	r2, #15
 80005ba:	402a      	ands	r2, r5
 80005bc:	2a04      	cmp	r2, #4
 80005be:	d000      	beq.n	80005c2 <__aeabi_fdiv+0xa2>
 80005c0:	3504      	adds	r5, #4
 80005c2:	012a      	lsls	r2, r5, #4
 80005c4:	d503      	bpl.n	80005ce <__aeabi_fdiv+0xae>
 80005c6:	4b60      	ldr	r3, [pc, #384]	; (8000748 <__aeabi_fdiv+0x228>)
 80005c8:	401d      	ands	r5, r3
 80005ca:	003b      	movs	r3, r7
 80005cc:	3380      	adds	r3, #128	; 0x80
 80005ce:	2bfe      	cmp	r3, #254	; 0xfe
 80005d0:	dd00      	ble.n	80005d4 <__aeabi_fdiv+0xb4>
 80005d2:	e070      	b.n	80006b6 <__aeabi_fdiv+0x196>
 80005d4:	01ad      	lsls	r5, r5, #6
 80005d6:	0a6d      	lsrs	r5, r5, #9
 80005d8:	b2d8      	uxtb	r0, r3
 80005da:	e002      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 80005dc:	000e      	movs	r6, r1
 80005de:	2000      	movs	r0, #0
 80005e0:	2500      	movs	r5, #0
 80005e2:	05c0      	lsls	r0, r0, #23
 80005e4:	4328      	orrs	r0, r5
 80005e6:	07f6      	lsls	r6, r6, #31
 80005e8:	4330      	orrs	r0, r6
 80005ea:	bce0      	pop	{r5, r6, r7}
 80005ec:	46ba      	mov	sl, r7
 80005ee:	46b1      	mov	r9, r6
 80005f0:	46a8      	mov	r8, r5
 80005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d13f      	bne.n	800067a <__aeabi_fdiv+0x15a>
 80005fa:	2202      	movs	r2, #2
 80005fc:	3fff      	subs	r7, #255	; 0xff
 80005fe:	e003      	b.n	8000608 <__aeabi_fdiv+0xe8>
 8000600:	4643      	mov	r3, r8
 8000602:	2b00      	cmp	r3, #0
 8000604:	d12d      	bne.n	8000662 <__aeabi_fdiv+0x142>
 8000606:	2201      	movs	r2, #1
 8000608:	0031      	movs	r1, r6
 800060a:	464b      	mov	r3, r9
 800060c:	4061      	eors	r1, r4
 800060e:	b2c9      	uxtb	r1, r1
 8000610:	4313      	orrs	r3, r2
 8000612:	2b0f      	cmp	r3, #15
 8000614:	d834      	bhi.n	8000680 <__aeabi_fdiv+0x160>
 8000616:	484d      	ldr	r0, [pc, #308]	; (800074c <__aeabi_fdiv+0x22c>)
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	58c3      	ldr	r3, [r0, r3]
 800061c:	469f      	mov	pc, r3
 800061e:	2d00      	cmp	r5, #0
 8000620:	d113      	bne.n	800064a <__aeabi_fdiv+0x12a>
 8000622:	2304      	movs	r3, #4
 8000624:	4699      	mov	r9, r3
 8000626:	3b03      	subs	r3, #3
 8000628:	2700      	movs	r7, #0
 800062a:	469a      	mov	sl, r3
 800062c:	e791      	b.n	8000552 <__aeabi_fdiv+0x32>
 800062e:	2d00      	cmp	r5, #0
 8000630:	d105      	bne.n	800063e <__aeabi_fdiv+0x11e>
 8000632:	2308      	movs	r3, #8
 8000634:	4699      	mov	r9, r3
 8000636:	3b06      	subs	r3, #6
 8000638:	27ff      	movs	r7, #255	; 0xff
 800063a:	469a      	mov	sl, r3
 800063c:	e789      	b.n	8000552 <__aeabi_fdiv+0x32>
 800063e:	230c      	movs	r3, #12
 8000640:	4699      	mov	r9, r3
 8000642:	3b09      	subs	r3, #9
 8000644:	27ff      	movs	r7, #255	; 0xff
 8000646:	469a      	mov	sl, r3
 8000648:	e783      	b.n	8000552 <__aeabi_fdiv+0x32>
 800064a:	0028      	movs	r0, r5
 800064c:	f001 f862 	bl	8001714 <__clzsi2>
 8000650:	2776      	movs	r7, #118	; 0x76
 8000652:	1f43      	subs	r3, r0, #5
 8000654:	409d      	lsls	r5, r3
 8000656:	2300      	movs	r3, #0
 8000658:	427f      	negs	r7, r7
 800065a:	4699      	mov	r9, r3
 800065c:	469a      	mov	sl, r3
 800065e:	1a3f      	subs	r7, r7, r0
 8000660:	e777      	b.n	8000552 <__aeabi_fdiv+0x32>
 8000662:	4640      	mov	r0, r8
 8000664:	f001 f856 	bl	8001714 <__clzsi2>
 8000668:	4642      	mov	r2, r8
 800066a:	1f43      	subs	r3, r0, #5
 800066c:	409a      	lsls	r2, r3
 800066e:	2376      	movs	r3, #118	; 0x76
 8000670:	425b      	negs	r3, r3
 8000672:	4690      	mov	r8, r2
 8000674:	1a1b      	subs	r3, r3, r0
 8000676:	2200      	movs	r2, #0
 8000678:	e77d      	b.n	8000576 <__aeabi_fdiv+0x56>
 800067a:	23ff      	movs	r3, #255	; 0xff
 800067c:	2203      	movs	r2, #3
 800067e:	e77a      	b.n	8000576 <__aeabi_fdiv+0x56>
 8000680:	000e      	movs	r6, r1
 8000682:	20ff      	movs	r0, #255	; 0xff
 8000684:	2500      	movs	r5, #0
 8000686:	e7ac      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 8000688:	2001      	movs	r0, #1
 800068a:	1ac0      	subs	r0, r0, r3
 800068c:	281b      	cmp	r0, #27
 800068e:	dca6      	bgt.n	80005de <__aeabi_fdiv+0xbe>
 8000690:	379e      	adds	r7, #158	; 0x9e
 8000692:	002a      	movs	r2, r5
 8000694:	40bd      	lsls	r5, r7
 8000696:	40c2      	lsrs	r2, r0
 8000698:	1e6b      	subs	r3, r5, #1
 800069a:	419d      	sbcs	r5, r3
 800069c:	4315      	orrs	r5, r2
 800069e:	076b      	lsls	r3, r5, #29
 80006a0:	d004      	beq.n	80006ac <__aeabi_fdiv+0x18c>
 80006a2:	230f      	movs	r3, #15
 80006a4:	402b      	ands	r3, r5
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d000      	beq.n	80006ac <__aeabi_fdiv+0x18c>
 80006aa:	3504      	adds	r5, #4
 80006ac:	016b      	lsls	r3, r5, #5
 80006ae:	d544      	bpl.n	800073a <__aeabi_fdiv+0x21a>
 80006b0:	2001      	movs	r0, #1
 80006b2:	2500      	movs	r5, #0
 80006b4:	e795      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	2500      	movs	r5, #0
 80006ba:	e792      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 80006bc:	2580      	movs	r5, #128	; 0x80
 80006be:	2600      	movs	r6, #0
 80006c0:	20ff      	movs	r0, #255	; 0xff
 80006c2:	03ed      	lsls	r5, r5, #15
 80006c4:	e78d      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 80006c6:	2300      	movs	r3, #0
 80006c8:	4698      	mov	r8, r3
 80006ca:	2080      	movs	r0, #128	; 0x80
 80006cc:	03c0      	lsls	r0, r0, #15
 80006ce:	4205      	tst	r5, r0
 80006d0:	d009      	beq.n	80006e6 <__aeabi_fdiv+0x1c6>
 80006d2:	4643      	mov	r3, r8
 80006d4:	4203      	tst	r3, r0
 80006d6:	d106      	bne.n	80006e6 <__aeabi_fdiv+0x1c6>
 80006d8:	4645      	mov	r5, r8
 80006da:	4305      	orrs	r5, r0
 80006dc:	026d      	lsls	r5, r5, #9
 80006de:	0026      	movs	r6, r4
 80006e0:	20ff      	movs	r0, #255	; 0xff
 80006e2:	0a6d      	lsrs	r5, r5, #9
 80006e4:	e77d      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 80006e6:	2080      	movs	r0, #128	; 0x80
 80006e8:	03c0      	lsls	r0, r0, #15
 80006ea:	4305      	orrs	r5, r0
 80006ec:	026d      	lsls	r5, r5, #9
 80006ee:	20ff      	movs	r0, #255	; 0xff
 80006f0:	0a6d      	lsrs	r5, r5, #9
 80006f2:	e776      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 80006f4:	4642      	mov	r2, r8
 80006f6:	016b      	lsls	r3, r5, #5
 80006f8:	0150      	lsls	r0, r2, #5
 80006fa:	4283      	cmp	r3, r0
 80006fc:	d219      	bcs.n	8000732 <__aeabi_fdiv+0x212>
 80006fe:	221b      	movs	r2, #27
 8000700:	2500      	movs	r5, #0
 8000702:	3f01      	subs	r7, #1
 8000704:	2601      	movs	r6, #1
 8000706:	001c      	movs	r4, r3
 8000708:	006d      	lsls	r5, r5, #1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2c00      	cmp	r4, #0
 800070e:	db01      	blt.n	8000714 <__aeabi_fdiv+0x1f4>
 8000710:	4298      	cmp	r0, r3
 8000712:	d801      	bhi.n	8000718 <__aeabi_fdiv+0x1f8>
 8000714:	1a1b      	subs	r3, r3, r0
 8000716:	4335      	orrs	r5, r6
 8000718:	3a01      	subs	r2, #1
 800071a:	2a00      	cmp	r2, #0
 800071c:	d1f3      	bne.n	8000706 <__aeabi_fdiv+0x1e6>
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	4193      	sbcs	r3, r2
 8000722:	431d      	orrs	r5, r3
 8000724:	003b      	movs	r3, r7
 8000726:	337f      	adds	r3, #127	; 0x7f
 8000728:	000e      	movs	r6, r1
 800072a:	2b00      	cmp	r3, #0
 800072c:	dd00      	ble.n	8000730 <__aeabi_fdiv+0x210>
 800072e:	e741      	b.n	80005b4 <__aeabi_fdiv+0x94>
 8000730:	e7aa      	b.n	8000688 <__aeabi_fdiv+0x168>
 8000732:	221a      	movs	r2, #26
 8000734:	2501      	movs	r5, #1
 8000736:	1a1b      	subs	r3, r3, r0
 8000738:	e7e4      	b.n	8000704 <__aeabi_fdiv+0x1e4>
 800073a:	01ad      	lsls	r5, r5, #6
 800073c:	2000      	movs	r0, #0
 800073e:	0a6d      	lsrs	r5, r5, #9
 8000740:	e74f      	b.n	80005e2 <__aeabi_fdiv+0xc2>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	08007798 	.word	0x08007798
 8000748:	f7ffffff 	.word	0xf7ffffff
 800074c:	080077d8 	.word	0x080077d8

08000750 <__eqsf2>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	0042      	lsls	r2, r0, #1
 8000754:	0245      	lsls	r5, r0, #9
 8000756:	024e      	lsls	r6, r1, #9
 8000758:	004c      	lsls	r4, r1, #1
 800075a:	0fc3      	lsrs	r3, r0, #31
 800075c:	0a6d      	lsrs	r5, r5, #9
 800075e:	2001      	movs	r0, #1
 8000760:	0e12      	lsrs	r2, r2, #24
 8000762:	0a76      	lsrs	r6, r6, #9
 8000764:	0e24      	lsrs	r4, r4, #24
 8000766:	0fc9      	lsrs	r1, r1, #31
 8000768:	2aff      	cmp	r2, #255	; 0xff
 800076a:	d006      	beq.n	800077a <__eqsf2+0x2a>
 800076c:	2cff      	cmp	r4, #255	; 0xff
 800076e:	d003      	beq.n	8000778 <__eqsf2+0x28>
 8000770:	42a2      	cmp	r2, r4
 8000772:	d101      	bne.n	8000778 <__eqsf2+0x28>
 8000774:	42b5      	cmp	r5, r6
 8000776:	d006      	beq.n	8000786 <__eqsf2+0x36>
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	2d00      	cmp	r5, #0
 800077c:	d1fc      	bne.n	8000778 <__eqsf2+0x28>
 800077e:	2cff      	cmp	r4, #255	; 0xff
 8000780:	d1fa      	bne.n	8000778 <__eqsf2+0x28>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d1f8      	bne.n	8000778 <__eqsf2+0x28>
 8000786:	428b      	cmp	r3, r1
 8000788:	d006      	beq.n	8000798 <__eqsf2+0x48>
 800078a:	2001      	movs	r0, #1
 800078c:	2a00      	cmp	r2, #0
 800078e:	d1f3      	bne.n	8000778 <__eqsf2+0x28>
 8000790:	0028      	movs	r0, r5
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	4198      	sbcs	r0, r3
 8000796:	e7ef      	b.n	8000778 <__eqsf2+0x28>
 8000798:	2000      	movs	r0, #0
 800079a:	e7ed      	b.n	8000778 <__eqsf2+0x28>

0800079c <__gesf2>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	0042      	lsls	r2, r0, #1
 80007a0:	0245      	lsls	r5, r0, #9
 80007a2:	024e      	lsls	r6, r1, #9
 80007a4:	004c      	lsls	r4, r1, #1
 80007a6:	0fc3      	lsrs	r3, r0, #31
 80007a8:	0a6d      	lsrs	r5, r5, #9
 80007aa:	0e12      	lsrs	r2, r2, #24
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	0e24      	lsrs	r4, r4, #24
 80007b0:	0fc8      	lsrs	r0, r1, #31
 80007b2:	2aff      	cmp	r2, #255	; 0xff
 80007b4:	d01b      	beq.n	80007ee <__gesf2+0x52>
 80007b6:	2cff      	cmp	r4, #255	; 0xff
 80007b8:	d00e      	beq.n	80007d8 <__gesf2+0x3c>
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d11b      	bne.n	80007f6 <__gesf2+0x5a>
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d101      	bne.n	80007c6 <__gesf2+0x2a>
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d01c      	beq.n	8000800 <__gesf2+0x64>
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d00c      	beq.n	80007e4 <__gesf2+0x48>
 80007ca:	4283      	cmp	r3, r0
 80007cc:	d01c      	beq.n	8000808 <__gesf2+0x6c>
 80007ce:	2102      	movs	r1, #2
 80007d0:	1e58      	subs	r0, r3, #1
 80007d2:	4008      	ands	r0, r1
 80007d4:	3801      	subs	r0, #1
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d122      	bne.n	8000822 <__gesf2+0x86>
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d1f4      	bne.n	80007ca <__gesf2+0x2e>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d1f2      	bne.n	80007ca <__gesf2+0x2e>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d1f6      	bne.n	80007d6 <__gesf2+0x3a>
 80007e8:	2001      	movs	r0, #1
 80007ea:	4240      	negs	r0, r0
 80007ec:	e7f3      	b.n	80007d6 <__gesf2+0x3a>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d117      	bne.n	8000822 <__gesf2+0x86>
 80007f2:	2cff      	cmp	r4, #255	; 0xff
 80007f4:	d0f0      	beq.n	80007d8 <__gesf2+0x3c>
 80007f6:	2c00      	cmp	r4, #0
 80007f8:	d1e7      	bne.n	80007ca <__gesf2+0x2e>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d1e5      	bne.n	80007ca <__gesf2+0x2e>
 80007fe:	e7e6      	b.n	80007ce <__gesf2+0x32>
 8000800:	2000      	movs	r0, #0
 8000802:	2d00      	cmp	r5, #0
 8000804:	d0e7      	beq.n	80007d6 <__gesf2+0x3a>
 8000806:	e7e2      	b.n	80007ce <__gesf2+0x32>
 8000808:	42a2      	cmp	r2, r4
 800080a:	dc05      	bgt.n	8000818 <__gesf2+0x7c>
 800080c:	dbea      	blt.n	80007e4 <__gesf2+0x48>
 800080e:	42b5      	cmp	r5, r6
 8000810:	d802      	bhi.n	8000818 <__gesf2+0x7c>
 8000812:	d3e7      	bcc.n	80007e4 <__gesf2+0x48>
 8000814:	2000      	movs	r0, #0
 8000816:	e7de      	b.n	80007d6 <__gesf2+0x3a>
 8000818:	4243      	negs	r3, r0
 800081a:	4158      	adcs	r0, r3
 800081c:	0040      	lsls	r0, r0, #1
 800081e:	3801      	subs	r0, #1
 8000820:	e7d9      	b.n	80007d6 <__gesf2+0x3a>
 8000822:	2002      	movs	r0, #2
 8000824:	4240      	negs	r0, r0
 8000826:	e7d6      	b.n	80007d6 <__gesf2+0x3a>

08000828 <__lesf2>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	024e      	lsls	r6, r1, #9
 8000830:	004c      	lsls	r4, r1, #1
 8000832:	0fc3      	lsrs	r3, r0, #31
 8000834:	0a6d      	lsrs	r5, r5, #9
 8000836:	0e12      	lsrs	r2, r2, #24
 8000838:	0a76      	lsrs	r6, r6, #9
 800083a:	0e24      	lsrs	r4, r4, #24
 800083c:	0fc8      	lsrs	r0, r1, #31
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d00b      	beq.n	800085a <__lesf2+0x32>
 8000842:	2cff      	cmp	r4, #255	; 0xff
 8000844:	d00d      	beq.n	8000862 <__lesf2+0x3a>
 8000846:	2a00      	cmp	r2, #0
 8000848:	d11f      	bne.n	800088a <__lesf2+0x62>
 800084a:	2c00      	cmp	r4, #0
 800084c:	d116      	bne.n	800087c <__lesf2+0x54>
 800084e:	2e00      	cmp	r6, #0
 8000850:	d114      	bne.n	800087c <__lesf2+0x54>
 8000852:	2000      	movs	r0, #0
 8000854:	2d00      	cmp	r5, #0
 8000856:	d010      	beq.n	800087a <__lesf2+0x52>
 8000858:	e009      	b.n	800086e <__lesf2+0x46>
 800085a:	2d00      	cmp	r5, #0
 800085c:	d10c      	bne.n	8000878 <__lesf2+0x50>
 800085e:	2cff      	cmp	r4, #255	; 0xff
 8000860:	d113      	bne.n	800088a <__lesf2+0x62>
 8000862:	2e00      	cmp	r6, #0
 8000864:	d108      	bne.n	8000878 <__lesf2+0x50>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d008      	beq.n	800087c <__lesf2+0x54>
 800086a:	4283      	cmp	r3, r0
 800086c:	d012      	beq.n	8000894 <__lesf2+0x6c>
 800086e:	2102      	movs	r1, #2
 8000870:	1e58      	subs	r0, r3, #1
 8000872:	4008      	ands	r0, r1
 8000874:	3801      	subs	r0, #1
 8000876:	e000      	b.n	800087a <__lesf2+0x52>
 8000878:	2002      	movs	r0, #2
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	2d00      	cmp	r5, #0
 800087e:	d1f4      	bne.n	800086a <__lesf2+0x42>
 8000880:	2800      	cmp	r0, #0
 8000882:	d1fa      	bne.n	800087a <__lesf2+0x52>
 8000884:	2001      	movs	r0, #1
 8000886:	4240      	negs	r0, r0
 8000888:	e7f7      	b.n	800087a <__lesf2+0x52>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d1ed      	bne.n	800086a <__lesf2+0x42>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d1eb      	bne.n	800086a <__lesf2+0x42>
 8000892:	e7ec      	b.n	800086e <__lesf2+0x46>
 8000894:	42a2      	cmp	r2, r4
 8000896:	dc05      	bgt.n	80008a4 <__lesf2+0x7c>
 8000898:	dbf2      	blt.n	8000880 <__lesf2+0x58>
 800089a:	42b5      	cmp	r5, r6
 800089c:	d802      	bhi.n	80008a4 <__lesf2+0x7c>
 800089e:	d3ef      	bcc.n	8000880 <__lesf2+0x58>
 80008a0:	2000      	movs	r0, #0
 80008a2:	e7ea      	b.n	800087a <__lesf2+0x52>
 80008a4:	4243      	negs	r3, r0
 80008a6:	4158      	adcs	r0, r3
 80008a8:	0040      	lsls	r0, r0, #1
 80008aa:	3801      	subs	r0, #1
 80008ac:	e7e5      	b.n	800087a <__lesf2+0x52>
 80008ae:	46c0      	nop			; (mov r8, r8)

080008b0 <__aeabi_fmul>:
 80008b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b2:	464f      	mov	r7, r9
 80008b4:	4646      	mov	r6, r8
 80008b6:	46d6      	mov	lr, sl
 80008b8:	0244      	lsls	r4, r0, #9
 80008ba:	0045      	lsls	r5, r0, #1
 80008bc:	b5c0      	push	{r6, r7, lr}
 80008be:	0a64      	lsrs	r4, r4, #9
 80008c0:	1c0f      	adds	r7, r1, #0
 80008c2:	0e2d      	lsrs	r5, r5, #24
 80008c4:	0fc6      	lsrs	r6, r0, #31
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fmul+0x1c>
 80008ca:	e08d      	b.n	80009e8 <__aeabi_fmul+0x138>
 80008cc:	2dff      	cmp	r5, #255	; 0xff
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fmul+0x22>
 80008d0:	e092      	b.n	80009f8 <__aeabi_fmul+0x148>
 80008d2:	2300      	movs	r3, #0
 80008d4:	2080      	movs	r0, #128	; 0x80
 80008d6:	4699      	mov	r9, r3
 80008d8:	469a      	mov	sl, r3
 80008da:	00e4      	lsls	r4, r4, #3
 80008dc:	04c0      	lsls	r0, r0, #19
 80008de:	4304      	orrs	r4, r0
 80008e0:	3d7f      	subs	r5, #127	; 0x7f
 80008e2:	0278      	lsls	r0, r7, #9
 80008e4:	0a43      	lsrs	r3, r0, #9
 80008e6:	4698      	mov	r8, r3
 80008e8:	007b      	lsls	r3, r7, #1
 80008ea:	0e1b      	lsrs	r3, r3, #24
 80008ec:	0fff      	lsrs	r7, r7, #31
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fmul+0x44>
 80008f2:	e070      	b.n	80009d6 <__aeabi_fmul+0x126>
 80008f4:	2bff      	cmp	r3, #255	; 0xff
 80008f6:	d100      	bne.n	80008fa <__aeabi_fmul+0x4a>
 80008f8:	e086      	b.n	8000a08 <__aeabi_fmul+0x158>
 80008fa:	4642      	mov	r2, r8
 80008fc:	00d0      	lsls	r0, r2, #3
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	3b7f      	subs	r3, #127	; 0x7f
 8000902:	18ed      	adds	r5, r5, r3
 8000904:	2300      	movs	r3, #0
 8000906:	04d2      	lsls	r2, r2, #19
 8000908:	4302      	orrs	r2, r0
 800090a:	4690      	mov	r8, r2
 800090c:	469c      	mov	ip, r3
 800090e:	0031      	movs	r1, r6
 8000910:	464b      	mov	r3, r9
 8000912:	4079      	eors	r1, r7
 8000914:	1c68      	adds	r0, r5, #1
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d81c      	bhi.n	8000954 <__aeabi_fmul+0xa4>
 800091a:	4a76      	ldr	r2, [pc, #472]	; (8000af4 <__aeabi_fmul+0x244>)
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	58d3      	ldr	r3, [r2, r3]
 8000920:	469f      	mov	pc, r3
 8000922:	0039      	movs	r1, r7
 8000924:	4644      	mov	r4, r8
 8000926:	46e2      	mov	sl, ip
 8000928:	4653      	mov	r3, sl
 800092a:	2b02      	cmp	r3, #2
 800092c:	d00f      	beq.n	800094e <__aeabi_fmul+0x9e>
 800092e:	2b03      	cmp	r3, #3
 8000930:	d100      	bne.n	8000934 <__aeabi_fmul+0x84>
 8000932:	e0d7      	b.n	8000ae4 <__aeabi_fmul+0x234>
 8000934:	2b01      	cmp	r3, #1
 8000936:	d137      	bne.n	80009a8 <__aeabi_fmul+0xf8>
 8000938:	2000      	movs	r0, #0
 800093a:	2400      	movs	r4, #0
 800093c:	05c0      	lsls	r0, r0, #23
 800093e:	4320      	orrs	r0, r4
 8000940:	07c9      	lsls	r1, r1, #31
 8000942:	4308      	orrs	r0, r1
 8000944:	bce0      	pop	{r5, r6, r7}
 8000946:	46ba      	mov	sl, r7
 8000948:	46b1      	mov	r9, r6
 800094a:	46a8      	mov	r8, r5
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	20ff      	movs	r0, #255	; 0xff
 8000950:	2400      	movs	r4, #0
 8000952:	e7f3      	b.n	800093c <__aeabi_fmul+0x8c>
 8000954:	0c26      	lsrs	r6, r4, #16
 8000956:	0424      	lsls	r4, r4, #16
 8000958:	0c22      	lsrs	r2, r4, #16
 800095a:	4644      	mov	r4, r8
 800095c:	0424      	lsls	r4, r4, #16
 800095e:	0c24      	lsrs	r4, r4, #16
 8000960:	4643      	mov	r3, r8
 8000962:	0027      	movs	r7, r4
 8000964:	0c1b      	lsrs	r3, r3, #16
 8000966:	4357      	muls	r7, r2
 8000968:	4374      	muls	r4, r6
 800096a:	435a      	muls	r2, r3
 800096c:	435e      	muls	r6, r3
 800096e:	1912      	adds	r2, r2, r4
 8000970:	0c3b      	lsrs	r3, r7, #16
 8000972:	189b      	adds	r3, r3, r2
 8000974:	429c      	cmp	r4, r3
 8000976:	d903      	bls.n	8000980 <__aeabi_fmul+0xd0>
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0252      	lsls	r2, r2, #9
 800097c:	4694      	mov	ip, r2
 800097e:	4466      	add	r6, ip
 8000980:	043f      	lsls	r7, r7, #16
 8000982:	041a      	lsls	r2, r3, #16
 8000984:	0c3f      	lsrs	r7, r7, #16
 8000986:	19d2      	adds	r2, r2, r7
 8000988:	0194      	lsls	r4, r2, #6
 800098a:	1e67      	subs	r7, r4, #1
 800098c:	41bc      	sbcs	r4, r7
 800098e:	0c1b      	lsrs	r3, r3, #16
 8000990:	0e92      	lsrs	r2, r2, #26
 8000992:	199b      	adds	r3, r3, r6
 8000994:	4314      	orrs	r4, r2
 8000996:	019b      	lsls	r3, r3, #6
 8000998:	431c      	orrs	r4, r3
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	d400      	bmi.n	80009a0 <__aeabi_fmul+0xf0>
 800099e:	e09b      	b.n	8000ad8 <__aeabi_fmul+0x228>
 80009a0:	2301      	movs	r3, #1
 80009a2:	0862      	lsrs	r2, r4, #1
 80009a4:	401c      	ands	r4, r3
 80009a6:	4314      	orrs	r4, r2
 80009a8:	0002      	movs	r2, r0
 80009aa:	327f      	adds	r2, #127	; 0x7f
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	dd64      	ble.n	8000a7a <__aeabi_fmul+0x1ca>
 80009b0:	0763      	lsls	r3, r4, #29
 80009b2:	d004      	beq.n	80009be <__aeabi_fmul+0x10e>
 80009b4:	230f      	movs	r3, #15
 80009b6:	4023      	ands	r3, r4
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d000      	beq.n	80009be <__aeabi_fmul+0x10e>
 80009bc:	3404      	adds	r4, #4
 80009be:	0123      	lsls	r3, r4, #4
 80009c0:	d503      	bpl.n	80009ca <__aeabi_fmul+0x11a>
 80009c2:	0002      	movs	r2, r0
 80009c4:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <__aeabi_fmul+0x248>)
 80009c6:	3280      	adds	r2, #128	; 0x80
 80009c8:	401c      	ands	r4, r3
 80009ca:	2afe      	cmp	r2, #254	; 0xfe
 80009cc:	dcbf      	bgt.n	800094e <__aeabi_fmul+0x9e>
 80009ce:	01a4      	lsls	r4, r4, #6
 80009d0:	0a64      	lsrs	r4, r4, #9
 80009d2:	b2d0      	uxtb	r0, r2
 80009d4:	e7b2      	b.n	800093c <__aeabi_fmul+0x8c>
 80009d6:	4643      	mov	r3, r8
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d13d      	bne.n	8000a58 <__aeabi_fmul+0x1a8>
 80009dc:	464a      	mov	r2, r9
 80009de:	3301      	adds	r3, #1
 80009e0:	431a      	orrs	r2, r3
 80009e2:	4691      	mov	r9, r2
 80009e4:	469c      	mov	ip, r3
 80009e6:	e792      	b.n	800090e <__aeabi_fmul+0x5e>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d129      	bne.n	8000a40 <__aeabi_fmul+0x190>
 80009ec:	2304      	movs	r3, #4
 80009ee:	4699      	mov	r9, r3
 80009f0:	3b03      	subs	r3, #3
 80009f2:	2500      	movs	r5, #0
 80009f4:	469a      	mov	sl, r3
 80009f6:	e774      	b.n	80008e2 <__aeabi_fmul+0x32>
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d11b      	bne.n	8000a34 <__aeabi_fmul+0x184>
 80009fc:	2308      	movs	r3, #8
 80009fe:	4699      	mov	r9, r3
 8000a00:	3b06      	subs	r3, #6
 8000a02:	25ff      	movs	r5, #255	; 0xff
 8000a04:	469a      	mov	sl, r3
 8000a06:	e76c      	b.n	80008e2 <__aeabi_fmul+0x32>
 8000a08:	4643      	mov	r3, r8
 8000a0a:	35ff      	adds	r5, #255	; 0xff
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10b      	bne.n	8000a28 <__aeabi_fmul+0x178>
 8000a10:	2302      	movs	r3, #2
 8000a12:	464a      	mov	r2, r9
 8000a14:	431a      	orrs	r2, r3
 8000a16:	4691      	mov	r9, r2
 8000a18:	469c      	mov	ip, r3
 8000a1a:	e778      	b.n	800090e <__aeabi_fmul+0x5e>
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	0031      	movs	r1, r6
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fmul+0x176>
 8000a24:	e783      	b.n	800092e <__aeabi_fmul+0x7e>
 8000a26:	e792      	b.n	800094e <__aeabi_fmul+0x9e>
 8000a28:	2303      	movs	r3, #3
 8000a2a:	464a      	mov	r2, r9
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	4691      	mov	r9, r2
 8000a30:	469c      	mov	ip, r3
 8000a32:	e76c      	b.n	800090e <__aeabi_fmul+0x5e>
 8000a34:	230c      	movs	r3, #12
 8000a36:	4699      	mov	r9, r3
 8000a38:	3b09      	subs	r3, #9
 8000a3a:	25ff      	movs	r5, #255	; 0xff
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	e750      	b.n	80008e2 <__aeabi_fmul+0x32>
 8000a40:	0020      	movs	r0, r4
 8000a42:	f000 fe67 	bl	8001714 <__clzsi2>
 8000a46:	2576      	movs	r5, #118	; 0x76
 8000a48:	1f43      	subs	r3, r0, #5
 8000a4a:	409c      	lsls	r4, r3
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	426d      	negs	r5, r5
 8000a50:	4699      	mov	r9, r3
 8000a52:	469a      	mov	sl, r3
 8000a54:	1a2d      	subs	r5, r5, r0
 8000a56:	e744      	b.n	80008e2 <__aeabi_fmul+0x32>
 8000a58:	4640      	mov	r0, r8
 8000a5a:	f000 fe5b 	bl	8001714 <__clzsi2>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	1f43      	subs	r3, r0, #5
 8000a62:	409a      	lsls	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	1a2d      	subs	r5, r5, r0
 8000a68:	4690      	mov	r8, r2
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	3d76      	subs	r5, #118	; 0x76
 8000a6e:	e74e      	b.n	800090e <__aeabi_fmul+0x5e>
 8000a70:	2480      	movs	r4, #128	; 0x80
 8000a72:	2100      	movs	r1, #0
 8000a74:	20ff      	movs	r0, #255	; 0xff
 8000a76:	03e4      	lsls	r4, r4, #15
 8000a78:	e760      	b.n	800093c <__aeabi_fmul+0x8c>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	2b1b      	cmp	r3, #27
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_fmul+0x1d4>
 8000a82:	e759      	b.n	8000938 <__aeabi_fmul+0x88>
 8000a84:	0022      	movs	r2, r4
 8000a86:	309e      	adds	r0, #158	; 0x9e
 8000a88:	40da      	lsrs	r2, r3
 8000a8a:	4084      	lsls	r4, r0
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	1e62      	subs	r2, r4, #1
 8000a90:	4194      	sbcs	r4, r2
 8000a92:	431c      	orrs	r4, r3
 8000a94:	0763      	lsls	r3, r4, #29
 8000a96:	d004      	beq.n	8000aa2 <__aeabi_fmul+0x1f2>
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_fmul+0x1f2>
 8000aa0:	3404      	adds	r4, #4
 8000aa2:	0163      	lsls	r3, r4, #5
 8000aa4:	d51a      	bpl.n	8000adc <__aeabi_fmul+0x22c>
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2400      	movs	r4, #0
 8000aaa:	e747      	b.n	800093c <__aeabi_fmul+0x8c>
 8000aac:	2080      	movs	r0, #128	; 0x80
 8000aae:	03c0      	lsls	r0, r0, #15
 8000ab0:	4204      	tst	r4, r0
 8000ab2:	d009      	beq.n	8000ac8 <__aeabi_fmul+0x218>
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	4203      	tst	r3, r0
 8000ab8:	d106      	bne.n	8000ac8 <__aeabi_fmul+0x218>
 8000aba:	4644      	mov	r4, r8
 8000abc:	4304      	orrs	r4, r0
 8000abe:	0264      	lsls	r4, r4, #9
 8000ac0:	0039      	movs	r1, r7
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	0a64      	lsrs	r4, r4, #9
 8000ac6:	e739      	b.n	800093c <__aeabi_fmul+0x8c>
 8000ac8:	2080      	movs	r0, #128	; 0x80
 8000aca:	03c0      	lsls	r0, r0, #15
 8000acc:	4304      	orrs	r4, r0
 8000ace:	0264      	lsls	r4, r4, #9
 8000ad0:	0031      	movs	r1, r6
 8000ad2:	20ff      	movs	r0, #255	; 0xff
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	e731      	b.n	800093c <__aeabi_fmul+0x8c>
 8000ad8:	0028      	movs	r0, r5
 8000ada:	e765      	b.n	80009a8 <__aeabi_fmul+0xf8>
 8000adc:	01a4      	lsls	r4, r4, #6
 8000ade:	2000      	movs	r0, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	e72b      	b.n	800093c <__aeabi_fmul+0x8c>
 8000ae4:	2080      	movs	r0, #128	; 0x80
 8000ae6:	03c0      	lsls	r0, r0, #15
 8000ae8:	4304      	orrs	r4, r0
 8000aea:	0264      	lsls	r4, r4, #9
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	0a64      	lsrs	r4, r4, #9
 8000af0:	e724      	b.n	800093c <__aeabi_fmul+0x8c>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	08007818 	.word	0x08007818
 8000af8:	f7ffffff 	.word	0xf7ffffff

08000afc <__aeabi_fsub>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	46ce      	mov	lr, r9
 8000b00:	4647      	mov	r7, r8
 8000b02:	0243      	lsls	r3, r0, #9
 8000b04:	0a5b      	lsrs	r3, r3, #9
 8000b06:	024e      	lsls	r6, r1, #9
 8000b08:	00da      	lsls	r2, r3, #3
 8000b0a:	4694      	mov	ip, r2
 8000b0c:	0a72      	lsrs	r2, r6, #9
 8000b0e:	4691      	mov	r9, r2
 8000b10:	0045      	lsls	r5, r0, #1
 8000b12:	004a      	lsls	r2, r1, #1
 8000b14:	b580      	push	{r7, lr}
 8000b16:	0e2d      	lsrs	r5, r5, #24
 8000b18:	001f      	movs	r7, r3
 8000b1a:	0fc4      	lsrs	r4, r0, #31
 8000b1c:	0e12      	lsrs	r2, r2, #24
 8000b1e:	0fc9      	lsrs	r1, r1, #31
 8000b20:	09b6      	lsrs	r6, r6, #6
 8000b22:	2aff      	cmp	r2, #255	; 0xff
 8000b24:	d05b      	beq.n	8000bde <__aeabi_fsub+0xe2>
 8000b26:	2001      	movs	r0, #1
 8000b28:	4041      	eors	r1, r0
 8000b2a:	428c      	cmp	r4, r1
 8000b2c:	d039      	beq.n	8000ba2 <__aeabi_fsub+0xa6>
 8000b2e:	1aa8      	subs	r0, r5, r2
 8000b30:	2800      	cmp	r0, #0
 8000b32:	dd5a      	ble.n	8000bea <__aeabi_fsub+0xee>
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d06a      	beq.n	8000c0e <__aeabi_fsub+0x112>
 8000b38:	2dff      	cmp	r5, #255	; 0xff
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0x42>
 8000b3c:	e0d9      	b.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	04d2      	lsls	r2, r2, #19
 8000b42:	4316      	orrs	r6, r2
 8000b44:	281b      	cmp	r0, #27
 8000b46:	dc00      	bgt.n	8000b4a <__aeabi_fsub+0x4e>
 8000b48:	e0e9      	b.n	8000d1e <__aeabi_fsub+0x222>
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	1a18      	subs	r0, r3, r0
 8000b50:	0143      	lsls	r3, r0, #5
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_fsub+0x5a>
 8000b54:	e0b4      	b.n	8000cc0 <__aeabi_fsub+0x1c4>
 8000b56:	0180      	lsls	r0, r0, #6
 8000b58:	0987      	lsrs	r7, r0, #6
 8000b5a:	0038      	movs	r0, r7
 8000b5c:	f000 fdda 	bl	8001714 <__clzsi2>
 8000b60:	3805      	subs	r0, #5
 8000b62:	4087      	lsls	r7, r0
 8000b64:	4285      	cmp	r5, r0
 8000b66:	dc00      	bgt.n	8000b6a <__aeabi_fsub+0x6e>
 8000b68:	e0cc      	b.n	8000d04 <__aeabi_fsub+0x208>
 8000b6a:	1a2d      	subs	r5, r5, r0
 8000b6c:	48b5      	ldr	r0, [pc, #724]	; (8000e44 <__aeabi_fsub+0x348>)
 8000b6e:	4038      	ands	r0, r7
 8000b70:	0743      	lsls	r3, r0, #29
 8000b72:	d004      	beq.n	8000b7e <__aeabi_fsub+0x82>
 8000b74:	230f      	movs	r3, #15
 8000b76:	4003      	ands	r3, r0
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fsub+0x82>
 8000b7c:	3004      	adds	r0, #4
 8000b7e:	0143      	lsls	r3, r0, #5
 8000b80:	d400      	bmi.n	8000b84 <__aeabi_fsub+0x88>
 8000b82:	e0a0      	b.n	8000cc6 <__aeabi_fsub+0x1ca>
 8000b84:	1c6a      	adds	r2, r5, #1
 8000b86:	2dfe      	cmp	r5, #254	; 0xfe
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x90>
 8000b8a:	e08d      	b.n	8000ca8 <__aeabi_fsub+0x1ac>
 8000b8c:	0180      	lsls	r0, r0, #6
 8000b8e:	0a47      	lsrs	r7, r0, #9
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	05d0      	lsls	r0, r2, #23
 8000b94:	4338      	orrs	r0, r7
 8000b96:	07e4      	lsls	r4, r4, #31
 8000b98:	4320      	orrs	r0, r4
 8000b9a:	bcc0      	pop	{r6, r7}
 8000b9c:	46b9      	mov	r9, r7
 8000b9e:	46b0      	mov	r8, r6
 8000ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba2:	1aa8      	subs	r0, r5, r2
 8000ba4:	4680      	mov	r8, r0
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	dd45      	ble.n	8000c36 <__aeabi_fsub+0x13a>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d070      	beq.n	8000c90 <__aeabi_fsub+0x194>
 8000bae:	2dff      	cmp	r5, #255	; 0xff
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fsub+0xb8>
 8000bb2:	e09e      	b.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	04db      	lsls	r3, r3, #19
 8000bb8:	431e      	orrs	r6, r3
 8000bba:	4643      	mov	r3, r8
 8000bbc:	2b1b      	cmp	r3, #27
 8000bbe:	dc00      	bgt.n	8000bc2 <__aeabi_fsub+0xc6>
 8000bc0:	e0d2      	b.n	8000d68 <__aeabi_fsub+0x26c>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4460      	add	r0, ip
 8000bc6:	0143      	lsls	r3, r0, #5
 8000bc8:	d57a      	bpl.n	8000cc0 <__aeabi_fsub+0x1c4>
 8000bca:	3501      	adds	r5, #1
 8000bcc:	2dff      	cmp	r5, #255	; 0xff
 8000bce:	d06b      	beq.n	8000ca8 <__aeabi_fsub+0x1ac>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	4a9d      	ldr	r2, [pc, #628]	; (8000e48 <__aeabi_fsub+0x34c>)
 8000bd4:	4003      	ands	r3, r0
 8000bd6:	0840      	lsrs	r0, r0, #1
 8000bd8:	4010      	ands	r0, r2
 8000bda:	4318      	orrs	r0, r3
 8000bdc:	e7c8      	b.n	8000b70 <__aeabi_fsub+0x74>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d020      	beq.n	8000c24 <__aeabi_fsub+0x128>
 8000be2:	428c      	cmp	r4, r1
 8000be4:	d023      	beq.n	8000c2e <__aeabi_fsub+0x132>
 8000be6:	0028      	movs	r0, r5
 8000be8:	38ff      	subs	r0, #255	; 0xff
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d039      	beq.n	8000c62 <__aeabi_fsub+0x166>
 8000bee:	1b57      	subs	r7, r2, r5
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_fsub+0xfa>
 8000bf4:	e09d      	b.n	8000d32 <__aeabi_fsub+0x236>
 8000bf6:	4663      	mov	r3, ip
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fsub+0x102>
 8000bfc:	e0db      	b.n	8000db6 <__aeabi_fsub+0x2ba>
 8000bfe:	1e7b      	subs	r3, r7, #1
 8000c00:	2f01      	cmp	r7, #1
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0x10a>
 8000c04:	e10d      	b.n	8000e22 <__aeabi_fsub+0x326>
 8000c06:	2fff      	cmp	r7, #255	; 0xff
 8000c08:	d071      	beq.n	8000cee <__aeabi_fsub+0x1f2>
 8000c0a:	001f      	movs	r7, r3
 8000c0c:	e098      	b.n	8000d40 <__aeabi_fsub+0x244>
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fsub+0x118>
 8000c12:	e0a7      	b.n	8000d64 <__aeabi_fsub+0x268>
 8000c14:	1e42      	subs	r2, r0, #1
 8000c16:	2801      	cmp	r0, #1
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fsub+0x120>
 8000c1a:	e0e6      	b.n	8000dea <__aeabi_fsub+0x2ee>
 8000c1c:	28ff      	cmp	r0, #255	; 0xff
 8000c1e:	d068      	beq.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000c20:	0010      	movs	r0, r2
 8000c22:	e78f      	b.n	8000b44 <__aeabi_fsub+0x48>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4041      	eors	r1, r0
 8000c28:	42a1      	cmp	r1, r4
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fsub+0x132>
 8000c2c:	e77f      	b.n	8000b2e <__aeabi_fsub+0x32>
 8000c2e:	20ff      	movs	r0, #255	; 0xff
 8000c30:	4240      	negs	r0, r0
 8000c32:	4680      	mov	r8, r0
 8000c34:	44a8      	add	r8, r5
 8000c36:	4640      	mov	r0, r8
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d038      	beq.n	8000cae <__aeabi_fsub+0x1b2>
 8000c3c:	1b51      	subs	r1, r2, r5
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_fsub+0x148>
 8000c42:	e0ae      	b.n	8000da2 <__aeabi_fsub+0x2a6>
 8000c44:	2aff      	cmp	r2, #255	; 0xff
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x14e>
 8000c48:	e0df      	b.n	8000e0a <__aeabi_fsub+0x30e>
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	4660      	mov	r0, ip
 8000c4e:	04db      	lsls	r3, r3, #19
 8000c50:	4318      	orrs	r0, r3
 8000c52:	4684      	mov	ip, r0
 8000c54:	291b      	cmp	r1, #27
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_fsub+0x15e>
 8000c58:	e0d9      	b.n	8000e0e <__aeabi_fsub+0x312>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	0015      	movs	r5, r2
 8000c5e:	1980      	adds	r0, r0, r6
 8000c60:	e7b1      	b.n	8000bc6 <__aeabi_fsub+0xca>
 8000c62:	20fe      	movs	r0, #254	; 0xfe
 8000c64:	1c6a      	adds	r2, r5, #1
 8000c66:	4210      	tst	r0, r2
 8000c68:	d171      	bne.n	8000d4e <__aeabi_fsub+0x252>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_fsub+0x174>
 8000c6e:	e0a6      	b.n	8000dbe <__aeabi_fsub+0x2c2>
 8000c70:	4663      	mov	r3, ip
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_fsub+0x17c>
 8000c76:	e0d9      	b.n	8000e2c <__aeabi_fsub+0x330>
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_fsub+0x184>
 8000c7e:	e788      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000c80:	1b98      	subs	r0, r3, r6
 8000c82:	0143      	lsls	r3, r0, #5
 8000c84:	d400      	bmi.n	8000c88 <__aeabi_fsub+0x18c>
 8000c86:	e0e1      	b.n	8000e4c <__aeabi_fsub+0x350>
 8000c88:	4663      	mov	r3, ip
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	1af0      	subs	r0, r6, r3
 8000c8e:	e76f      	b.n	8000b70 <__aeabi_fsub+0x74>
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x19a>
 8000c94:	e0b7      	b.n	8000e06 <__aeabi_fsub+0x30a>
 8000c96:	0002      	movs	r2, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	2801      	cmp	r0, #1
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0x1a4>
 8000c9e:	e09c      	b.n	8000dda <__aeabi_fsub+0x2de>
 8000ca0:	28ff      	cmp	r0, #255	; 0xff
 8000ca2:	d026      	beq.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	e788      	b.n	8000bba <__aeabi_fsub+0xbe>
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	2700      	movs	r7, #0
 8000cac:	e771      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000cae:	20fe      	movs	r0, #254	; 0xfe
 8000cb0:	1c6a      	adds	r2, r5, #1
 8000cb2:	4210      	tst	r0, r2
 8000cb4:	d064      	beq.n	8000d80 <__aeabi_fsub+0x284>
 8000cb6:	2aff      	cmp	r2, #255	; 0xff
 8000cb8:	d0f6      	beq.n	8000ca8 <__aeabi_fsub+0x1ac>
 8000cba:	0015      	movs	r5, r2
 8000cbc:	4466      	add	r6, ip
 8000cbe:	0870      	lsrs	r0, r6, #1
 8000cc0:	0743      	lsls	r3, r0, #29
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fsub+0x1ca>
 8000cc4:	e756      	b.n	8000b74 <__aeabi_fsub+0x78>
 8000cc6:	08c3      	lsrs	r3, r0, #3
 8000cc8:	2dff      	cmp	r5, #255	; 0xff
 8000cca:	d012      	beq.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	0a5f      	lsrs	r7, r3, #9
 8000cd0:	b2ea      	uxtb	r2, r5
 8000cd2:	e75e      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000cd4:	4662      	mov	r2, ip
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x1e0>
 8000cda:	e096      	b.n	8000e0a <__aeabi_fsub+0x30e>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d008      	beq.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	03d2      	lsls	r2, r2, #15
 8000ce4:	4213      	tst	r3, r2
 8000ce6:	d004      	beq.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000ce8:	4648      	mov	r0, r9
 8000cea:	4210      	tst	r0, r2
 8000cec:	d101      	bne.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000cee:	000c      	movs	r4, r1
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0d8      	beq.n	8000ca8 <__aeabi_fsub+0x1ac>
 8000cf6:	2780      	movs	r7, #128	; 0x80
 8000cf8:	03ff      	lsls	r7, r7, #15
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	027f      	lsls	r7, r7, #9
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	0a7f      	lsrs	r7, r7, #9
 8000d02:	e746      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000d04:	2320      	movs	r3, #32
 8000d06:	003a      	movs	r2, r7
 8000d08:	1b45      	subs	r5, r0, r5
 8000d0a:	0038      	movs	r0, r7
 8000d0c:	3501      	adds	r5, #1
 8000d0e:	40ea      	lsrs	r2, r5
 8000d10:	1b5d      	subs	r5, r3, r5
 8000d12:	40a8      	lsls	r0, r5
 8000d14:	1e43      	subs	r3, r0, #1
 8000d16:	4198      	sbcs	r0, r3
 8000d18:	2500      	movs	r5, #0
 8000d1a:	4310      	orrs	r0, r2
 8000d1c:	e728      	b.n	8000b70 <__aeabi_fsub+0x74>
 8000d1e:	2320      	movs	r3, #32
 8000d20:	1a1b      	subs	r3, r3, r0
 8000d22:	0032      	movs	r2, r6
 8000d24:	409e      	lsls	r6, r3
 8000d26:	40c2      	lsrs	r2, r0
 8000d28:	0030      	movs	r0, r6
 8000d2a:	1e43      	subs	r3, r0, #1
 8000d2c:	4198      	sbcs	r0, r3
 8000d2e:	4310      	orrs	r0, r2
 8000d30:	e70c      	b.n	8000b4c <__aeabi_fsub+0x50>
 8000d32:	2aff      	cmp	r2, #255	; 0xff
 8000d34:	d0db      	beq.n	8000cee <__aeabi_fsub+0x1f2>
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	4660      	mov	r0, ip
 8000d3a:	04db      	lsls	r3, r3, #19
 8000d3c:	4318      	orrs	r0, r3
 8000d3e:	4684      	mov	ip, r0
 8000d40:	2f1b      	cmp	r7, #27
 8000d42:	dd56      	ble.n	8000df2 <__aeabi_fsub+0x2f6>
 8000d44:	2001      	movs	r0, #1
 8000d46:	000c      	movs	r4, r1
 8000d48:	0015      	movs	r5, r2
 8000d4a:	1a30      	subs	r0, r6, r0
 8000d4c:	e700      	b.n	8000b50 <__aeabi_fsub+0x54>
 8000d4e:	4663      	mov	r3, ip
 8000d50:	1b9f      	subs	r7, r3, r6
 8000d52:	017b      	lsls	r3, r7, #5
 8000d54:	d43d      	bmi.n	8000dd2 <__aeabi_fsub+0x2d6>
 8000d56:	2f00      	cmp	r7, #0
 8000d58:	d000      	beq.n	8000d5c <__aeabi_fsub+0x260>
 8000d5a:	e6fe      	b.n	8000b5a <__aeabi_fsub+0x5e>
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2700      	movs	r7, #0
 8000d62:	e716      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000d64:	0005      	movs	r5, r0
 8000d66:	e7af      	b.n	8000cc8 <__aeabi_fsub+0x1cc>
 8000d68:	0032      	movs	r2, r6
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	4641      	mov	r1, r8
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	2320      	movs	r3, #32
 8000d72:	1a5b      	subs	r3, r3, r1
 8000d74:	409e      	lsls	r6, r3
 8000d76:	0030      	movs	r0, r6
 8000d78:	1e43      	subs	r3, r0, #1
 8000d7a:	4198      	sbcs	r0, r3
 8000d7c:	4310      	orrs	r0, r2
 8000d7e:	e721      	b.n	8000bc4 <__aeabi_fsub+0xc8>
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d1a7      	bne.n	8000cd4 <__aeabi_fsub+0x1d8>
 8000d84:	4663      	mov	r3, ip
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d059      	beq.n	8000e3e <__aeabi_fsub+0x342>
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_fsub+0x296>
 8000d90:	e6ff      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000d92:	0030      	movs	r0, r6
 8000d94:	4460      	add	r0, ip
 8000d96:	0143      	lsls	r3, r0, #5
 8000d98:	d592      	bpl.n	8000cc0 <__aeabi_fsub+0x1c4>
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <__aeabi_fsub+0x348>)
 8000d9c:	3501      	adds	r5, #1
 8000d9e:	4018      	ands	r0, r3
 8000da0:	e78e      	b.n	8000cc0 <__aeabi_fsub+0x1c4>
 8000da2:	4663      	mov	r3, ip
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d047      	beq.n	8000e38 <__aeabi_fsub+0x33c>
 8000da8:	1e4b      	subs	r3, r1, #1
 8000daa:	2901      	cmp	r1, #1
 8000dac:	d015      	beq.n	8000dda <__aeabi_fsub+0x2de>
 8000dae:	29ff      	cmp	r1, #255	; 0xff
 8000db0:	d02b      	beq.n	8000e0a <__aeabi_fsub+0x30e>
 8000db2:	0019      	movs	r1, r3
 8000db4:	e74e      	b.n	8000c54 <__aeabi_fsub+0x158>
 8000db6:	000c      	movs	r4, r1
 8000db8:	464b      	mov	r3, r9
 8000dba:	003d      	movs	r5, r7
 8000dbc:	e784      	b.n	8000cc8 <__aeabi_fsub+0x1cc>
 8000dbe:	4662      	mov	r2, ip
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	d18b      	bne.n	8000cdc <__aeabi_fsub+0x1e0>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d192      	bne.n	8000cee <__aeabi_fsub+0x1f2>
 8000dc8:	2780      	movs	r7, #128	; 0x80
 8000dca:	2400      	movs	r4, #0
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	03ff      	lsls	r7, r7, #15
 8000dd0:	e6df      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000dd2:	4663      	mov	r3, ip
 8000dd4:	000c      	movs	r4, r1
 8000dd6:	1af7      	subs	r7, r6, r3
 8000dd8:	e6bf      	b.n	8000b5a <__aeabi_fsub+0x5e>
 8000dda:	0030      	movs	r0, r6
 8000ddc:	4460      	add	r0, ip
 8000dde:	2501      	movs	r5, #1
 8000de0:	0143      	lsls	r3, r0, #5
 8000de2:	d400      	bmi.n	8000de6 <__aeabi_fsub+0x2ea>
 8000de4:	e76c      	b.n	8000cc0 <__aeabi_fsub+0x1c4>
 8000de6:	2502      	movs	r5, #2
 8000de8:	e6f2      	b.n	8000bd0 <__aeabi_fsub+0xd4>
 8000dea:	4663      	mov	r3, ip
 8000dec:	2501      	movs	r5, #1
 8000dee:	1b98      	subs	r0, r3, r6
 8000df0:	e6ae      	b.n	8000b50 <__aeabi_fsub+0x54>
 8000df2:	2320      	movs	r3, #32
 8000df4:	4664      	mov	r4, ip
 8000df6:	4660      	mov	r0, ip
 8000df8:	40fc      	lsrs	r4, r7
 8000dfa:	1bdf      	subs	r7, r3, r7
 8000dfc:	40b8      	lsls	r0, r7
 8000dfe:	1e43      	subs	r3, r0, #1
 8000e00:	4198      	sbcs	r0, r3
 8000e02:	4320      	orrs	r0, r4
 8000e04:	e79f      	b.n	8000d46 <__aeabi_fsub+0x24a>
 8000e06:	0005      	movs	r5, r0
 8000e08:	e75e      	b.n	8000cc8 <__aeabi_fsub+0x1cc>
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	e771      	b.n	8000cf2 <__aeabi_fsub+0x1f6>
 8000e0e:	2320      	movs	r3, #32
 8000e10:	4665      	mov	r5, ip
 8000e12:	4660      	mov	r0, ip
 8000e14:	40cd      	lsrs	r5, r1
 8000e16:	1a59      	subs	r1, r3, r1
 8000e18:	4088      	lsls	r0, r1
 8000e1a:	1e43      	subs	r3, r0, #1
 8000e1c:	4198      	sbcs	r0, r3
 8000e1e:	4328      	orrs	r0, r5
 8000e20:	e71c      	b.n	8000c5c <__aeabi_fsub+0x160>
 8000e22:	4663      	mov	r3, ip
 8000e24:	000c      	movs	r4, r1
 8000e26:	2501      	movs	r5, #1
 8000e28:	1af0      	subs	r0, r6, r3
 8000e2a:	e691      	b.n	8000b50 <__aeabi_fsub+0x54>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d095      	beq.n	8000d5c <__aeabi_fsub+0x260>
 8000e30:	000c      	movs	r4, r1
 8000e32:	464f      	mov	r7, r9
 8000e34:	2200      	movs	r2, #0
 8000e36:	e6ac      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	000d      	movs	r5, r1
 8000e3c:	e744      	b.n	8000cc8 <__aeabi_fsub+0x1cc>
 8000e3e:	464f      	mov	r7, r9
 8000e40:	2200      	movs	r2, #0
 8000e42:	e6a6      	b.n	8000b92 <__aeabi_fsub+0x96>
 8000e44:	fbffffff 	.word	0xfbffffff
 8000e48:	7dffffff 	.word	0x7dffffff
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fsub+0x356>
 8000e50:	e736      	b.n	8000cc0 <__aeabi_fsub+0x1c4>
 8000e52:	2400      	movs	r4, #0
 8000e54:	2700      	movs	r7, #0
 8000e56:	e69c      	b.n	8000b92 <__aeabi_fsub+0x96>

08000e58 <__aeabi_f2iz>:
 8000e58:	0241      	lsls	r1, r0, #9
 8000e5a:	0042      	lsls	r2, r0, #1
 8000e5c:	0fc3      	lsrs	r3, r0, #31
 8000e5e:	0a49      	lsrs	r1, r1, #9
 8000e60:	2000      	movs	r0, #0
 8000e62:	0e12      	lsrs	r2, r2, #24
 8000e64:	2a7e      	cmp	r2, #126	; 0x7e
 8000e66:	dd03      	ble.n	8000e70 <__aeabi_f2iz+0x18>
 8000e68:	2a9d      	cmp	r2, #157	; 0x9d
 8000e6a:	dd02      	ble.n	8000e72 <__aeabi_f2iz+0x1a>
 8000e6c:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <__aeabi_f2iz+0x3c>)
 8000e6e:	1898      	adds	r0, r3, r2
 8000e70:	4770      	bx	lr
 8000e72:	2080      	movs	r0, #128	; 0x80
 8000e74:	0400      	lsls	r0, r0, #16
 8000e76:	4301      	orrs	r1, r0
 8000e78:	2a95      	cmp	r2, #149	; 0x95
 8000e7a:	dc07      	bgt.n	8000e8c <__aeabi_f2iz+0x34>
 8000e7c:	2096      	movs	r0, #150	; 0x96
 8000e7e:	1a82      	subs	r2, r0, r2
 8000e80:	40d1      	lsrs	r1, r2
 8000e82:	4248      	negs	r0, r1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f3      	bne.n	8000e70 <__aeabi_f2iz+0x18>
 8000e88:	0008      	movs	r0, r1
 8000e8a:	e7f1      	b.n	8000e70 <__aeabi_f2iz+0x18>
 8000e8c:	3a96      	subs	r2, #150	; 0x96
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	e7f7      	b.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	7fffffff 	.word	0x7fffffff

08000e98 <__aeabi_i2f>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d013      	beq.n	8000ec6 <__aeabi_i2f+0x2e>
 8000e9e:	17c3      	asrs	r3, r0, #31
 8000ea0:	18c6      	adds	r6, r0, r3
 8000ea2:	405e      	eors	r6, r3
 8000ea4:	0fc4      	lsrs	r4, r0, #31
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	f000 fc34 	bl	8001714 <__clzsi2>
 8000eac:	239e      	movs	r3, #158	; 0x9e
 8000eae:	0005      	movs	r5, r0
 8000eb0:	1a1b      	subs	r3, r3, r0
 8000eb2:	2b96      	cmp	r3, #150	; 0x96
 8000eb4:	dc0f      	bgt.n	8000ed6 <__aeabi_i2f+0x3e>
 8000eb6:	2808      	cmp	r0, #8
 8000eb8:	dd01      	ble.n	8000ebe <__aeabi_i2f+0x26>
 8000eba:	3d08      	subs	r5, #8
 8000ebc:	40ae      	lsls	r6, r5
 8000ebe:	0276      	lsls	r6, r6, #9
 8000ec0:	0a76      	lsrs	r6, r6, #9
 8000ec2:	b2d8      	uxtb	r0, r3
 8000ec4:	e002      	b.n	8000ecc <__aeabi_i2f+0x34>
 8000ec6:	2400      	movs	r4, #0
 8000ec8:	2000      	movs	r0, #0
 8000eca:	2600      	movs	r6, #0
 8000ecc:	05c0      	lsls	r0, r0, #23
 8000ece:	4330      	orrs	r0, r6
 8000ed0:	07e4      	lsls	r4, r4, #31
 8000ed2:	4320      	orrs	r0, r4
 8000ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed6:	2b99      	cmp	r3, #153	; 0x99
 8000ed8:	dd0c      	ble.n	8000ef4 <__aeabi_i2f+0x5c>
 8000eda:	2205      	movs	r2, #5
 8000edc:	0031      	movs	r1, r6
 8000ede:	1a12      	subs	r2, r2, r0
 8000ee0:	40d1      	lsrs	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	0001      	movs	r1, r0
 8000ee6:	0030      	movs	r0, r6
 8000ee8:	311b      	adds	r1, #27
 8000eea:	4088      	lsls	r0, r1
 8000eec:	1e41      	subs	r1, r0, #1
 8000eee:	4188      	sbcs	r0, r1
 8000ef0:	4302      	orrs	r2, r0
 8000ef2:	0016      	movs	r6, r2
 8000ef4:	2d05      	cmp	r5, #5
 8000ef6:	dc12      	bgt.n	8000f1e <__aeabi_i2f+0x86>
 8000ef8:	0031      	movs	r1, r6
 8000efa:	4f0d      	ldr	r7, [pc, #52]	; (8000f30 <__aeabi_i2f+0x98>)
 8000efc:	4039      	ands	r1, r7
 8000efe:	0772      	lsls	r2, r6, #29
 8000f00:	d009      	beq.n	8000f16 <__aeabi_i2f+0x7e>
 8000f02:	200f      	movs	r0, #15
 8000f04:	4030      	ands	r0, r6
 8000f06:	2804      	cmp	r0, #4
 8000f08:	d005      	beq.n	8000f16 <__aeabi_i2f+0x7e>
 8000f0a:	3104      	adds	r1, #4
 8000f0c:	014a      	lsls	r2, r1, #5
 8000f0e:	d502      	bpl.n	8000f16 <__aeabi_i2f+0x7e>
 8000f10:	239f      	movs	r3, #159	; 0x9f
 8000f12:	4039      	ands	r1, r7
 8000f14:	1b5b      	subs	r3, r3, r5
 8000f16:	0189      	lsls	r1, r1, #6
 8000f18:	0a4e      	lsrs	r6, r1, #9
 8000f1a:	b2d8      	uxtb	r0, r3
 8000f1c:	e7d6      	b.n	8000ecc <__aeabi_i2f+0x34>
 8000f1e:	1f6a      	subs	r2, r5, #5
 8000f20:	4096      	lsls	r6, r2
 8000f22:	0031      	movs	r1, r6
 8000f24:	4f02      	ldr	r7, [pc, #8]	; (8000f30 <__aeabi_i2f+0x98>)
 8000f26:	4039      	ands	r1, r7
 8000f28:	0772      	lsls	r2, r6, #29
 8000f2a:	d0f4      	beq.n	8000f16 <__aeabi_i2f+0x7e>
 8000f2c:	e7e9      	b.n	8000f02 <__aeabi_i2f+0x6a>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	fbffffff 	.word	0xfbffffff

08000f34 <__aeabi_ui2f>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	1e05      	subs	r5, r0, #0
 8000f38:	d00e      	beq.n	8000f58 <__aeabi_ui2f+0x24>
 8000f3a:	f000 fbeb 	bl	8001714 <__clzsi2>
 8000f3e:	239e      	movs	r3, #158	; 0x9e
 8000f40:	0004      	movs	r4, r0
 8000f42:	1a1b      	subs	r3, r3, r0
 8000f44:	2b96      	cmp	r3, #150	; 0x96
 8000f46:	dc0c      	bgt.n	8000f62 <__aeabi_ui2f+0x2e>
 8000f48:	2808      	cmp	r0, #8
 8000f4a:	dd01      	ble.n	8000f50 <__aeabi_ui2f+0x1c>
 8000f4c:	3c08      	subs	r4, #8
 8000f4e:	40a5      	lsls	r5, r4
 8000f50:	026d      	lsls	r5, r5, #9
 8000f52:	0a6d      	lsrs	r5, r5, #9
 8000f54:	b2d8      	uxtb	r0, r3
 8000f56:	e001      	b.n	8000f5c <__aeabi_ui2f+0x28>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	05c0      	lsls	r0, r0, #23
 8000f5e:	4328      	orrs	r0, r5
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	2b99      	cmp	r3, #153	; 0x99
 8000f64:	dd09      	ble.n	8000f7a <__aeabi_ui2f+0x46>
 8000f66:	0002      	movs	r2, r0
 8000f68:	0029      	movs	r1, r5
 8000f6a:	321b      	adds	r2, #27
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	1e4a      	subs	r2, r1, #1
 8000f70:	4191      	sbcs	r1, r2
 8000f72:	2205      	movs	r2, #5
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	40d5      	lsrs	r5, r2
 8000f78:	430d      	orrs	r5, r1
 8000f7a:	2c05      	cmp	r4, #5
 8000f7c:	dc12      	bgt.n	8000fa4 <__aeabi_ui2f+0x70>
 8000f7e:	0029      	movs	r1, r5
 8000f80:	4e0c      	ldr	r6, [pc, #48]	; (8000fb4 <__aeabi_ui2f+0x80>)
 8000f82:	4031      	ands	r1, r6
 8000f84:	076a      	lsls	r2, r5, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000f88:	200f      	movs	r0, #15
 8000f8a:	4028      	ands	r0, r5
 8000f8c:	2804      	cmp	r0, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000f90:	3104      	adds	r1, #4
 8000f92:	014a      	lsls	r2, r1, #5
 8000f94:	d502      	bpl.n	8000f9c <__aeabi_ui2f+0x68>
 8000f96:	239f      	movs	r3, #159	; 0x9f
 8000f98:	4031      	ands	r1, r6
 8000f9a:	1b1b      	subs	r3, r3, r4
 8000f9c:	0189      	lsls	r1, r1, #6
 8000f9e:	0a4d      	lsrs	r5, r1, #9
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	e7db      	b.n	8000f5c <__aeabi_ui2f+0x28>
 8000fa4:	1f62      	subs	r2, r4, #5
 8000fa6:	4095      	lsls	r5, r2
 8000fa8:	0029      	movs	r1, r5
 8000faa:	4e02      	ldr	r6, [pc, #8]	; (8000fb4 <__aeabi_ui2f+0x80>)
 8000fac:	4031      	ands	r1, r6
 8000fae:	076a      	lsls	r2, r5, #29
 8000fb0:	d0f4      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000fb2:	e7e9      	b.n	8000f88 <__aeabi_ui2f+0x54>
 8000fb4:	fbffffff 	.word	0xfbffffff

08000fb8 <__aeabi_ddiv>:
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	4657      	mov	r7, sl
 8000fbc:	464e      	mov	r6, r9
 8000fbe:	4645      	mov	r5, r8
 8000fc0:	46de      	mov	lr, fp
 8000fc2:	b5e0      	push	{r5, r6, r7, lr}
 8000fc4:	4681      	mov	r9, r0
 8000fc6:	0005      	movs	r5, r0
 8000fc8:	030c      	lsls	r4, r1, #12
 8000fca:	0048      	lsls	r0, r1, #1
 8000fcc:	4692      	mov	sl, r2
 8000fce:	001f      	movs	r7, r3
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	0b24      	lsrs	r4, r4, #12
 8000fd4:	0d40      	lsrs	r0, r0, #21
 8000fd6:	0fce      	lsrs	r6, r1, #31
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x26>
 8000fdc:	e156      	b.n	800128c <__aeabi_ddiv+0x2d4>
 8000fde:	4bd4      	ldr	r3, [pc, #848]	; (8001330 <__aeabi_ddiv+0x378>)
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x2e>
 8000fe4:	e172      	b.n	80012cc <__aeabi_ddiv+0x314>
 8000fe6:	0f6b      	lsrs	r3, r5, #29
 8000fe8:	00e4      	lsls	r4, r4, #3
 8000fea:	431c      	orrs	r4, r3
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4323      	orrs	r3, r4
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4bcf      	ldr	r3, [pc, #828]	; (8001334 <__aeabi_ddiv+0x37c>)
 8000ff6:	00ed      	lsls	r5, r5, #3
 8000ff8:	469b      	mov	fp, r3
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	4699      	mov	r9, r3
 8000ffe:	4483      	add	fp, r0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	033c      	lsls	r4, r7, #12
 8001004:	007b      	lsls	r3, r7, #1
 8001006:	4650      	mov	r0, sl
 8001008:	0b24      	lsrs	r4, r4, #12
 800100a:	0d5b      	lsrs	r3, r3, #21
 800100c:	0fff      	lsrs	r7, r7, #31
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_ddiv+0x5c>
 8001012:	e11f      	b.n	8001254 <__aeabi_ddiv+0x29c>
 8001014:	4ac6      	ldr	r2, [pc, #792]	; (8001330 <__aeabi_ddiv+0x378>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x64>
 800101a:	e162      	b.n	80012e2 <__aeabi_ddiv+0x32a>
 800101c:	49c5      	ldr	r1, [pc, #788]	; (8001334 <__aeabi_ddiv+0x37c>)
 800101e:	0f42      	lsrs	r2, r0, #29
 8001020:	468c      	mov	ip, r1
 8001022:	00e4      	lsls	r4, r4, #3
 8001024:	4659      	mov	r1, fp
 8001026:	4314      	orrs	r4, r2
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	4463      	add	r3, ip
 800102c:	0412      	lsls	r2, r2, #16
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	4314      	orrs	r4, r2
 8001032:	469b      	mov	fp, r3
 8001034:	00c2      	lsls	r2, r0, #3
 8001036:	2000      	movs	r0, #0
 8001038:	0033      	movs	r3, r6
 800103a:	407b      	eors	r3, r7
 800103c:	469a      	mov	sl, r3
 800103e:	464b      	mov	r3, r9
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d827      	bhi.n	8001094 <__aeabi_ddiv+0xdc>
 8001044:	49bc      	ldr	r1, [pc, #752]	; (8001338 <__aeabi_ddiv+0x380>)
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	58cb      	ldr	r3, [r1, r3]
 800104a:	469f      	mov	pc, r3
 800104c:	46b2      	mov	sl, r6
 800104e:	9b00      	ldr	r3, [sp, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d016      	beq.n	8001082 <__aeabi_ddiv+0xca>
 8001054:	2b03      	cmp	r3, #3
 8001056:	d100      	bne.n	800105a <__aeabi_ddiv+0xa2>
 8001058:	e28e      	b.n	8001578 <__aeabi_ddiv+0x5c0>
 800105a:	2b01      	cmp	r3, #1
 800105c:	d000      	beq.n	8001060 <__aeabi_ddiv+0xa8>
 800105e:	e0d9      	b.n	8001214 <__aeabi_ddiv+0x25c>
 8001060:	2300      	movs	r3, #0
 8001062:	2400      	movs	r4, #0
 8001064:	2500      	movs	r5, #0
 8001066:	4652      	mov	r2, sl
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	4323      	orrs	r3, r4
 800106c:	07d2      	lsls	r2, r2, #31
 800106e:	4313      	orrs	r3, r2
 8001070:	0028      	movs	r0, r5
 8001072:	0019      	movs	r1, r3
 8001074:	b005      	add	sp, #20
 8001076:	bcf0      	pop	{r4, r5, r6, r7}
 8001078:	46bb      	mov	fp, r7
 800107a:	46b2      	mov	sl, r6
 800107c:	46a9      	mov	r9, r5
 800107e:	46a0      	mov	r8, r4
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	2400      	movs	r4, #0
 8001084:	2500      	movs	r5, #0
 8001086:	4baa      	ldr	r3, [pc, #680]	; (8001330 <__aeabi_ddiv+0x378>)
 8001088:	e7ed      	b.n	8001066 <__aeabi_ddiv+0xae>
 800108a:	46ba      	mov	sl, r7
 800108c:	46a0      	mov	r8, r4
 800108e:	0015      	movs	r5, r2
 8001090:	9000      	str	r0, [sp, #0]
 8001092:	e7dc      	b.n	800104e <__aeabi_ddiv+0x96>
 8001094:	4544      	cmp	r4, r8
 8001096:	d200      	bcs.n	800109a <__aeabi_ddiv+0xe2>
 8001098:	e1c7      	b.n	800142a <__aeabi_ddiv+0x472>
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0xe6>
 800109c:	e1c2      	b.n	8001424 <__aeabi_ddiv+0x46c>
 800109e:	2301      	movs	r3, #1
 80010a0:	425b      	negs	r3, r3
 80010a2:	469c      	mov	ip, r3
 80010a4:	002e      	movs	r6, r5
 80010a6:	4640      	mov	r0, r8
 80010a8:	2500      	movs	r5, #0
 80010aa:	44e3      	add	fp, ip
 80010ac:	0223      	lsls	r3, r4, #8
 80010ae:	0e14      	lsrs	r4, r2, #24
 80010b0:	431c      	orrs	r4, r3
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	4699      	mov	r9, r3
 80010b6:	0423      	lsls	r3, r4, #16
 80010b8:	0c1f      	lsrs	r7, r3, #16
 80010ba:	0212      	lsls	r2, r2, #8
 80010bc:	4649      	mov	r1, r9
 80010be:	9200      	str	r2, [sp, #0]
 80010c0:	9701      	str	r7, [sp, #4]
 80010c2:	f7ff f8bb 	bl	800023c <__aeabi_uidivmod>
 80010c6:	0002      	movs	r2, r0
 80010c8:	437a      	muls	r2, r7
 80010ca:	040b      	lsls	r3, r1, #16
 80010cc:	0c31      	lsrs	r1, r6, #16
 80010ce:	4680      	mov	r8, r0
 80010d0:	4319      	orrs	r1, r3
 80010d2:	428a      	cmp	r2, r1
 80010d4:	d907      	bls.n	80010e6 <__aeabi_ddiv+0x12e>
 80010d6:	2301      	movs	r3, #1
 80010d8:	425b      	negs	r3, r3
 80010da:	469c      	mov	ip, r3
 80010dc:	1909      	adds	r1, r1, r4
 80010de:	44e0      	add	r8, ip
 80010e0:	428c      	cmp	r4, r1
 80010e2:	d800      	bhi.n	80010e6 <__aeabi_ddiv+0x12e>
 80010e4:	e207      	b.n	80014f6 <__aeabi_ddiv+0x53e>
 80010e6:	1a88      	subs	r0, r1, r2
 80010e8:	4649      	mov	r1, r9
 80010ea:	f7ff f8a7 	bl	800023c <__aeabi_uidivmod>
 80010ee:	0409      	lsls	r1, r1, #16
 80010f0:	468c      	mov	ip, r1
 80010f2:	0431      	lsls	r1, r6, #16
 80010f4:	4666      	mov	r6, ip
 80010f6:	9a01      	ldr	r2, [sp, #4]
 80010f8:	0c09      	lsrs	r1, r1, #16
 80010fa:	4342      	muls	r2, r0
 80010fc:	0003      	movs	r3, r0
 80010fe:	4331      	orrs	r1, r6
 8001100:	428a      	cmp	r2, r1
 8001102:	d904      	bls.n	800110e <__aeabi_ddiv+0x156>
 8001104:	1909      	adds	r1, r1, r4
 8001106:	3b01      	subs	r3, #1
 8001108:	428c      	cmp	r4, r1
 800110a:	d800      	bhi.n	800110e <__aeabi_ddiv+0x156>
 800110c:	e1ed      	b.n	80014ea <__aeabi_ddiv+0x532>
 800110e:	1a88      	subs	r0, r1, r2
 8001110:	4642      	mov	r2, r8
 8001112:	0412      	lsls	r2, r2, #16
 8001114:	431a      	orrs	r2, r3
 8001116:	4690      	mov	r8, r2
 8001118:	4641      	mov	r1, r8
 800111a:	9b00      	ldr	r3, [sp, #0]
 800111c:	040e      	lsls	r6, r1, #16
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	001f      	movs	r7, r3
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	9b00      	ldr	r3, [sp, #0]
 8001126:	0c36      	lsrs	r6, r6, #16
 8001128:	041b      	lsls	r3, r3, #16
 800112a:	0c19      	lsrs	r1, r3, #16
 800112c:	000b      	movs	r3, r1
 800112e:	4373      	muls	r3, r6
 8001130:	0c12      	lsrs	r2, r2, #16
 8001132:	437e      	muls	r6, r7
 8001134:	9103      	str	r1, [sp, #12]
 8001136:	4351      	muls	r1, r2
 8001138:	437a      	muls	r2, r7
 800113a:	0c1f      	lsrs	r7, r3, #16
 800113c:	46bc      	mov	ip, r7
 800113e:	1876      	adds	r6, r6, r1
 8001140:	4466      	add	r6, ip
 8001142:	42b1      	cmp	r1, r6
 8001144:	d903      	bls.n	800114e <__aeabi_ddiv+0x196>
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	468c      	mov	ip, r1
 800114c:	4462      	add	r2, ip
 800114e:	0c31      	lsrs	r1, r6, #16
 8001150:	188a      	adds	r2, r1, r2
 8001152:	0431      	lsls	r1, r6, #16
 8001154:	041e      	lsls	r6, r3, #16
 8001156:	0c36      	lsrs	r6, r6, #16
 8001158:	198e      	adds	r6, r1, r6
 800115a:	4290      	cmp	r0, r2
 800115c:	d302      	bcc.n	8001164 <__aeabi_ddiv+0x1ac>
 800115e:	d112      	bne.n	8001186 <__aeabi_ddiv+0x1ce>
 8001160:	42b5      	cmp	r5, r6
 8001162:	d210      	bcs.n	8001186 <__aeabi_ddiv+0x1ce>
 8001164:	4643      	mov	r3, r8
 8001166:	1e59      	subs	r1, r3, #1
 8001168:	9b00      	ldr	r3, [sp, #0]
 800116a:	469c      	mov	ip, r3
 800116c:	4465      	add	r5, ip
 800116e:	001f      	movs	r7, r3
 8001170:	429d      	cmp	r5, r3
 8001172:	419b      	sbcs	r3, r3
 8001174:	425b      	negs	r3, r3
 8001176:	191b      	adds	r3, r3, r4
 8001178:	18c0      	adds	r0, r0, r3
 800117a:	4284      	cmp	r4, r0
 800117c:	d200      	bcs.n	8001180 <__aeabi_ddiv+0x1c8>
 800117e:	e1a0      	b.n	80014c2 <__aeabi_ddiv+0x50a>
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x1cc>
 8001182:	e19b      	b.n	80014bc <__aeabi_ddiv+0x504>
 8001184:	4688      	mov	r8, r1
 8001186:	1bae      	subs	r6, r5, r6
 8001188:	42b5      	cmp	r5, r6
 800118a:	41ad      	sbcs	r5, r5
 800118c:	1a80      	subs	r0, r0, r2
 800118e:	426d      	negs	r5, r5
 8001190:	1b40      	subs	r0, r0, r5
 8001192:	4284      	cmp	r4, r0
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x1e0>
 8001196:	e1d5      	b.n	8001544 <__aeabi_ddiv+0x58c>
 8001198:	4649      	mov	r1, r9
 800119a:	f7ff f84f 	bl	800023c <__aeabi_uidivmod>
 800119e:	9a01      	ldr	r2, [sp, #4]
 80011a0:	040b      	lsls	r3, r1, #16
 80011a2:	4342      	muls	r2, r0
 80011a4:	0c31      	lsrs	r1, r6, #16
 80011a6:	0005      	movs	r5, r0
 80011a8:	4319      	orrs	r1, r3
 80011aa:	428a      	cmp	r2, r1
 80011ac:	d900      	bls.n	80011b0 <__aeabi_ddiv+0x1f8>
 80011ae:	e16c      	b.n	800148a <__aeabi_ddiv+0x4d2>
 80011b0:	1a88      	subs	r0, r1, r2
 80011b2:	4649      	mov	r1, r9
 80011b4:	f7ff f842 	bl	800023c <__aeabi_uidivmod>
 80011b8:	9a01      	ldr	r2, [sp, #4]
 80011ba:	0436      	lsls	r6, r6, #16
 80011bc:	4342      	muls	r2, r0
 80011be:	0409      	lsls	r1, r1, #16
 80011c0:	0c36      	lsrs	r6, r6, #16
 80011c2:	0003      	movs	r3, r0
 80011c4:	430e      	orrs	r6, r1
 80011c6:	42b2      	cmp	r2, r6
 80011c8:	d900      	bls.n	80011cc <__aeabi_ddiv+0x214>
 80011ca:	e153      	b.n	8001474 <__aeabi_ddiv+0x4bc>
 80011cc:	9803      	ldr	r0, [sp, #12]
 80011ce:	1ab6      	subs	r6, r6, r2
 80011d0:	0002      	movs	r2, r0
 80011d2:	042d      	lsls	r5, r5, #16
 80011d4:	431d      	orrs	r5, r3
 80011d6:	9f02      	ldr	r7, [sp, #8]
 80011d8:	042b      	lsls	r3, r5, #16
 80011da:	0c1b      	lsrs	r3, r3, #16
 80011dc:	435a      	muls	r2, r3
 80011de:	437b      	muls	r3, r7
 80011e0:	469c      	mov	ip, r3
 80011e2:	0c29      	lsrs	r1, r5, #16
 80011e4:	4348      	muls	r0, r1
 80011e6:	0c13      	lsrs	r3, r2, #16
 80011e8:	4484      	add	ip, r0
 80011ea:	4463      	add	r3, ip
 80011ec:	4379      	muls	r1, r7
 80011ee:	4298      	cmp	r0, r3
 80011f0:	d903      	bls.n	80011fa <__aeabi_ddiv+0x242>
 80011f2:	2080      	movs	r0, #128	; 0x80
 80011f4:	0240      	lsls	r0, r0, #9
 80011f6:	4684      	mov	ip, r0
 80011f8:	4461      	add	r1, ip
 80011fa:	0c18      	lsrs	r0, r3, #16
 80011fc:	0412      	lsls	r2, r2, #16
 80011fe:	041b      	lsls	r3, r3, #16
 8001200:	0c12      	lsrs	r2, r2, #16
 8001202:	1841      	adds	r1, r0, r1
 8001204:	189b      	adds	r3, r3, r2
 8001206:	428e      	cmp	r6, r1
 8001208:	d200      	bcs.n	800120c <__aeabi_ddiv+0x254>
 800120a:	e0ff      	b.n	800140c <__aeabi_ddiv+0x454>
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x258>
 800120e:	e0fa      	b.n	8001406 <__aeabi_ddiv+0x44e>
 8001210:	2301      	movs	r3, #1
 8001212:	431d      	orrs	r5, r3
 8001214:	4a49      	ldr	r2, [pc, #292]	; (800133c <__aeabi_ddiv+0x384>)
 8001216:	445a      	add	r2, fp
 8001218:	2a00      	cmp	r2, #0
 800121a:	dc00      	bgt.n	800121e <__aeabi_ddiv+0x266>
 800121c:	e0aa      	b.n	8001374 <__aeabi_ddiv+0x3bc>
 800121e:	076b      	lsls	r3, r5, #29
 8001220:	d000      	beq.n	8001224 <__aeabi_ddiv+0x26c>
 8001222:	e13d      	b.n	80014a0 <__aeabi_ddiv+0x4e8>
 8001224:	08ed      	lsrs	r5, r5, #3
 8001226:	4643      	mov	r3, r8
 8001228:	01db      	lsls	r3, r3, #7
 800122a:	d506      	bpl.n	800123a <__aeabi_ddiv+0x282>
 800122c:	4642      	mov	r2, r8
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <__aeabi_ddiv+0x388>)
 8001230:	401a      	ands	r2, r3
 8001232:	4690      	mov	r8, r2
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	00d2      	lsls	r2, r2, #3
 8001238:	445a      	add	r2, fp
 800123a:	4b42      	ldr	r3, [pc, #264]	; (8001344 <__aeabi_ddiv+0x38c>)
 800123c:	429a      	cmp	r2, r3
 800123e:	dd00      	ble.n	8001242 <__aeabi_ddiv+0x28a>
 8001240:	e71f      	b.n	8001082 <__aeabi_ddiv+0xca>
 8001242:	4643      	mov	r3, r8
 8001244:	075b      	lsls	r3, r3, #29
 8001246:	431d      	orrs	r5, r3
 8001248:	4643      	mov	r3, r8
 800124a:	0552      	lsls	r2, r2, #21
 800124c:	025c      	lsls	r4, r3, #9
 800124e:	0b24      	lsrs	r4, r4, #12
 8001250:	0d53      	lsrs	r3, r2, #21
 8001252:	e708      	b.n	8001066 <__aeabi_ddiv+0xae>
 8001254:	4652      	mov	r2, sl
 8001256:	4322      	orrs	r2, r4
 8001258:	d100      	bne.n	800125c <__aeabi_ddiv+0x2a4>
 800125a:	e07b      	b.n	8001354 <__aeabi_ddiv+0x39c>
 800125c:	2c00      	cmp	r4, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x2aa>
 8001260:	e0fa      	b.n	8001458 <__aeabi_ddiv+0x4a0>
 8001262:	0020      	movs	r0, r4
 8001264:	f000 fa56 	bl	8001714 <__clzsi2>
 8001268:	0002      	movs	r2, r0
 800126a:	3a0b      	subs	r2, #11
 800126c:	231d      	movs	r3, #29
 800126e:	0001      	movs	r1, r0
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	4652      	mov	r2, sl
 8001274:	3908      	subs	r1, #8
 8001276:	40da      	lsrs	r2, r3
 8001278:	408c      	lsls	r4, r1
 800127a:	4314      	orrs	r4, r2
 800127c:	4652      	mov	r2, sl
 800127e:	408a      	lsls	r2, r1
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <__aeabi_ddiv+0x390>)
 8001282:	4458      	add	r0, fp
 8001284:	469b      	mov	fp, r3
 8001286:	4483      	add	fp, r0
 8001288:	2000      	movs	r0, #0
 800128a:	e6d5      	b.n	8001038 <__aeabi_ddiv+0x80>
 800128c:	464b      	mov	r3, r9
 800128e:	4323      	orrs	r3, r4
 8001290:	4698      	mov	r8, r3
 8001292:	d044      	beq.n	800131e <__aeabi_ddiv+0x366>
 8001294:	2c00      	cmp	r4, #0
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x2e2>
 8001298:	e0ce      	b.n	8001438 <__aeabi_ddiv+0x480>
 800129a:	0020      	movs	r0, r4
 800129c:	f000 fa3a 	bl	8001714 <__clzsi2>
 80012a0:	0001      	movs	r1, r0
 80012a2:	0002      	movs	r2, r0
 80012a4:	390b      	subs	r1, #11
 80012a6:	231d      	movs	r3, #29
 80012a8:	1a5b      	subs	r3, r3, r1
 80012aa:	4649      	mov	r1, r9
 80012ac:	0010      	movs	r0, r2
 80012ae:	40d9      	lsrs	r1, r3
 80012b0:	3808      	subs	r0, #8
 80012b2:	4084      	lsls	r4, r0
 80012b4:	000b      	movs	r3, r1
 80012b6:	464d      	mov	r5, r9
 80012b8:	4323      	orrs	r3, r4
 80012ba:	4698      	mov	r8, r3
 80012bc:	4085      	lsls	r5, r0
 80012be:	4823      	ldr	r0, [pc, #140]	; (800134c <__aeabi_ddiv+0x394>)
 80012c0:	1a83      	subs	r3, r0, r2
 80012c2:	469b      	mov	fp, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	4699      	mov	r9, r3
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	e69a      	b.n	8001002 <__aeabi_ddiv+0x4a>
 80012cc:	464b      	mov	r3, r9
 80012ce:	4323      	orrs	r3, r4
 80012d0:	4698      	mov	r8, r3
 80012d2:	d11d      	bne.n	8001310 <__aeabi_ddiv+0x358>
 80012d4:	2308      	movs	r3, #8
 80012d6:	4699      	mov	r9, r3
 80012d8:	3b06      	subs	r3, #6
 80012da:	2500      	movs	r5, #0
 80012dc:	4683      	mov	fp, r0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	e68f      	b.n	8001002 <__aeabi_ddiv+0x4a>
 80012e2:	4652      	mov	r2, sl
 80012e4:	4322      	orrs	r2, r4
 80012e6:	d109      	bne.n	80012fc <__aeabi_ddiv+0x344>
 80012e8:	2302      	movs	r3, #2
 80012ea:	4649      	mov	r1, r9
 80012ec:	4319      	orrs	r1, r3
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <__aeabi_ddiv+0x398>)
 80012f0:	4689      	mov	r9, r1
 80012f2:	469c      	mov	ip, r3
 80012f4:	2400      	movs	r4, #0
 80012f6:	2002      	movs	r0, #2
 80012f8:	44e3      	add	fp, ip
 80012fa:	e69d      	b.n	8001038 <__aeabi_ddiv+0x80>
 80012fc:	2303      	movs	r3, #3
 80012fe:	464a      	mov	r2, r9
 8001300:	431a      	orrs	r2, r3
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <__aeabi_ddiv+0x398>)
 8001304:	4691      	mov	r9, r2
 8001306:	469c      	mov	ip, r3
 8001308:	4652      	mov	r2, sl
 800130a:	2003      	movs	r0, #3
 800130c:	44e3      	add	fp, ip
 800130e:	e693      	b.n	8001038 <__aeabi_ddiv+0x80>
 8001310:	230c      	movs	r3, #12
 8001312:	4699      	mov	r9, r3
 8001314:	3b09      	subs	r3, #9
 8001316:	46a0      	mov	r8, r4
 8001318:	4683      	mov	fp, r0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	e671      	b.n	8001002 <__aeabi_ddiv+0x4a>
 800131e:	2304      	movs	r3, #4
 8001320:	4699      	mov	r9, r3
 8001322:	2300      	movs	r3, #0
 8001324:	469b      	mov	fp, r3
 8001326:	3301      	adds	r3, #1
 8001328:	2500      	movs	r5, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	e669      	b.n	8001002 <__aeabi_ddiv+0x4a>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	fffffc01 	.word	0xfffffc01
 8001338:	08007858 	.word	0x08007858
 800133c:	000003ff 	.word	0x000003ff
 8001340:	feffffff 	.word	0xfeffffff
 8001344:	000007fe 	.word	0x000007fe
 8001348:	000003f3 	.word	0x000003f3
 800134c:	fffffc0d 	.word	0xfffffc0d
 8001350:	fffff801 	.word	0xfffff801
 8001354:	4649      	mov	r1, r9
 8001356:	2301      	movs	r3, #1
 8001358:	4319      	orrs	r1, r3
 800135a:	4689      	mov	r9, r1
 800135c:	2400      	movs	r4, #0
 800135e:	2001      	movs	r0, #1
 8001360:	e66a      	b.n	8001038 <__aeabi_ddiv+0x80>
 8001362:	2300      	movs	r3, #0
 8001364:	2480      	movs	r4, #128	; 0x80
 8001366:	469a      	mov	sl, r3
 8001368:	2500      	movs	r5, #0
 800136a:	4b8a      	ldr	r3, [pc, #552]	; (8001594 <__aeabi_ddiv+0x5dc>)
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	e67a      	b.n	8001066 <__aeabi_ddiv+0xae>
 8001370:	2501      	movs	r5, #1
 8001372:	426d      	negs	r5, r5
 8001374:	2301      	movs	r3, #1
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	2b38      	cmp	r3, #56	; 0x38
 800137a:	dd00      	ble.n	800137e <__aeabi_ddiv+0x3c6>
 800137c:	e670      	b.n	8001060 <__aeabi_ddiv+0xa8>
 800137e:	2b1f      	cmp	r3, #31
 8001380:	dc00      	bgt.n	8001384 <__aeabi_ddiv+0x3cc>
 8001382:	e0bf      	b.n	8001504 <__aeabi_ddiv+0x54c>
 8001384:	211f      	movs	r1, #31
 8001386:	4249      	negs	r1, r1
 8001388:	1a8a      	subs	r2, r1, r2
 800138a:	4641      	mov	r1, r8
 800138c:	40d1      	lsrs	r1, r2
 800138e:	000a      	movs	r2, r1
 8001390:	2b20      	cmp	r3, #32
 8001392:	d004      	beq.n	800139e <__aeabi_ddiv+0x3e6>
 8001394:	4641      	mov	r1, r8
 8001396:	4b80      	ldr	r3, [pc, #512]	; (8001598 <__aeabi_ddiv+0x5e0>)
 8001398:	445b      	add	r3, fp
 800139a:	4099      	lsls	r1, r3
 800139c:	430d      	orrs	r5, r1
 800139e:	1e6b      	subs	r3, r5, #1
 80013a0:	419d      	sbcs	r5, r3
 80013a2:	2307      	movs	r3, #7
 80013a4:	432a      	orrs	r2, r5
 80013a6:	001d      	movs	r5, r3
 80013a8:	2400      	movs	r4, #0
 80013aa:	4015      	ands	r5, r2
 80013ac:	4213      	tst	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x3fa>
 80013b0:	e0d4      	b.n	800155c <__aeabi_ddiv+0x5a4>
 80013b2:	210f      	movs	r1, #15
 80013b4:	2300      	movs	r3, #0
 80013b6:	4011      	ands	r1, r2
 80013b8:	2904      	cmp	r1, #4
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x406>
 80013bc:	e0cb      	b.n	8001556 <__aeabi_ddiv+0x59e>
 80013be:	1d11      	adds	r1, r2, #4
 80013c0:	4291      	cmp	r1, r2
 80013c2:	4192      	sbcs	r2, r2
 80013c4:	4252      	negs	r2, r2
 80013c6:	189b      	adds	r3, r3, r2
 80013c8:	000a      	movs	r2, r1
 80013ca:	0219      	lsls	r1, r3, #8
 80013cc:	d400      	bmi.n	80013d0 <__aeabi_ddiv+0x418>
 80013ce:	e0c2      	b.n	8001556 <__aeabi_ddiv+0x59e>
 80013d0:	2301      	movs	r3, #1
 80013d2:	2400      	movs	r4, #0
 80013d4:	2500      	movs	r5, #0
 80013d6:	e646      	b.n	8001066 <__aeabi_ddiv+0xae>
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	4641      	mov	r1, r8
 80013dc:	031b      	lsls	r3, r3, #12
 80013de:	4219      	tst	r1, r3
 80013e0:	d008      	beq.n	80013f4 <__aeabi_ddiv+0x43c>
 80013e2:	421c      	tst	r4, r3
 80013e4:	d106      	bne.n	80013f4 <__aeabi_ddiv+0x43c>
 80013e6:	431c      	orrs	r4, r3
 80013e8:	0324      	lsls	r4, r4, #12
 80013ea:	46ba      	mov	sl, r7
 80013ec:	0015      	movs	r5, r2
 80013ee:	4b69      	ldr	r3, [pc, #420]	; (8001594 <__aeabi_ddiv+0x5dc>)
 80013f0:	0b24      	lsrs	r4, r4, #12
 80013f2:	e638      	b.n	8001066 <__aeabi_ddiv+0xae>
 80013f4:	2480      	movs	r4, #128	; 0x80
 80013f6:	4643      	mov	r3, r8
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	431c      	orrs	r4, r3
 80013fc:	0324      	lsls	r4, r4, #12
 80013fe:	46b2      	mov	sl, r6
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <__aeabi_ddiv+0x5dc>)
 8001402:	0b24      	lsrs	r4, r4, #12
 8001404:	e62f      	b.n	8001066 <__aeabi_ddiv+0xae>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x454>
 800140a:	e703      	b.n	8001214 <__aeabi_ddiv+0x25c>
 800140c:	19a6      	adds	r6, r4, r6
 800140e:	1e68      	subs	r0, r5, #1
 8001410:	42a6      	cmp	r6, r4
 8001412:	d200      	bcs.n	8001416 <__aeabi_ddiv+0x45e>
 8001414:	e08d      	b.n	8001532 <__aeabi_ddiv+0x57a>
 8001416:	428e      	cmp	r6, r1
 8001418:	d200      	bcs.n	800141c <__aeabi_ddiv+0x464>
 800141a:	e0a3      	b.n	8001564 <__aeabi_ddiv+0x5ac>
 800141c:	d100      	bne.n	8001420 <__aeabi_ddiv+0x468>
 800141e:	e0b3      	b.n	8001588 <__aeabi_ddiv+0x5d0>
 8001420:	0005      	movs	r5, r0
 8001422:	e6f5      	b.n	8001210 <__aeabi_ddiv+0x258>
 8001424:	42aa      	cmp	r2, r5
 8001426:	d900      	bls.n	800142a <__aeabi_ddiv+0x472>
 8001428:	e639      	b.n	800109e <__aeabi_ddiv+0xe6>
 800142a:	4643      	mov	r3, r8
 800142c:	07de      	lsls	r6, r3, #31
 800142e:	0858      	lsrs	r0, r3, #1
 8001430:	086b      	lsrs	r3, r5, #1
 8001432:	431e      	orrs	r6, r3
 8001434:	07ed      	lsls	r5, r5, #31
 8001436:	e639      	b.n	80010ac <__aeabi_ddiv+0xf4>
 8001438:	4648      	mov	r0, r9
 800143a:	f000 f96b 	bl	8001714 <__clzsi2>
 800143e:	0001      	movs	r1, r0
 8001440:	0002      	movs	r2, r0
 8001442:	3115      	adds	r1, #21
 8001444:	3220      	adds	r2, #32
 8001446:	291c      	cmp	r1, #28
 8001448:	dc00      	bgt.n	800144c <__aeabi_ddiv+0x494>
 800144a:	e72c      	b.n	80012a6 <__aeabi_ddiv+0x2ee>
 800144c:	464b      	mov	r3, r9
 800144e:	3808      	subs	r0, #8
 8001450:	4083      	lsls	r3, r0
 8001452:	2500      	movs	r5, #0
 8001454:	4698      	mov	r8, r3
 8001456:	e732      	b.n	80012be <__aeabi_ddiv+0x306>
 8001458:	f000 f95c 	bl	8001714 <__clzsi2>
 800145c:	0003      	movs	r3, r0
 800145e:	001a      	movs	r2, r3
 8001460:	3215      	adds	r2, #21
 8001462:	3020      	adds	r0, #32
 8001464:	2a1c      	cmp	r2, #28
 8001466:	dc00      	bgt.n	800146a <__aeabi_ddiv+0x4b2>
 8001468:	e700      	b.n	800126c <__aeabi_ddiv+0x2b4>
 800146a:	4654      	mov	r4, sl
 800146c:	3b08      	subs	r3, #8
 800146e:	2200      	movs	r2, #0
 8001470:	409c      	lsls	r4, r3
 8001472:	e705      	b.n	8001280 <__aeabi_ddiv+0x2c8>
 8001474:	1936      	adds	r6, r6, r4
 8001476:	3b01      	subs	r3, #1
 8001478:	42b4      	cmp	r4, r6
 800147a:	d900      	bls.n	800147e <__aeabi_ddiv+0x4c6>
 800147c:	e6a6      	b.n	80011cc <__aeabi_ddiv+0x214>
 800147e:	42b2      	cmp	r2, r6
 8001480:	d800      	bhi.n	8001484 <__aeabi_ddiv+0x4cc>
 8001482:	e6a3      	b.n	80011cc <__aeabi_ddiv+0x214>
 8001484:	1e83      	subs	r3, r0, #2
 8001486:	1936      	adds	r6, r6, r4
 8001488:	e6a0      	b.n	80011cc <__aeabi_ddiv+0x214>
 800148a:	1909      	adds	r1, r1, r4
 800148c:	3d01      	subs	r5, #1
 800148e:	428c      	cmp	r4, r1
 8001490:	d900      	bls.n	8001494 <__aeabi_ddiv+0x4dc>
 8001492:	e68d      	b.n	80011b0 <__aeabi_ddiv+0x1f8>
 8001494:	428a      	cmp	r2, r1
 8001496:	d800      	bhi.n	800149a <__aeabi_ddiv+0x4e2>
 8001498:	e68a      	b.n	80011b0 <__aeabi_ddiv+0x1f8>
 800149a:	1e85      	subs	r5, r0, #2
 800149c:	1909      	adds	r1, r1, r4
 800149e:	e687      	b.n	80011b0 <__aeabi_ddiv+0x1f8>
 80014a0:	230f      	movs	r3, #15
 80014a2:	402b      	ands	r3, r5
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d100      	bne.n	80014aa <__aeabi_ddiv+0x4f2>
 80014a8:	e6bc      	b.n	8001224 <__aeabi_ddiv+0x26c>
 80014aa:	2305      	movs	r3, #5
 80014ac:	425b      	negs	r3, r3
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	419b      	sbcs	r3, r3
 80014b2:	3504      	adds	r5, #4
 80014b4:	425b      	negs	r3, r3
 80014b6:	08ed      	lsrs	r5, r5, #3
 80014b8:	4498      	add	r8, r3
 80014ba:	e6b4      	b.n	8001226 <__aeabi_ddiv+0x26e>
 80014bc:	42af      	cmp	r7, r5
 80014be:	d900      	bls.n	80014c2 <__aeabi_ddiv+0x50a>
 80014c0:	e660      	b.n	8001184 <__aeabi_ddiv+0x1cc>
 80014c2:	4282      	cmp	r2, r0
 80014c4:	d804      	bhi.n	80014d0 <__aeabi_ddiv+0x518>
 80014c6:	d000      	beq.n	80014ca <__aeabi_ddiv+0x512>
 80014c8:	e65c      	b.n	8001184 <__aeabi_ddiv+0x1cc>
 80014ca:	42ae      	cmp	r6, r5
 80014cc:	d800      	bhi.n	80014d0 <__aeabi_ddiv+0x518>
 80014ce:	e659      	b.n	8001184 <__aeabi_ddiv+0x1cc>
 80014d0:	2302      	movs	r3, #2
 80014d2:	425b      	negs	r3, r3
 80014d4:	469c      	mov	ip, r3
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	44e0      	add	r8, ip
 80014da:	469c      	mov	ip, r3
 80014dc:	4465      	add	r5, ip
 80014de:	429d      	cmp	r5, r3
 80014e0:	419b      	sbcs	r3, r3
 80014e2:	425b      	negs	r3, r3
 80014e4:	191b      	adds	r3, r3, r4
 80014e6:	18c0      	adds	r0, r0, r3
 80014e8:	e64d      	b.n	8001186 <__aeabi_ddiv+0x1ce>
 80014ea:	428a      	cmp	r2, r1
 80014ec:	d800      	bhi.n	80014f0 <__aeabi_ddiv+0x538>
 80014ee:	e60e      	b.n	800110e <__aeabi_ddiv+0x156>
 80014f0:	1e83      	subs	r3, r0, #2
 80014f2:	1909      	adds	r1, r1, r4
 80014f4:	e60b      	b.n	800110e <__aeabi_ddiv+0x156>
 80014f6:	428a      	cmp	r2, r1
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x544>
 80014fa:	e5f4      	b.n	80010e6 <__aeabi_ddiv+0x12e>
 80014fc:	1e83      	subs	r3, r0, #2
 80014fe:	4698      	mov	r8, r3
 8001500:	1909      	adds	r1, r1, r4
 8001502:	e5f0      	b.n	80010e6 <__aeabi_ddiv+0x12e>
 8001504:	4925      	ldr	r1, [pc, #148]	; (800159c <__aeabi_ddiv+0x5e4>)
 8001506:	0028      	movs	r0, r5
 8001508:	4459      	add	r1, fp
 800150a:	408d      	lsls	r5, r1
 800150c:	4642      	mov	r2, r8
 800150e:	408a      	lsls	r2, r1
 8001510:	1e69      	subs	r1, r5, #1
 8001512:	418d      	sbcs	r5, r1
 8001514:	4641      	mov	r1, r8
 8001516:	40d8      	lsrs	r0, r3
 8001518:	40d9      	lsrs	r1, r3
 800151a:	4302      	orrs	r2, r0
 800151c:	432a      	orrs	r2, r5
 800151e:	000b      	movs	r3, r1
 8001520:	0751      	lsls	r1, r2, #29
 8001522:	d100      	bne.n	8001526 <__aeabi_ddiv+0x56e>
 8001524:	e751      	b.n	80013ca <__aeabi_ddiv+0x412>
 8001526:	210f      	movs	r1, #15
 8001528:	4011      	ands	r1, r2
 800152a:	2904      	cmp	r1, #4
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x578>
 800152e:	e746      	b.n	80013be <__aeabi_ddiv+0x406>
 8001530:	e74b      	b.n	80013ca <__aeabi_ddiv+0x412>
 8001532:	0005      	movs	r5, r0
 8001534:	428e      	cmp	r6, r1
 8001536:	d000      	beq.n	800153a <__aeabi_ddiv+0x582>
 8001538:	e66a      	b.n	8001210 <__aeabi_ddiv+0x258>
 800153a:	9a00      	ldr	r2, [sp, #0]
 800153c:	4293      	cmp	r3, r2
 800153e:	d000      	beq.n	8001542 <__aeabi_ddiv+0x58a>
 8001540:	e666      	b.n	8001210 <__aeabi_ddiv+0x258>
 8001542:	e667      	b.n	8001214 <__aeabi_ddiv+0x25c>
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <__aeabi_ddiv+0x5e8>)
 8001546:	445a      	add	r2, fp
 8001548:	2a00      	cmp	r2, #0
 800154a:	dc00      	bgt.n	800154e <__aeabi_ddiv+0x596>
 800154c:	e710      	b.n	8001370 <__aeabi_ddiv+0x3b8>
 800154e:	2301      	movs	r3, #1
 8001550:	2500      	movs	r5, #0
 8001552:	4498      	add	r8, r3
 8001554:	e667      	b.n	8001226 <__aeabi_ddiv+0x26e>
 8001556:	075d      	lsls	r5, r3, #29
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	0b1c      	lsrs	r4, r3, #12
 800155c:	08d2      	lsrs	r2, r2, #3
 800155e:	2300      	movs	r3, #0
 8001560:	4315      	orrs	r5, r2
 8001562:	e580      	b.n	8001066 <__aeabi_ddiv+0xae>
 8001564:	9800      	ldr	r0, [sp, #0]
 8001566:	3d02      	subs	r5, #2
 8001568:	0042      	lsls	r2, r0, #1
 800156a:	4282      	cmp	r2, r0
 800156c:	41bf      	sbcs	r7, r7
 800156e:	427f      	negs	r7, r7
 8001570:	193c      	adds	r4, r7, r4
 8001572:	1936      	adds	r6, r6, r4
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	e7dd      	b.n	8001534 <__aeabi_ddiv+0x57c>
 8001578:	2480      	movs	r4, #128	; 0x80
 800157a:	4643      	mov	r3, r8
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	431c      	orrs	r4, r3
 8001580:	0324      	lsls	r4, r4, #12
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__aeabi_ddiv+0x5dc>)
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	e56e      	b.n	8001066 <__aeabi_ddiv+0xae>
 8001588:	9a00      	ldr	r2, [sp, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3ea      	bcc.n	8001564 <__aeabi_ddiv+0x5ac>
 800158e:	0005      	movs	r5, r0
 8001590:	e7d3      	b.n	800153a <__aeabi_ddiv+0x582>
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	000007ff 	.word	0x000007ff
 8001598:	0000043e 	.word	0x0000043e
 800159c:	0000041e 	.word	0x0000041e
 80015a0:	000003ff 	.word	0x000003ff

080015a4 <__aeabi_i2d>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d016      	beq.n	80015d8 <__aeabi_i2d+0x34>
 80015aa:	17c3      	asrs	r3, r0, #31
 80015ac:	18c5      	adds	r5, r0, r3
 80015ae:	405d      	eors	r5, r3
 80015b0:	0fc4      	lsrs	r4, r0, #31
 80015b2:	0028      	movs	r0, r5
 80015b4:	f000 f8ae 	bl	8001714 <__clzsi2>
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <__aeabi_i2d+0x5c>)
 80015ba:	1a12      	subs	r2, r2, r0
 80015bc:	280a      	cmp	r0, #10
 80015be:	dc16      	bgt.n	80015ee <__aeabi_i2d+0x4a>
 80015c0:	0003      	movs	r3, r0
 80015c2:	002e      	movs	r6, r5
 80015c4:	3315      	adds	r3, #21
 80015c6:	409e      	lsls	r6, r3
 80015c8:	230b      	movs	r3, #11
 80015ca:	1a18      	subs	r0, r3, r0
 80015cc:	40c5      	lsrs	r5, r0
 80015ce:	0552      	lsls	r2, r2, #21
 80015d0:	032d      	lsls	r5, r5, #12
 80015d2:	0b2d      	lsrs	r5, r5, #12
 80015d4:	0d53      	lsrs	r3, r2, #21
 80015d6:	e003      	b.n	80015e0 <__aeabi_i2d+0x3c>
 80015d8:	2400      	movs	r4, #0
 80015da:	2300      	movs	r3, #0
 80015dc:	2500      	movs	r5, #0
 80015de:	2600      	movs	r6, #0
 80015e0:	051b      	lsls	r3, r3, #20
 80015e2:	432b      	orrs	r3, r5
 80015e4:	07e4      	lsls	r4, r4, #31
 80015e6:	4323      	orrs	r3, r4
 80015e8:	0030      	movs	r0, r6
 80015ea:	0019      	movs	r1, r3
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	380b      	subs	r0, #11
 80015f0:	4085      	lsls	r5, r0
 80015f2:	0552      	lsls	r2, r2, #21
 80015f4:	032d      	lsls	r5, r5, #12
 80015f6:	2600      	movs	r6, #0
 80015f8:	0b2d      	lsrs	r5, r5, #12
 80015fa:	0d53      	lsrs	r3, r2, #21
 80015fc:	e7f0      	b.n	80015e0 <__aeabi_i2d+0x3c>
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	0000041e 	.word	0x0000041e

08001604 <__aeabi_d2f>:
 8001604:	0002      	movs	r2, r0
 8001606:	004b      	lsls	r3, r1, #1
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160a:	0d5b      	lsrs	r3, r3, #21
 800160c:	030c      	lsls	r4, r1, #12
 800160e:	4e3d      	ldr	r6, [pc, #244]	; (8001704 <__aeabi_d2f+0x100>)
 8001610:	0a64      	lsrs	r4, r4, #9
 8001612:	0f40      	lsrs	r0, r0, #29
 8001614:	1c5f      	adds	r7, r3, #1
 8001616:	0fc9      	lsrs	r1, r1, #31
 8001618:	4304      	orrs	r4, r0
 800161a:	00d5      	lsls	r5, r2, #3
 800161c:	4237      	tst	r7, r6
 800161e:	d00a      	beq.n	8001636 <__aeabi_d2f+0x32>
 8001620:	4839      	ldr	r0, [pc, #228]	; (8001708 <__aeabi_d2f+0x104>)
 8001622:	181e      	adds	r6, r3, r0
 8001624:	2efe      	cmp	r6, #254	; 0xfe
 8001626:	dd16      	ble.n	8001656 <__aeabi_d2f+0x52>
 8001628:	20ff      	movs	r0, #255	; 0xff
 800162a:	2400      	movs	r4, #0
 800162c:	05c0      	lsls	r0, r0, #23
 800162e:	4320      	orrs	r0, r4
 8001630:	07c9      	lsls	r1, r1, #31
 8001632:	4308      	orrs	r0, r1
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <__aeabi_d2f+0x44>
 800163a:	432c      	orrs	r4, r5
 800163c:	d026      	beq.n	800168c <__aeabi_d2f+0x88>
 800163e:	2205      	movs	r2, #5
 8001640:	0192      	lsls	r2, r2, #6
 8001642:	0a54      	lsrs	r4, r2, #9
 8001644:	b2d8      	uxtb	r0, r3
 8001646:	e7f1      	b.n	800162c <__aeabi_d2f+0x28>
 8001648:	4325      	orrs	r5, r4
 800164a:	d0ed      	beq.n	8001628 <__aeabi_d2f+0x24>
 800164c:	2080      	movs	r0, #128	; 0x80
 800164e:	03c0      	lsls	r0, r0, #15
 8001650:	4304      	orrs	r4, r0
 8001652:	20ff      	movs	r0, #255	; 0xff
 8001654:	e7ea      	b.n	800162c <__aeabi_d2f+0x28>
 8001656:	2e00      	cmp	r6, #0
 8001658:	dd1b      	ble.n	8001692 <__aeabi_d2f+0x8e>
 800165a:	0192      	lsls	r2, r2, #6
 800165c:	1e53      	subs	r3, r2, #1
 800165e:	419a      	sbcs	r2, r3
 8001660:	00e4      	lsls	r4, r4, #3
 8001662:	0f6d      	lsrs	r5, r5, #29
 8001664:	4322      	orrs	r2, r4
 8001666:	432a      	orrs	r2, r5
 8001668:	0753      	lsls	r3, r2, #29
 800166a:	d048      	beq.n	80016fe <__aeabi_d2f+0xfa>
 800166c:	230f      	movs	r3, #15
 800166e:	4013      	ands	r3, r2
 8001670:	2b04      	cmp	r3, #4
 8001672:	d000      	beq.n	8001676 <__aeabi_d2f+0x72>
 8001674:	3204      	adds	r2, #4
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	04db      	lsls	r3, r3, #19
 800167a:	4013      	ands	r3, r2
 800167c:	d03f      	beq.n	80016fe <__aeabi_d2f+0xfa>
 800167e:	1c70      	adds	r0, r6, #1
 8001680:	2efe      	cmp	r6, #254	; 0xfe
 8001682:	d0d1      	beq.n	8001628 <__aeabi_d2f+0x24>
 8001684:	0192      	lsls	r2, r2, #6
 8001686:	0a54      	lsrs	r4, r2, #9
 8001688:	b2c0      	uxtb	r0, r0
 800168a:	e7cf      	b.n	800162c <__aeabi_d2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	e7cc      	b.n	800162c <__aeabi_d2f+0x28>
 8001692:	0032      	movs	r2, r6
 8001694:	3217      	adds	r2, #23
 8001696:	db22      	blt.n	80016de <__aeabi_d2f+0xda>
 8001698:	2080      	movs	r0, #128	; 0x80
 800169a:	0400      	lsls	r0, r0, #16
 800169c:	4320      	orrs	r0, r4
 800169e:	241e      	movs	r4, #30
 80016a0:	1ba4      	subs	r4, r4, r6
 80016a2:	2c1f      	cmp	r4, #31
 80016a4:	dd1d      	ble.n	80016e2 <__aeabi_d2f+0xde>
 80016a6:	2202      	movs	r2, #2
 80016a8:	4252      	negs	r2, r2
 80016aa:	1b96      	subs	r6, r2, r6
 80016ac:	0002      	movs	r2, r0
 80016ae:	40f2      	lsrs	r2, r6
 80016b0:	0016      	movs	r6, r2
 80016b2:	2c20      	cmp	r4, #32
 80016b4:	d004      	beq.n	80016c0 <__aeabi_d2f+0xbc>
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <__aeabi_d2f+0x108>)
 80016b8:	4694      	mov	ip, r2
 80016ba:	4463      	add	r3, ip
 80016bc:	4098      	lsls	r0, r3
 80016be:	4305      	orrs	r5, r0
 80016c0:	002a      	movs	r2, r5
 80016c2:	1e53      	subs	r3, r2, #1
 80016c4:	419a      	sbcs	r2, r3
 80016c6:	4332      	orrs	r2, r6
 80016c8:	2600      	movs	r6, #0
 80016ca:	0753      	lsls	r3, r2, #29
 80016cc:	d1ce      	bne.n	800166c <__aeabi_d2f+0x68>
 80016ce:	2480      	movs	r4, #128	; 0x80
 80016d0:	0013      	movs	r3, r2
 80016d2:	04e4      	lsls	r4, r4, #19
 80016d4:	2001      	movs	r0, #1
 80016d6:	4023      	ands	r3, r4
 80016d8:	4222      	tst	r2, r4
 80016da:	d1d3      	bne.n	8001684 <__aeabi_d2f+0x80>
 80016dc:	e7b0      	b.n	8001640 <__aeabi_d2f+0x3c>
 80016de:	2300      	movs	r3, #0
 80016e0:	e7ad      	b.n	800163e <__aeabi_d2f+0x3a>
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <__aeabi_d2f+0x10c>)
 80016e4:	4694      	mov	ip, r2
 80016e6:	002a      	movs	r2, r5
 80016e8:	40e2      	lsrs	r2, r4
 80016ea:	0014      	movs	r4, r2
 80016ec:	002a      	movs	r2, r5
 80016ee:	4463      	add	r3, ip
 80016f0:	409a      	lsls	r2, r3
 80016f2:	4098      	lsls	r0, r3
 80016f4:	1e55      	subs	r5, r2, #1
 80016f6:	41aa      	sbcs	r2, r5
 80016f8:	4302      	orrs	r2, r0
 80016fa:	4322      	orrs	r2, r4
 80016fc:	e7e4      	b.n	80016c8 <__aeabi_d2f+0xc4>
 80016fe:	0033      	movs	r3, r6
 8001700:	e79e      	b.n	8001640 <__aeabi_d2f+0x3c>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	000007fe 	.word	0x000007fe
 8001708:	fffffc80 	.word	0xfffffc80
 800170c:	fffffca2 	.word	0xfffffca2
 8001710:	fffffc82 	.word	0xfffffc82

08001714 <__clzsi2>:
 8001714:	211c      	movs	r1, #28
 8001716:	2301      	movs	r3, #1
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	4298      	cmp	r0, r3
 800171c:	d301      	bcc.n	8001722 <__clzsi2+0xe>
 800171e:	0c00      	lsrs	r0, r0, #16
 8001720:	3910      	subs	r1, #16
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	4298      	cmp	r0, r3
 8001726:	d301      	bcc.n	800172c <__clzsi2+0x18>
 8001728:	0a00      	lsrs	r0, r0, #8
 800172a:	3908      	subs	r1, #8
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	4298      	cmp	r0, r3
 8001730:	d301      	bcc.n	8001736 <__clzsi2+0x22>
 8001732:	0900      	lsrs	r0, r0, #4
 8001734:	3904      	subs	r1, #4
 8001736:	a202      	add	r2, pc, #8	; (adr r2, 8001740 <__clzsi2+0x2c>)
 8001738:	5c10      	ldrb	r0, [r2, r0]
 800173a:	1840      	adds	r0, r0, r1
 800173c:	4770      	bx	lr
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	02020304 	.word	0x02020304
 8001744:	01010101 	.word	0x01010101
	...

08001750 <__clzdi2>:
 8001750:	b510      	push	{r4, lr}
 8001752:	2900      	cmp	r1, #0
 8001754:	d103      	bne.n	800175e <__clzdi2+0xe>
 8001756:	f7ff ffdd 	bl	8001714 <__clzsi2>
 800175a:	3020      	adds	r0, #32
 800175c:	e002      	b.n	8001764 <__clzdi2+0x14>
 800175e:	0008      	movs	r0, r1
 8001760:	f7ff ffd8 	bl	8001714 <__clzsi2>
 8001764:	bd10      	pop	{r4, pc}
 8001766:	46c0      	nop			; (mov r8, r8)

08001768 <enable_drv8876>:

motor_handle motor = { .run_time = 4000, .direction = false, .pwm_duty_cycle = .9, .pwm_period = 1}; //1ms =999tick
motor_cmd_code motor_code = NONE;

void enable_drv8876(GPIO_PinState state)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	0002      	movs	r2, r0
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, state);
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	23a0      	movs	r3, #160	; 0xa0
 800177a:	05db      	lsls	r3, r3, #23
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	0018      	movs	r0, r3
 8001780:	f001 fa72 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}

0800178c <set_motor_direction>:

void set_motor_direction(GPIO_PinState state)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	0002      	movs	r2, r0
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, state);
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	05db      	lsls	r3, r3, #23
 80017a0:	2120      	movs	r1, #32
 80017a2:	0018      	movs	r0, r3
 80017a4:	f001 fa60 	bl	8002c68 <HAL_GPIO_WritePin>
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <run_motor>:

void run_motor()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	enable_drv8876(SET);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff ffd7 	bl	8001768 <enable_drv8876>
	set_motor_direction(motor.direction);
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <run_motor+0x5c>)
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	0018      	movs	r0, r3
 80017c0:	f7ff ffe4 	bl	800178c <set_motor_direction>
	pwm_set_period(&TIM_PWM_DRV8876, motor.pwm_period);
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <run_motor+0x5c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fb65 	bl	8000e98 <__aeabi_i2f>
 80017ce:	1c02      	adds	r2, r0, #0
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <run_motor+0x60>)
 80017d2:	1c11      	adds	r1, r2, #0
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 f9bb 	bl	8001b50 <pwm_set_period>
	pwm_set_duty_cicle(&TIM_PWM_DRV8876, TIM_CHANNEL_1, motor.pwm_duty_cycle);
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <run_motor+0x5c>)
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <run_motor+0x60>)
 80017e0:	2100      	movs	r1, #0
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 f9fe 	bl	8001be4 <pwm_set_duty_cicle>
	pwm_start_channel(&TIM_PWM_DRV8876, TIM_CHANNEL_1);
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <run_motor+0x60>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fa6d 	bl	8001ccc <pwm_start_channel>
	HAL_Delay(motor.run_time);
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <run_motor+0x5c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 ff3e 	bl	8002678 <HAL_Delay>
	pwm_stop_channel(&TIM_PWM_DRV8876, TIM_CHANNEL_1);
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <run_motor+0x60>)
 80017fe:	2100      	movs	r1, #0
 8001800:	0018      	movs	r0, r3
 8001802:	f000 fa72 	bl	8001cea <pwm_stop_channel>
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	200000bc 	.word	0x200000bc

08001814 <parse_and_execute_cmd>:


void parse_and_execute_cmd(char *cmd_received)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	motor_code = NONE;
 800181c:	4bac      	ldr	r3, [pc, #688]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]

	/* Get command arguments */
	const char delim[2] = " ";
 8001822:	2114      	movs	r1, #20
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2220      	movs	r2, #32
 8001828:	801a      	strh	r2, [r3, #0]
	//char *token;
	char *arg[CMD_N_ARGS_MAX]; //TODO lunghezza dinamica per possibili comandi futuri
	uint8_t args_index = 0;
 800182a:	201f      	movs	r0, #31
 800182c:	183b      	adds	r3, r7, r0
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]

	arg[args_index] = strtok(cmd_received, delim); // get the first token (argument)
 8001832:	183b      	adds	r3, r7, r0
 8001834:	781c      	ldrb	r4, [r3, #0]
 8001836:	187a      	adds	r2, r7, r1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f004 fc5d 	bl	80060fc <strtok>
 8001842:	0001      	movs	r1, r0
 8001844:	2308      	movs	r3, #8
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	00a2      	lsls	r2, r4, #2
 800184a:	50d1      	str	r1, [r2, r3]

	while( arg[args_index] != NULL )
 800184c:	e012      	b.n	8001874 <parse_and_execute_cmd+0x60>
	{ // walk through other tokens
		//printf( "%s\n", arg[args_index] );
		args_index++;
 800184e:	211f      	movs	r1, #31
 8001850:	187b      	adds	r3, r7, r1
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	187b      	adds	r3, r7, r1
 8001856:	3201      	adds	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
		arg[args_index] = strtok(NULL, delim);
 800185a:	187b      	adds	r3, r7, r1
 800185c:	781c      	ldrb	r4, [r3, #0]
 800185e:	2314      	movs	r3, #20
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	0019      	movs	r1, r3
 8001864:	2000      	movs	r0, #0
 8001866:	f004 fc49 	bl	80060fc <strtok>
 800186a:	0001      	movs	r1, r0
 800186c:	2308      	movs	r3, #8
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	00a2      	lsls	r2, r4, #2
 8001872:	50d1      	str	r1, [r2, r3]
	while( arg[args_index] != NULL )
 8001874:	231f      	movs	r3, #31
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	2408      	movs	r4, #8
 800187c:	193b      	adds	r3, r7, r4
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	58d3      	ldr	r3, [r2, r3]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1e3      	bne.n	800184e <parse_and_execute_cmd+0x3a>
	}

	if (strcmp(arg[0], "ok") == 0 || strcmp(arg[0], "ok\r") == 0) //TODO use strstr()
 8001886:	193b      	adds	r3, r7, r4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <parse_and_execute_cmd+0x2c0>)
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f7fe fc3a 	bl	8000108 <strcmp>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d008      	beq.n	80018aa <parse_and_execute_cmd+0x96>
 8001898:	193b      	adds	r3, r7, r4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a8e      	ldr	r2, [pc, #568]	; (8001ad8 <parse_and_execute_cmd+0x2c4>)
 800189e:	0011      	movs	r1, r2
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7fe fc31 	bl	8000108 <strcmp>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d103      	bne.n	80018b2 <parse_and_execute_cmd+0x9e>
	{
		motor_code = RUN;
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 80018ac:	2206      	movs	r2, #6
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e10a      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
	}
	else if (strcmp(arg[0], "time") == 0 && strcmp(arg[1], "") != 0)
 80018b2:	2408      	movs	r4, #8
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a88      	ldr	r2, [pc, #544]	; (8001adc <parse_and_execute_cmd+0x2c8>)
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f7fe fc23 	bl	8000108 <strcmp>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d111      	bne.n	80018ea <parse_and_execute_cmd+0xd6>
 80018c6:	0021      	movs	r1, r4
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <parse_and_execute_cmd+0xd6>
	{
		motor_code = SET_TIME;
 80018d2:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
		motor.run_time = atoi(arg[1]);
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	0018      	movs	r0, r3
 80018de:	f004 fb3f 	bl	8005f60 <atoi>
 80018e2:	0002      	movs	r2, r0
 80018e4:	4b7e      	ldr	r3, [pc, #504]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e0ee      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
	}
	else if (strcmp(arg[0], "dir") == 0 && strcmp(arg[1], "") != 0)
 80018ea:	2408      	movs	r4, #8
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7c      	ldr	r2, [pc, #496]	; (8001ae4 <parse_and_execute_cmd+0x2d0>)
 80018f2:	0011      	movs	r1, r2
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fc07 	bl	8000108 <strcmp>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d110      	bne.n	8001920 <parse_and_execute_cmd+0x10c>
 80018fe:	0021      	movs	r1, r4
 8001900:	187b      	adds	r3, r7, r1
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <parse_and_execute_cmd+0x10c>
	{
		motor_code = SET_DIR;
 800190a:	4b71      	ldr	r3, [pc, #452]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 800190c:	2202      	movs	r2, #2
 800190e:	701a      	strb	r2, [r3, #0]
		motor.direction = arg[1]; //TODO: code fw and bw as 0 and 1 stringstream
 8001910:	187b      	adds	r3, r7, r1
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	4193      	sbcs	r3, r2
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 800191c:	711a      	strb	r2, [r3, #4]
 800191e:	e0d3      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
	}
	else if (strcmp(arg[0], "pwm") == 0)
 8001920:	2408      	movs	r4, #8
 8001922:	193b      	adds	r3, r7, r4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a70      	ldr	r2, [pc, #448]	; (8001ae8 <parse_and_execute_cmd+0x2d4>)
 8001928:	0011      	movs	r1, r2
 800192a:	0018      	movs	r0, r3
 800192c:	f7fe fbec 	bl	8000108 <strcmp>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d133      	bne.n	800199c <parse_and_execute_cmd+0x188>
	{
		if (strcmp(arg[1], "") != 0)
 8001934:	0021      	movs	r1, r4
 8001936:	187b      	adds	r3, r7, r1
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01a      	beq.n	8001976 <parse_and_execute_cmd+0x162>
		{
			motor_code = SET_PWM_DC;
 8001940:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 8001942:	2203      	movs	r2, #3
 8001944:	701a      	strb	r2, [r3, #0]
			float dc = atoi(arg[1])/100.0;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f004 fb08 	bl	8005f60 <atoi>
 8001950:	0003      	movs	r3, r0
 8001952:	0018      	movs	r0, r3
 8001954:	f7ff fe26 	bl	80015a4 <__aeabi_i2d>
 8001958:	2200      	movs	r2, #0
 800195a:	4b64      	ldr	r3, [pc, #400]	; (8001aec <parse_and_execute_cmd+0x2d8>)
 800195c:	f7ff fb2c 	bl	8000fb8 <__aeabi_ddiv>
 8001960:	0002      	movs	r2, r0
 8001962:	000b      	movs	r3, r1
 8001964:	0010      	movs	r0, r2
 8001966:	0019      	movs	r1, r3
 8001968:	f7ff fe4c 	bl	8001604 <__aeabi_d2f>
 800196c:	1c03      	adds	r3, r0, #0
 800196e:	61bb      	str	r3, [r7, #24]
			motor.pwm_duty_cycle = dc;
 8001970:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]
		}
		if (strcmp(arg[2], "") != 0)
 8001976:	2108      	movs	r1, #8
 8001978:	187b      	adds	r3, r7, r1
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d100      	bne.n	8001984 <parse_and_execute_cmd+0x170>
 8001982:	e0a1      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
		{
			motor_code = SET_PWM_PERIOD;
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 8001986:	2204      	movs	r2, #4
 8001988:	701a      	strb	r2, [r3, #0]
			motor.pwm_period = atoi(arg[2]);
 800198a:	187b      	adds	r3, r7, r1
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0018      	movs	r0, r3
 8001990:	f004 fae6 	bl	8005f60 <atoi>
 8001994:	0002      	movs	r2, r0
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 8001998:	60da      	str	r2, [r3, #12]
	}
	else
	{
		printf("\r\nError: invalid command\r\n\n");
	}
}
 800199a:	e095      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
	else if (strcmp(arg[0], "show") == 0 || strcmp(arg[0], "show\r") == 0)
 800199c:	2408      	movs	r4, #8
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <parse_and_execute_cmd+0x2dc>)
 80019a4:	0011      	movs	r1, r2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7fe fbae 	bl	8000108 <strcmp>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d008      	beq.n	80019c2 <parse_and_execute_cmd+0x1ae>
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <parse_and_execute_cmd+0x2e0>)
 80019b6:	0011      	movs	r1, r2
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7fe fba5 	bl	8000108 <strcmp>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d132      	bne.n	8001a28 <parse_and_execute_cmd+0x214>
		motor_code = GET_PARAM;
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 80019c4:	2205      	movs	r2, #5
 80019c6:	701a      	strb	r2, [r3, #0]
		printf("\n\nCurrent parameters:\n\r");
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <parse_and_execute_cmd+0x2e4>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f004 fb00 	bl	8005fd0 <iprintf>
		printf("run_time:\t %d\tms\r\n", motor.run_time);
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b49      	ldr	r3, [pc, #292]	; (8001afc <parse_and_execute_cmd+0x2e8>)
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f004 faf9 	bl	8005fd0 <iprintf>
		printf("direction:\t %d\t0=fw 1=bw\n\r", motor.direction);
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	001a      	movs	r2, r3
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <parse_and_execute_cmd+0x2ec>)
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f004 faf1 	bl	8005fd0 <iprintf>
		uint8_t dc = motor.pwm_duty_cycle*100;
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4944      	ldr	r1, [pc, #272]	; (8001b04 <parse_and_execute_cmd+0x2f0>)
 80019f4:	1c18      	adds	r0, r3, #0
 80019f6:	f7fe ff5b 	bl	80008b0 <__aeabi_fmul>
 80019fa:	1c03      	adds	r3, r0, #0
 80019fc:	251e      	movs	r5, #30
 80019fe:	197c      	adds	r4, r7, r5
 8001a00:	1c18      	adds	r0, r3, #0
 8001a02:	f7fe fca9 	bl	8000358 <__aeabi_f2uiz>
 8001a06:	0003      	movs	r3, r0
 8001a08:	7023      	strb	r3, [r4, #0]
		printf("pwm_duty_cycle:\t %d\t%%\n\r", dc);
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <parse_and_execute_cmd+0x2f4>)
 8001a10:	0011      	movs	r1, r2
 8001a12:	0018      	movs	r0, r3
 8001a14:	f004 fadc 	bl	8005fd0 <iprintf>
		printf("pwm_period:\t %d\tms\n\r", motor.pwm_period);
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <parse_and_execute_cmd+0x2cc>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <parse_and_execute_cmd+0x2f8>)
 8001a1e:	0011      	movs	r1, r2
 8001a20:	0018      	movs	r0, r3
 8001a22:	f004 fad5 	bl	8005fd0 <iprintf>
	{
 8001a26:	e04f      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
	else if (strcmp(arg[0], "help") == 0 || strcmp(arg[0], "help\r") == 0)
 8001a28:	2408      	movs	r4, #8
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <parse_and_execute_cmd+0x2fc>)
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7fe fb68 	bl	8000108 <strcmp>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d008      	beq.n	8001a4e <parse_and_execute_cmd+0x23a>
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <parse_and_execute_cmd+0x300>)
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fb5f 	bl	8000108 <strcmp>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d137      	bne.n	8001abe <parse_and_execute_cmd+0x2aa>
		motor_code = HELP;
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <parse_and_execute_cmd+0x2bc>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	701a      	strb	r2, [r3, #0]
		printf("\n\nCommads:\n\r");
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <parse_and_execute_cmd+0x304>)
 8001a56:	0018      	movs	r0, r3
 8001a58:	f004 faba 	bl	8005fd0 <iprintf>
		printf("\nok\n\r");
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <parse_and_execute_cmd+0x308>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f004 fab6 	bl	8005fd0 <iprintf>
		printf("\n\tRun the motor with the last modified settings.\r\n\tIf there isn't any change it keeps the default settings.\r\n");
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <parse_and_execute_cmd+0x30c>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f004 fb3e 	bl	80060e8 <puts>
		printf("\ntime [ms]\n\r");
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <parse_and_execute_cmd+0x310>)
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f004 faae 	bl	8005fd0 <iprintf>
		printf("\n\tSet the time of the running test in ms.\r\n");
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <parse_and_execute_cmd+0x314>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f004 fb36 	bl	80060e8 <puts>
		printf("\ndir [0/1]\n\r");
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <parse_and_execute_cmd+0x318>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f004 faa6 	bl	8005fd0 <iprintf>
		printf("\n\tSet the motor spin direction.\r\n\t0 for forward or 1 for backward.\r\n");
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <parse_and_execute_cmd+0x31c>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f004 fb2e 	bl	80060e8 <puts>
		printf("\npwm [dc%%] [period_ms]\n\r");
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <parse_and_execute_cmd+0x320>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f004 fa9e 	bl	8005fd0 <iprintf>
		printf("\n\tSet the parameter of the pwm signal.\r\n\t[dc%%] : duty-cycle in %%.\r\n\t[period_ms] : time period of the wave in ms.\r\n\tNote that [period_ms] is negligible, e.g. 'pwm 50'+ENTER works!\r\n");
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <parse_and_execute_cmd+0x324>)
 8001a96:	0018      	movs	r0, r3
 8001a98:	f004 fa9a 	bl	8005fd0 <iprintf>
		printf("\nshow\n\r");
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <parse_and_execute_cmd+0x328>)
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f004 fa96 	bl	8005fd0 <iprintf>
		printf("\n\tDisplay the current motor test settings.\r\n");
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <parse_and_execute_cmd+0x32c>)
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f004 fb1e 	bl	80060e8 <puts>
		printf("\nhelp\n\r");
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <parse_and_execute_cmd+0x330>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f004 fa8e 	bl	8005fd0 <iprintf>
		printf("\n\tDisplay the commands manual.\r\n");
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <parse_and_execute_cmd+0x334>)
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f004 fb16 	bl	80060e8 <puts>
 8001abc:	e004      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
		printf("\r\nError: invalid command\r\n\n");
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <parse_and_execute_cmd+0x338>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f004 fb11 	bl	80060e8 <puts>
}
 8001ac6:	e7ff      	b.n	8001ac8 <parse_and_execute_cmd+0x2b4>
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b008      	add	sp, #32
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad0:	2000009c 	.word	0x2000009c
 8001ad4:	080073a0 	.word	0x080073a0
 8001ad8:	080073a4 	.word	0x080073a4
 8001adc:	080073a8 	.word	0x080073a8
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	080073b0 	.word	0x080073b0
 8001ae8:	080073b4 	.word	0x080073b4
 8001aec:	40590000 	.word	0x40590000
 8001af0:	080073b8 	.word	0x080073b8
 8001af4:	080073c0 	.word	0x080073c0
 8001af8:	080073c8 	.word	0x080073c8
 8001afc:	080073e0 	.word	0x080073e0
 8001b00:	080073f4 	.word	0x080073f4
 8001b04:	42c80000 	.word	0x42c80000
 8001b08:	08007410 	.word	0x08007410
 8001b0c:	0800742c 	.word	0x0800742c
 8001b10:	08007444 	.word	0x08007444
 8001b14:	0800744c 	.word	0x0800744c
 8001b18:	08007454 	.word	0x08007454
 8001b1c:	08007464 	.word	0x08007464
 8001b20:	0800746c 	.word	0x0800746c
 8001b24:	080074dc 	.word	0x080074dc
 8001b28:	080074ec 	.word	0x080074ec
 8001b2c:	08007518 	.word	0x08007518
 8001b30:	08007528 	.word	0x08007528
 8001b34:	0800756c 	.word	0x0800756c
 8001b38:	08007588 	.word	0x08007588
 8001b3c:	08007640 	.word	0x08007640
 8001b40:	08007648 	.word	0x08007648
 8001b44:	08007674 	.word	0x08007674
 8001b48:	0800767c 	.word	0x0800767c
 8001b4c:	0800769c 	.word	0x0800769c

08001b50 <pwm_set_period>:
#include "tim.h"
#include "timer_utils.h"


void pwm_set_period(TIM_HandleTypeDef *htim, float period_ms)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SetAutoreload(htim, TIM_MS_TO_TICKS(htim, period_ms)); // set the period
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	3301      	adds	r3, #1
 8001b62:	0019      	movs	r1, r3
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <pwm_set_period+0x8c>)
 8001b66:	f7fe fae3 	bl	8000130 <__udivsi3>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff f9e1 	bl	8000f34 <__aeabi_ui2f>
 8001b72:	1c03      	adds	r3, r0, #0
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	1c18      	adds	r0, r3, #0
 8001b78:	f7fe fe9a 	bl	80008b0 <__aeabi_fmul>
 8001b7c:	1c03      	adds	r3, r0, #0
 8001b7e:	4918      	ldr	r1, [pc, #96]	; (8001be0 <pwm_set_period+0x90>)
 8001b80:	1c18      	adds	r0, r3, #0
 8001b82:	f7fe fccd 	bl	8000520 <__aeabi_fdiv>
 8001b86:	1c03      	adds	r3, r0, #0
 8001b88:	1c1a      	adds	r2, r3, #0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681c      	ldr	r4, [r3, #0]
 8001b8e:	1c10      	adds	r0, r2, #0
 8001b90:	f7fe fbe2 	bl	8000358 <__aeabi_f2uiz>
 8001b94:	0003      	movs	r3, r0
 8001b96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	480e      	ldr	r0, [pc, #56]	; (8001bdc <pwm_set_period+0x8c>)
 8001ba4:	f7fe fac4 	bl	8000130 <__udivsi3>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	0018      	movs	r0, r3
 8001bac:	f7ff f9c2 	bl	8000f34 <__aeabi_ui2f>
 8001bb0:	1c03      	adds	r3, r0, #0
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	1c18      	adds	r0, r3, #0
 8001bb6:	f7fe fe7b 	bl	80008b0 <__aeabi_fmul>
 8001bba:	1c03      	adds	r3, r0, #0
 8001bbc:	4908      	ldr	r1, [pc, #32]	; (8001be0 <pwm_set_period+0x90>)
 8001bbe:	1c18      	adds	r0, r3, #0
 8001bc0:	f7fe fcae 	bl	8000520 <__aeabi_fdiv>
 8001bc4:	1c03      	adds	r3, r0, #0
 8001bc6:	1c18      	adds	r0, r3, #0
 8001bc8:	f7fe fbc6 	bl	8000358 <__aeabi_f2uiz>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SetAutoreload(htim, period_ms); // non perdiod_ms ma tick
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b003      	add	sp, #12
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	447a0000 	.word	0x447a0000

08001be4 <pwm_set_duty_cicle>:

void pwm_set_duty_cicle(TIM_HandleTypeDef *htim, uint32_t channel, float duty_cicle)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	if (duty_cicle < 0 || duty_cicle > 1)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe fb3a 	bl	800026c <__aeabi_fcmplt>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d163      	bne.n	8001cc4 <pwm_set_duty_cicle+0xe0>
 8001bfc:	21fe      	movs	r1, #254	; 0xfe
 8001bfe:	0589      	lsls	r1, r1, #22
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe fb47 	bl	8000294 <__aeabi_fcmpgt>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d15c      	bne.n	8001cc4 <pwm_set_duty_cicle+0xe0>
		return;

	__HAL_TIM_SetCompare(htim, channel, __HAL_TIM_GetAutoreload(htim) * duty_cicle);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d114      	bne.n	8001c3a <pwm_set_duty_cicle+0x56>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff f98c 	bl	8000f34 <__aeabi_ui2f>
 8001c1c:	1c03      	adds	r3, r0, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	1c18      	adds	r0, r3, #0
 8001c22:	f7fe fe45 	bl	80008b0 <__aeabi_fmul>
 8001c26:	1c03      	adds	r3, r0, #0
 8001c28:	1c1a      	adds	r2, r3, #0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681c      	ldr	r4, [r3, #0]
 8001c2e:	1c10      	adds	r0, r2, #0
 8001c30:	f7fe fb92 	bl	8000358 <__aeabi_f2uiz>
 8001c34:	0003      	movs	r3, r0
 8001c36:	6363      	str	r3, [r4, #52]	; 0x34
 8001c38:	e045      	b.n	8001cc6 <pwm_set_duty_cicle+0xe2>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d114      	bne.n	8001c6a <pwm_set_duty_cicle+0x86>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff f974 	bl	8000f34 <__aeabi_ui2f>
 8001c4c:	1c03      	adds	r3, r0, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	1c18      	adds	r0, r3, #0
 8001c52:	f7fe fe2d 	bl	80008b0 <__aeabi_fmul>
 8001c56:	1c03      	adds	r3, r0, #0
 8001c58:	1c1a      	adds	r2, r3, #0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	1c10      	adds	r0, r2, #0
 8001c60:	f7fe fb7a 	bl	8000358 <__aeabi_f2uiz>
 8001c64:	0003      	movs	r3, r0
 8001c66:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c68:	e02d      	b.n	8001cc6 <pwm_set_duty_cicle+0xe2>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d114      	bne.n	8001c9a <pwm_set_duty_cicle+0xb6>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff f95c 	bl	8000f34 <__aeabi_ui2f>
 8001c7c:	1c03      	adds	r3, r0, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	1c18      	adds	r0, r3, #0
 8001c82:	f7fe fe15 	bl	80008b0 <__aeabi_fmul>
 8001c86:	1c03      	adds	r3, r0, #0
 8001c88:	1c1a      	adds	r2, r3, #0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	1c10      	adds	r0, r2, #0
 8001c90:	f7fe fb62 	bl	8000358 <__aeabi_f2uiz>
 8001c94:	0003      	movs	r3, r0
 8001c96:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c98:	e015      	b.n	8001cc6 <pwm_set_duty_cicle+0xe2>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff f947 	bl	8000f34 <__aeabi_ui2f>
 8001ca6:	1c03      	adds	r3, r0, #0
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	1c18      	adds	r0, r3, #0
 8001cac:	f7fe fe00 	bl	80008b0 <__aeabi_fmul>
 8001cb0:	1c03      	adds	r3, r0, #0
 8001cb2:	1c1a      	adds	r2, r3, #0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681c      	ldr	r4, [r3, #0]
 8001cb8:	1c10      	adds	r0, r2, #0
 8001cba:	f7fe fb4d 	bl	8000358 <__aeabi_f2uiz>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	6423      	str	r3, [r4, #64]	; 0x40
 8001cc2:	e000      	b.n	8001cc6 <pwm_set_duty_cicle+0xe2>
		return;
 8001cc4:	46c0      	nop			; (mov r8, r8)
}
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b005      	add	sp, #20
 8001cca:	bd90      	pop	{r4, r7, pc}

08001ccc <pwm_start_channel>:

void pwm_start_channel(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start_IT(htim, channel);
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f001 ff35 	bl	8003b4c <HAL_TIM_PWM_Start_IT>
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <pwm_stop_channel>:

void pwm_stop_channel(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0011      	movs	r1, r2
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 fff8 	bl	8003cf0 <HAL_TIM_PWM_Stop_IT>
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_USB, (uint8_t *)&ch, 1, 0xFFFF);
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <__io_putchar+0x20>)
 8001d12:	1d39      	adds	r1, r7, #4
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <__io_putchar+0x24>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f002 fdda 	bl	80048d0 <HAL_UART_Transmit>

	return ch;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	0000ffff 	.word	0x0000ffff
 8001d2c:	200000fc 	.word	0x200000fc

08001d30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	240c      	movs	r4, #12
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2314      	movs	r3, #20
 8001d3e:	001a      	movs	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	f004 f93d 	bl	8005fc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_GPIO_Init+0xb8>)
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_GPIO_Init+0xb8>)
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <MX_GPIO_Init+0xb8>)
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <MX_GPIO_Init+0xb8>)
 8001d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <MX_GPIO_Init+0xb8>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <MX_GPIO_Init+0xb8>)
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_Pin|nSLEEP_Pin, GPIO_PIN_RESET);
 8001d76:	23a0      	movs	r3, #160	; 0xa0
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2160      	movs	r1, #96	; 0x60
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 ff72 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	23a0      	movs	r3, #160	; 0xa0
 8001d8a:	05db      	lsls	r3, r3, #23
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 ff6a 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IPROPI_Pin|nFAULT_Pin|SWO_Pin;
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <MX_GPIO_Init+0xbc>)
 8001d98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	193a      	adds	r2, r7, r4
 8001da8:	23a0      	movs	r3, #160	; 0xa0
 8001daa:	05db      	lsls	r3, r3, #23
 8001dac:	0011      	movs	r1, r2
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 fdec 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_Pin|nSLEEP_Pin|LED_Pin;
 8001db4:	0021      	movs	r1, r4
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2298      	movs	r2, #152	; 0x98
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	187a      	adds	r2, r7, r1
 8001dd2:	23a0      	movs	r3, #160	; 0xa0
 8001dd4:	05db      	lsls	r3, r3, #23
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 fdd7 	bl	800298c <HAL_GPIO_Init>

}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b009      	add	sp, #36	; 0x24
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40021000 	.word	0x40021000
 8001dec:	00000482 	.word	0x00000482

08001df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df4:	f000 fbd0 	bl	8002598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df8:	f000 f888 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfc:	f7ff ff98 	bl	8001d30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e00:	f000 fb24 	bl	800244c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001e04:	f000 fa48 	bl	8002298 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// INIT PHASE
	fsm_handler.current_state    = INIT;
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <main+0xec>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
	reset_cmd(&serial_cmd_handler);
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <main+0xf0>)
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f8f7 	bl	8002004 <reset_cmd>

	printf("\n\r----------------------START----------------------\r\n");
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <main+0xf4>)
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f004 f965 	bl	80060e8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (fsm_handler.go_to_next_state) {
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <main+0xec>)
 8001e20:	789b      	ldrb	r3, [r3, #2]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <main+0x3e>
			fsm_handler.current_state = fsm_handler.next_state;
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <main+0xec>)
 8001e28:	785a      	ldrb	r2, [r3, #1]
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <main+0xec>)
 8001e2c:	701a      	strb	r2, [r3, #0]
		}
		switch (fsm_handler.current_state) {
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <main+0xec>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d042      	beq.n	8001ebc <main+0xcc>
 8001e36:	dcf2      	bgt.n	8001e1e <main+0x2e>
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d02b      	beq.n	8001e94 <main+0xa4>
 8001e3c:	dcef      	bgt.n	8001e1e <main+0x2e>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <main+0x58>
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d00c      	beq.n	8001e60 <main+0x70>
 8001e46:	e048      	b.n	8001eda <main+0xea>
		case INIT:
			//HAL_NVIC_SystemReset(); //FIX: what??
			set_and_go_to_next_state(WAIT_FOR_CMD);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f000 f8c7 	bl	8001fdc <set_and_go_to_next_state>
			printf("\nDigit 'ok' and press ENTER to start motor test.\r\n");
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <main+0xf8>)
 8001e50:	0018      	movs	r0, r3
 8001e52:	f004 f949 	bl	80060e8 <puts>
			printf("Type 'help' to see all the available commands\r\n\n"); //TODO: automatic print of the available cmd
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <main+0xfc>)
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f004 f945 	bl	80060e8 <puts>
			break;
 8001e5e:	e03c      	b.n	8001eda <main+0xea>
		case WAIT_FOR_CMD:
			printf("\n\n\rWaiting for command...\r\n\n");
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <main+0x100>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f004 f940 	bl	80060e8 <puts>
			while(serial_cmd_handler.is_cmd_sent == false)
 8001e68:	e005      	b.n	8001e76 <main+0x86>
			{
				HAL_UART_Receive_IT(&UART_USB, (uint8_t *)serial_cmd_handler.last_char_received, 1);
 8001e6a:	4922      	ldr	r1, [pc, #136]	; (8001ef4 <main+0x104>)
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <main+0x108>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	0018      	movs	r0, r3
 8001e72:	f002 fdcd 	bl	8004a10 <HAL_UART_Receive_IT>
			while(serial_cmd_handler.is_cmd_sent == false)
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <main+0xf0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4053      	eors	r3, r2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f2      	bne.n	8001e6a <main+0x7a>
			}
			if (serial_cmd_handler.is_cmd_sent)
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <main+0xf0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d025      	beq.n	8001ed8 <main+0xe8>
			{
				set_and_go_to_next_state(CMD_RECEIVED);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f000 f8a5 	bl	8001fdc <set_and_go_to_next_state>
			}
			break;
 8001e92:	e021      	b.n	8001ed8 <main+0xe8>
		case CMD_RECEIVED:
			parse_and_execute_cmd(serial_cmd_handler.cmd_received);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <main+0x10c>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fcbc 	bl	8001814 <parse_and_execute_cmd>
			if (motor_code == RUN)
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <main+0x110>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d103      	bne.n	8001eac <main+0xbc>
			{
				set_and_go_to_next_state(RUN_MOTOR);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 f899 	bl	8001fdc <set_and_go_to_next_state>
 8001eaa:	e002      	b.n	8001eb2 <main+0xc2>
			}
			else
			{
				set_and_go_to_next_state(WAIT_FOR_CMD);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f000 f895 	bl	8001fdc <set_and_go_to_next_state>
			}
			reset_cmd(&serial_cmd_handler);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <main+0xf0>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 f8a5 	bl	8002004 <reset_cmd>
			break;
 8001eba:	e00e      	b.n	8001eda <main+0xea>
		case RUN_MOTOR:
			printf("\n\n\rMotor running...\n\r");
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <main+0x114>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f004 f886 	bl	8005fd0 <iprintf>
			run_motor();
 8001ec4:	f7ff fc74 	bl	80017b0 <run_motor>
			printf("\n\rEND test\n\r");
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <main+0x118>)
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f004 f880 	bl	8005fd0 <iprintf>
			set_and_go_to_next_state(WAIT_FOR_CMD);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f000 f883 	bl	8001fdc <set_and_go_to_next_state>
			break;
 8001ed6:	e000      	b.n	8001eda <main+0xea>
			break;
 8001ed8:	46c0      	nop			; (mov r8, r8)
		if (fsm_handler.go_to_next_state) {
 8001eda:	e7a0      	b.n	8001e1e <main+0x2e>
 8001edc:	200000b4 	.word	0x200000b4
 8001ee0:	200000a0 	.word	0x200000a0
 8001ee4:	080076b8 	.word	0x080076b8
 8001ee8:	080076f0 	.word	0x080076f0
 8001eec:	08007724 	.word	0x08007724
 8001ef0:	08007754 	.word	0x08007754
 8001ef4:	200000b0 	.word	0x200000b0
 8001ef8:	200000fc 	.word	0x200000fc
 8001efc:	200000a1 	.word	0x200000a1
 8001f00:	2000009c 	.word	0x2000009c
 8001f04:	08007770 	.word	0x08007770
 8001f08:	08007788 	.word	0x08007788

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b099      	sub	sp, #100	; 0x64
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	242c      	movs	r4, #44	; 0x2c
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	0018      	movs	r0, r3
 8001f18:	2334      	movs	r3, #52	; 0x34
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f004 f84f 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f22:	2318      	movs	r3, #24
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	0018      	movs	r0, r3
 8001f28:	2314      	movs	r3, #20
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f004 f847 	bl	8005fc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f32:	003b      	movs	r3, r7
 8001f34:	0018      	movs	r0, r3
 8001f36:	2318      	movs	r3, #24
 8001f38:	001a      	movs	r2, r3
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f004 f840 	bl	8005fc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <SystemClock_Config+0xc8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <SystemClock_Config+0xcc>)
 8001f46:	401a      	ands	r2, r3
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <SystemClock_Config+0xc8>)
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	0109      	lsls	r1, r1, #4
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f52:	0021      	movs	r1, r4
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	2202      	movs	r2, #2
 8001f58:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2210      	movs	r2, #16
 8001f64:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 fe98 	bl	8002ca4 <HAL_RCC_OscConfig>
 8001f74:	1e03      	subs	r3, r0, #0
 8001f76:	d001      	beq.n	8001f7c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001f78:	f000 f880 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f7c:	2118      	movs	r1, #24
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	220f      	movs	r2, #15
 8001f82:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2201      	movs	r2, #1
 8001f88:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f001 f9fb 	bl	800339c <HAL_RCC_ClockConfig>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001faa:	f000 f867 	bl	800207c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fae:	003b      	movs	r3, r7
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fb4:	003b      	movs	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fba:	003b      	movs	r3, r7
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f001 fc11 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001fc6:	f000 f859 	bl	800207c <Error_Handler>
  }
}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b019      	add	sp, #100	; 0x64
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	ffffe7ff 	.word	0xffffe7ff

08001fdc <set_and_go_to_next_state>:

/* USER CODE BEGIN 4 */
void set_and_go_to_next_state(state next_state)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	1dfb      	adds	r3, r7, #7
 8001fe6:	701a      	strb	r2, [r3, #0]
	fsm_handler.next_state       = next_state;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <set_and_go_to_next_state+0x24>)
 8001fea:	1dfa      	adds	r2, r7, #7
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	705a      	strb	r2, [r3, #1]
	fsm_handler.go_to_next_state = true;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <set_and_go_to_next_state+0x24>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	709a      	strb	r2, [r3, #2]
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b002      	add	sp, #8
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	200000b4 	.word	0x200000b4

08002004 <reset_cmd>:

void reset_cmd(uart_rx_handler *uart_handler)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	uart_handler->char_index = 0;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	745a      	strb	r2, [r3, #17]
	memset(uart_handler->cmd_received, 0x0, sizeof(uart_handler->cmd_received));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3301      	adds	r3, #1
 8002016:	220f      	movs	r2, #15
 8002018:	2100      	movs	r1, #0
 800201a:	0018      	movs	r0, r3
 800201c:	f003 ffd0 	bl	8005fc0 <memset>
	uart_handler->is_cmd_sent = false;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	serial_cmd_handler.cmd_received[serial_cmd_handler.char_index] = serial_cmd_handler.last_char_received[0];
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 800203a:	7c5b      	ldrb	r3, [r3, #17]
 800203c:	0019      	movs	r1, r3
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 8002040:	7c1a      	ldrb	r2, [r3, #16]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 8002044:	185b      	adds	r3, r3, r1
 8002046:	705a      	strb	r2, [r3, #1]
	serial_cmd_handler.char_index++;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 800204a:	7c5b      	ldrb	r3, [r3, #17]
 800204c:	3301      	adds	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 8002052:	745a      	strb	r2, [r3, #17]
	if (serial_cmd_handler.last_char_received[0] == '\n' || serial_cmd_handler.last_char_received[0] == '\r')
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 8002056:	7c1b      	ldrb	r3, [r3, #16]
 8002058:	2b0a      	cmp	r3, #10
 800205a:	d003      	beq.n	8002064 <HAL_UART_RxCpltCallback+0x34>
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 800205e:	7c1b      	ldrb	r3, [r3, #16]
 8002060:	2b0d      	cmp	r3, #13
 8002062:	d105      	bne.n	8002070 <HAL_UART_RxCpltCallback+0x40>
	{
		serial_cmd_handler.is_cmd_sent = true;
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
		serial_cmd_handler.char_index = 0;
 800206a:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_UART_RxCpltCallback+0x48>)
 800206c:	2200      	movs	r2, #0
 800206e:	745a      	strb	r2, [r3, #17]
	}
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200000a0 	.word	0x200000a0

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002084:	e7fe      	b.n	8002084 <Error_Handler+0x8>
	...

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_MspInit+0x24>)
 800208e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_MspInit+0x24>)
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <HAL_MspInit+0x24>)
 800209a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_MspInit+0x24>)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	0549      	lsls	r1, r1, #21
 80020a2:	430a      	orrs	r2, r1
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler+0x4>

080020b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d4:	f000 fab4 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <TIM2_IRQHandler+0x14>)
 80020e6:	0018      	movs	r0, r3
 80020e8:	f001 fe86 	bl	8003df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	200000bc 	.word	0x200000bc

080020f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <USART2_IRQHandler+0x14>)
 80020fe:	0018      	movs	r0, r3
 8002100:	f002 fce4 	bl	8004acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	200000fc 	.word	0x200000fc

08002110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_kill>:

int _kill(int pid, int sig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002126:	f003 ff21 	bl	8005f6c <__errno>
 800212a:	0003      	movs	r3, r0
 800212c:	2216      	movs	r2, #22
 800212e:	601a      	str	r2, [r3, #0]
  return -1;
 8002130:	2301      	movs	r3, #1
 8002132:	425b      	negs	r3, r3
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <_exit>:

void _exit (int status)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002144:	2301      	movs	r3, #1
 8002146:	425a      	negs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff ffe5 	bl	800211c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002152:	e7fe      	b.n	8002152 <_exit+0x16>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002166:	e000      	b.n	800216a <_read+0x16>
 8002168:	bf00      	nop
 800216a:	0001      	movs	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
  }

  return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff fdad 	bl	8001d08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
  }
  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b006      	add	sp, #24
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	425b      	negs	r3, r3
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}

080021da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0192      	lsls	r2, r2, #6
 80021ea:	605a      	str	r2, [r3, #4]
  return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_isatty>:

int _isatty(int file)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	18d3      	adds	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f003 fe8c 	bl	8005f6c <__errno>
 8002254:	0003      	movs	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	2301      	movs	r3, #1
 800225c:	425b      	negs	r3, r3
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	18d2      	adds	r2, r2, r3
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b006      	add	sp, #24
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20002000 	.word	0x20002000
 8002280:	00000400 	.word	0x00000400
 8002284:	200000b8 	.word	0x200000b8
 8002288:	20000198 	.word	0x20000198

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	2318      	movs	r3, #24
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	0018      	movs	r0, r3
 80022a4:	2310      	movs	r3, #16
 80022a6:	001a      	movs	r2, r3
 80022a8:	2100      	movs	r1, #0
 80022aa:	f003 fe89 	bl	8005fc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	2310      	movs	r3, #16
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	0018      	movs	r0, r3
 80022b4:	2308      	movs	r3, #8
 80022b6:	001a      	movs	r2, r3
 80022b8:	2100      	movs	r1, #0
 80022ba:	f003 fe81 	bl	8005fc0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022be:	003b      	movs	r3, r7
 80022c0:	0018      	movs	r0, r3
 80022c2:	2310      	movs	r3, #16
 80022c4:	001a      	movs	r2, r3
 80022c6:	2100      	movs	r1, #0
 80022c8:	f003 fe7a 	bl	8005fc0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	05d2      	lsls	r2, r2, #23
 80022d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022d6:	220f      	movs	r2, #15
 80022d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022da:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <MX_TIM2_Init+0xfc>)
 80022e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022f2:	4b27      	ldr	r3, [pc, #156]	; (8002390 <MX_TIM2_Init+0xf8>)
 80022f4:	0018      	movs	r0, r3
 80022f6:	f001 fba1 	bl	8003a3c <HAL_TIM_Base_Init>
 80022fa:	1e03      	subs	r3, r0, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022fe:	f7ff febd 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002302:	2118      	movs	r1, #24
 8002304:	187b      	adds	r3, r7, r1
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0152      	lsls	r2, r2, #5
 800230a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800230c:	187a      	adds	r2, r7, r1
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <MX_TIM2_Init+0xf8>)
 8002310:	0011      	movs	r1, r2
 8002312:	0018      	movs	r0, r3
 8002314:	f001 ff1e 	bl	8004154 <HAL_TIM_ConfigClockSource>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800231c:	f7ff feae 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_TIM2_Init+0xf8>)
 8002322:	0018      	movs	r0, r3
 8002324:	f001 fbca 	bl	8003abc <HAL_TIM_PWM_Init>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800232c:	f7ff fea6 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2110      	movs	r1, #16
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2200      	movs	r2, #0
 800233c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800233e:	187a      	adds	r2, r7, r1
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_TIM2_Init+0xf8>)
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f002 fa17 	bl	8004778 <HAL_TIMEx_MasterConfigSynchronization>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800234e:	f7ff fe95 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002352:	003b      	movs	r3, r7
 8002354:	2260      	movs	r2, #96	; 0x60
 8002356:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8002358:	003b      	movs	r3, r7
 800235a:	22f4      	movs	r2, #244	; 0xf4
 800235c:	32ff      	adds	r2, #255	; 0xff
 800235e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002360:	003b      	movs	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002366:	003b      	movs	r3, r7
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800236c:	0039      	movs	r1, r7
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_TIM2_Init+0xf8>)
 8002370:	2200      	movs	r2, #0
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fe28 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800237c:	f7ff fe7e 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <MX_TIM2_Init+0xf8>)
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f826 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b00a      	add	sp, #40	; 0x28
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200000bc 	.word	0x200000bc
 8002394:	000003e7 	.word	0x000003e7

08002398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d10d      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_TIM_Base_MspInit+0x38>)
 80023ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_TIM_Base_MspInit+0x38>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	430a      	orrs	r2, r1
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	200f      	movs	r0, #15
 80023be:	f000 fa2b 	bl	8002818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c2:	200f      	movs	r0, #15
 80023c4:	f000 fa3d 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	240c      	movs	r4, #12
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	0018      	movs	r0, r3
 80023e2:	2314      	movs	r3, #20
 80023e4:	001a      	movs	r2, r3
 80023e6:	2100      	movs	r1, #0
 80023e8:	f003 fdea 	bl	8005fc0 <memset>
  if(timHandle->Instance==TIM2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d122      	bne.n	800243e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_TIM_MspPostInit+0x74>)
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_TIM_MspPostInit+0x74>)
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_TIM_MspPostInit+0x74>)
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2201      	movs	r2, #1
 800240a:	4013      	ands	r3, r2
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IN1_Pin;
 8002410:	0021      	movs	r1, r4
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2202      	movs	r2, #2
 800241c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	187b      	adds	r3, r7, r1
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800242a:	187b      	adds	r3, r7, r1
 800242c:	2202      	movs	r2, #2
 800242e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8002430:	187a      	adds	r2, r7, r1
 8002432:	23a0      	movs	r3, #160	; 0xa0
 8002434:	05db      	lsls	r3, r3, #23
 8002436:	0011      	movs	r1, r2
 8002438:	0018      	movs	r0, r3
 800243a:	f000 faa7 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b009      	add	sp, #36	; 0x24
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40021000 	.word	0x40021000

0800244c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <MX_USART2_UART_Init+0x5c>)
 8002454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002458:	2296      	movs	r2, #150	; 0x96
 800245a:	0192      	lsls	r2, r2, #6
 800245c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <MX_USART2_UART_Init+0x58>)
 8002490:	0018      	movs	r0, r3
 8002492:	f002 f9c9 	bl	8004828 <HAL_UART_Init>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d001      	beq.n	800249e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800249a:	f7ff fdef 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200000fc 	.word	0x200000fc
 80024a8:	40004400 	.word	0x40004400

080024ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	240c      	movs	r4, #12
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	0018      	movs	r0, r3
 80024ba:	2314      	movs	r3, #20
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f003 fd7e 	bl	8005fc0 <memset>
  if(uartHandle->Instance==USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_UART_MspInit+0x90>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d131      	bne.n	8002532 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_UART_MspInit+0x94>)
 80024d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0x94>)
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	0289      	lsls	r1, r1, #10
 80024d8:	430a      	orrs	r2, r1
 80024da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_MspInit+0x94>)
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_UART_MspInit+0x94>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_UART_MspInit+0x94>)
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024f4:	0021      	movs	r1, r4
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	220c      	movs	r2, #12
 80024fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2202      	movs	r2, #2
 8002500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2203      	movs	r2, #3
 800250c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2204      	movs	r2, #4
 8002512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	187a      	adds	r2, r7, r1
 8002516:	23a0      	movs	r3, #160	; 0xa0
 8002518:	05db      	lsls	r3, r3, #23
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f000 fa35 	bl	800298c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	201c      	movs	r0, #28
 8002528:	f000 f976 	bl	8002818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800252c:	201c      	movs	r0, #28
 800252e:	f000 f988 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b009      	add	sp, #36	; 0x24
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	40004400 	.word	0x40004400
 8002540:	40021000 	.word	0x40021000

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002546:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002548:	f7ff fea0 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <LoopForever+0x6>)
  ldr r1, =_edata
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <LoopForever+0xe>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002564:	4c0a      	ldr	r4, [pc, #40]	; (8002590 <LoopForever+0x16>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002572:	f003 fd01 	bl	8005f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7ff fc3b 	bl	8001df0 <main>

0800257a <LoopForever>:

LoopForever:
    b LoopForever
 800257a:	e7fe      	b.n	800257a <LoopForever>
   ldr   r0, =_estack
 800257c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002588:	08007b60 	.word	0x08007b60
  ldr r2, =_sbss
 800258c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002590:	20000198 	.word	0x20000198

08002594 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC1_COMP_IRQHandler>
	...

08002598 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_Init+0x3c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_Init+0x3c>)
 80025aa:	2140      	movs	r1, #64	; 0x40
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b0:	2003      	movs	r0, #3
 80025b2:	f000 f811 	bl	80025d8 <HAL_InitTick>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e001      	b.n	80025c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025c2:	f7ff fd61 	bl	8002088 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	781b      	ldrb	r3, [r3, #0]
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40022000 	.word	0x40022000

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_InitTick+0x5c>)
 80025e2:	681c      	ldr	r4, [r3, #0]
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_InitTick+0x60>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	0019      	movs	r1, r3
 80025ea:	23fa      	movs	r3, #250	; 0xfa
 80025ec:	0098      	lsls	r0, r3, #2
 80025ee:	f7fd fd9f 	bl	8000130 <__udivsi3>
 80025f2:	0003      	movs	r3, r0
 80025f4:	0019      	movs	r1, r3
 80025f6:	0020      	movs	r0, r4
 80025f8:	f7fd fd9a 	bl	8000130 <__udivsi3>
 80025fc:	0003      	movs	r3, r0
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f92f 	bl	8002862 <HAL_SYSTICK_Config>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d001      	beq.n	800260c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e00f      	b.n	800262c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d80b      	bhi.n	800262a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	2301      	movs	r3, #1
 8002616:	425b      	negs	r3, r3
 8002618:	2200      	movs	r2, #0
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f8fc 	bl	8002818 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_InitTick+0x64>)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b003      	add	sp, #12
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	20000010 	.word	0x20000010
 8002638:	20000018 	.word	0x20000018
 800263c:	20000014 	.word	0x20000014

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_IncTick+0x1c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	001a      	movs	r2, r3
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_IncTick+0x20>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	18d2      	adds	r2, r2, r3
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_IncTick+0x20>)
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	20000018 	.word	0x20000018
 8002660:	20000184 	.word	0x20000184

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <HAL_GetTick+0x10>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20000184 	.word	0x20000184

08002678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fff0 	bl	8002664 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3301      	adds	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_Delay+0x44>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	001a      	movs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	189b      	adds	r3, r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	f7ff ffe0 	bl	8002664 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8f7      	bhi.n	80026a0 <HAL_Delay+0x28>
  {
  }
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b004      	add	sp, #16
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	20000018 	.word	0x20000018

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	0002      	movs	r2, r0
 80026c8:	1dfb      	adds	r3, r7, #7
 80026ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b7f      	cmp	r3, #127	; 0x7f
 80026d2:	d809      	bhi.n	80026e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d4:	1dfb      	adds	r3, r7, #7
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	001a      	movs	r2, r3
 80026da:	231f      	movs	r3, #31
 80026dc:	401a      	ands	r2, r3
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_EnableIRQ+0x30>)
 80026e0:	2101      	movs	r1, #1
 80026e2:	4091      	lsls	r1, r2
 80026e4:	000a      	movs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
  }
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	0002      	movs	r2, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b7f      	cmp	r3, #127	; 0x7f
 8002708:	d828      	bhi.n	800275c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800270a:	4a2f      	ldr	r2, [pc, #188]	; (80027c8 <__NVIC_SetPriority+0xd4>)
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b25b      	sxtb	r3, r3
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	33c0      	adds	r3, #192	; 0xc0
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	589b      	ldr	r3, [r3, r2]
 800271a:	1dfa      	adds	r2, r7, #7
 800271c:	7812      	ldrb	r2, [r2, #0]
 800271e:	0011      	movs	r1, r2
 8002720:	2203      	movs	r2, #3
 8002722:	400a      	ands	r2, r1
 8002724:	00d2      	lsls	r2, r2, #3
 8002726:	21ff      	movs	r1, #255	; 0xff
 8002728:	4091      	lsls	r1, r2
 800272a:	000a      	movs	r2, r1
 800272c:	43d2      	mvns	r2, r2
 800272e:	401a      	ands	r2, r3
 8002730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	401a      	ands	r2, r3
 800273a:	1dfb      	adds	r3, r7, #7
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	0018      	movs	r0, r3
 8002740:	2303      	movs	r3, #3
 8002742:	4003      	ands	r3, r0
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002748:	481f      	ldr	r0, [pc, #124]	; (80027c8 <__NVIC_SetPriority+0xd4>)
 800274a:	1dfb      	adds	r3, r7, #7
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b25b      	sxtb	r3, r3
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	430a      	orrs	r2, r1
 8002754:	33c0      	adds	r3, #192	; 0xc0
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800275a:	e031      	b.n	80027c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <__NVIC_SetPriority+0xd8>)
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	0019      	movs	r1, r3
 8002764:	230f      	movs	r3, #15
 8002766:	400b      	ands	r3, r1
 8002768:	3b08      	subs	r3, #8
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3306      	adds	r3, #6
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	18d3      	adds	r3, r2, r3
 8002772:	3304      	adds	r3, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1dfa      	adds	r2, r7, #7
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	0011      	movs	r1, r2
 800277c:	2203      	movs	r2, #3
 800277e:	400a      	ands	r2, r1
 8002780:	00d2      	lsls	r2, r2, #3
 8002782:	21ff      	movs	r1, #255	; 0xff
 8002784:	4091      	lsls	r1, r2
 8002786:	000a      	movs	r2, r1
 8002788:	43d2      	mvns	r2, r2
 800278a:	401a      	ands	r2, r3
 800278c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	401a      	ands	r2, r3
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	0018      	movs	r0, r3
 800279c:	2303      	movs	r3, #3
 800279e:	4003      	ands	r3, r0
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <__NVIC_SetPriority+0xd8>)
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	001c      	movs	r4, r3
 80027ac:	230f      	movs	r3, #15
 80027ae:	4023      	ands	r3, r4
 80027b0:	3b08      	subs	r3, #8
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	430a      	orrs	r2, r1
 80027b6:	3306      	adds	r3, #6
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	18c3      	adds	r3, r0, r3
 80027bc:	3304      	adds	r3, #4
 80027be:	601a      	str	r2, [r3, #0]
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b003      	add	sp, #12
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1e5a      	subs	r2, r3, #1
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	045b      	lsls	r3, r3, #17
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d301      	bcc.n	80027e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e4:	2301      	movs	r3, #1
 80027e6:	e010      	b.n	800280a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <SysTick_Config+0x44>)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	3a01      	subs	r2, #1
 80027ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f0:	2301      	movs	r3, #1
 80027f2:	425b      	negs	r3, r3
 80027f4:	2103      	movs	r1, #3
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff ff7c 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Config+0x44>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x44>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	210f      	movs	r1, #15
 8002824:	187b      	adds	r3, r7, r1
 8002826:	1c02      	adds	r2, r0, #0
 8002828:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	187b      	adds	r3, r7, r1
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	0002      	movs	r2, r0
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff33 	bl	80026c0 <__NVIC_EnableIRQ>
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff ffaf 	bl	80027d0 <SysTick_Config>
 8002872:	0003      	movs	r3, r0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	230f      	movs	r3, #15
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2225      	movs	r2, #37	; 0x25
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d008      	beq.n	80028aa <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2204      	movs	r2, #4
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2224      	movs	r2, #36	; 0x24
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e024      	b.n	80028f4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	210e      	movs	r1, #14
 80028b6:	438a      	bics	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	221c      	movs	r2, #28
 80028d0:	401a      	ands	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2101      	movs	r1, #1
 80028d8:	4091      	lsls	r1, r2
 80028da:	000a      	movs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2225      	movs	r2, #37	; 0x25
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]

    return status;
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	210f      	movs	r1, #15
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2225      	movs	r2, #37	; 0x25
 8002910:	5c9b      	ldrb	r3, [r3, r2]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d006      	beq.n	8002926 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2204      	movs	r2, #4
 800291c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e02a      	b.n	800297c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	210e      	movs	r1, #14
 8002932:	438a      	bics	r2, r1
 8002934:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	221c      	movs	r2, #28
 800294c:	401a      	ands	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2101      	movs	r1, #1
 8002954:	4091      	lsls	r1, r2
 8002956:	000a      	movs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2225      	movs	r2, #37	; 0x25
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2224      	movs	r2, #36	; 0x24
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	0010      	movs	r0, r2
 800297a:	4798      	blx	r3
    }
  }
  return status;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029a2:	e149      	b.n	8002c38 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4091      	lsls	r1, r2
 80029ae:	000a      	movs	r2, r1
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d100      	bne.n	80029bc <HAL_GPIO_Init+0x30>
 80029ba:	e13a      	b.n	8002c32 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2203      	movs	r2, #3
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d005      	beq.n	80029d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d130      	bne.n	8002a36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	409a      	lsls	r2, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	0013      	movs	r3, r2
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	43da      	mvns	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	2201      	movs	r2, #1
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d017      	beq.n	8002a72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	43da      	mvns	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	0013      	movs	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2203      	movs	r2, #3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d123      	bne.n	8002ac6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	58d3      	ldr	r3, [r2, r3]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2207      	movs	r2, #7
 8002a90:	4013      	ands	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2107      	movs	r1, #7
 8002aaa:	400b      	ands	r3, r1
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	6939      	ldr	r1, [r7, #16]
 8002ac4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	23c0      	movs	r3, #192	; 0xc0
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	4013      	ands	r3, r2
 8002b04:	d100      	bne.n	8002b08 <HAL_GPIO_Init+0x17c>
 8002b06:	e094      	b.n	8002c32 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b08:	4b51      	ldr	r3, [pc, #324]	; (8002c50 <HAL_GPIO_Init+0x2c4>)
 8002b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0c:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_GPIO_Init+0x2c4>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	430a      	orrs	r2, r1
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x2c8>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	589b      	ldr	r3, [r3, r2]
 8002b20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2203      	movs	r2, #3
 8002b26:	4013      	ands	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	0013      	movs	r3, r2
 8002b30:	43da      	mvns	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	23a0      	movs	r3, #160	; 0xa0
 8002b3c:	05db      	lsls	r3, r3, #23
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x1de>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a44      	ldr	r2, [pc, #272]	; (8002c58 <HAL_GPIO_Init+0x2cc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x1da>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x1d6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_GPIO_Init+0x2d4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x1d2>
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	2103      	movs	r1, #3
 8002b70:	400a      	ands	r2, r1
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4935      	ldr	r1, [pc, #212]	; (8002c54 <HAL_GPIO_Init+0x2c8>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43da      	mvns	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	035b      	lsls	r3, r3, #13
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	039b      	lsls	r3, r3, #14
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002bde:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43da      	mvns	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	029b      	lsls	r3, r3, #10
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	4013      	ands	r3, r2
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	40da      	lsrs	r2, r3
 8002c40:	1e13      	subs	r3, r2, #0
 8002c42:	d000      	beq.n	8002c46 <HAL_GPIO_Init+0x2ba>
 8002c44:	e6ae      	b.n	80029a4 <HAL_GPIO_Init+0x18>
  }
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b006      	add	sp, #24
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000
 8002c58:	50000400 	.word	0x50000400
 8002c5c:	50000800 	.word	0x50000800
 8002c60:	50001c00 	.word	0x50001c00
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	0008      	movs	r0, r1
 8002c72:	0011      	movs	r1, r2
 8002c74:	1cbb      	adds	r3, r7, #2
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	1c7b      	adds	r3, r7, #1
 8002c7c:	1c0a      	adds	r2, r1, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	1c7b      	adds	r3, r7, #1
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c88:	1cbb      	adds	r3, r7, #2
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c92:	1cbb      	adds	r3, r7, #2
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 fb6c 	bl	8003390 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4bc8      	ldr	r3, [pc, #800]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	220c      	movs	r2, #12
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4bc6      	ldr	r3, [pc, #792]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	025b      	lsls	r3, r3, #9
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x36>
 8002cd8:	e07d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d112      	bne.n	8002d0c <HAL_RCC_OscConfig+0x68>
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	025b      	lsls	r3, r3, #9
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4bba      	ldr	r3, [pc, #744]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	029b      	lsls	r3, r3, #10
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5a>
 8002cfc:	e06a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x130>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d166      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f000 fb42 	bl	8003390 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_OscConfig+0x84>
 8002d18:	4bb0      	ldr	r3, [pc, #704]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4baf      	ldr	r3, [pc, #700]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0249      	lsls	r1, r1, #9
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e027      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	23a0      	movs	r3, #160	; 0xa0
 8002d2e:	02db      	lsls	r3, r3, #11
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d10e      	bne.n	8002d52 <HAL_RCC_OscConfig+0xae>
 8002d34:	4ba9      	ldr	r3, [pc, #676]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4ba8      	ldr	r3, [pc, #672]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	02c9      	lsls	r1, r1, #11
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	4ba6      	ldr	r3, [pc, #664]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4ba5      	ldr	r3, [pc, #660]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	0249      	lsls	r1, r1, #9
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e012      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d52:	4ba2      	ldr	r3, [pc, #648]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4ba1      	ldr	r3, [pc, #644]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d58:	49a1      	ldr	r1, [pc, #644]	; (8002fe0 <HAL_RCC_OscConfig+0x33c>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	4b9f      	ldr	r3, [pc, #636]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4b9b      	ldr	r3, [pc, #620]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b9a      	ldr	r3, [pc, #616]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d72:	499c      	ldr	r1, [pc, #624]	; (8002fe4 <HAL_RCC_OscConfig+0x340>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d014      	beq.n	8002daa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff fc70 	bl	8002664 <HAL_GetTick>
 8002d84:	0003      	movs	r3, r0
 8002d86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8a:	f7ff fc6b 	bl	8002664 <HAL_GetTick>
 8002d8e:	0002      	movs	r2, r0
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e2f9      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	4013      	ands	r3, r2
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0xe6>
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7ff fc5b 	bl	8002664 <HAL_GetTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff fc56 	bl	8002664 <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e2e4      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x110>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d100      	bne.n	8002de2 <HAL_RCC_OscConfig+0x13e>
 8002de0:	e099      	b.n	8002f16 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	2220      	movs	r2, #32
 8002dec:	4013      	ands	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002df0:	4b7a      	ldr	r3, [pc, #488]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b79      	ldr	r3, [pc, #484]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002df6:	2120      	movs	r1, #32
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2220      	movs	r2, #32
 8002e00:	4393      	bics	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d13e      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1ea>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d13b      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e16:	4b71      	ldr	r3, [pc, #452]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_RCC_OscConfig+0x186>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e2b2      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2a:	4b6c      	ldr	r3, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a6e      	ldr	r2, [pc, #440]	; (8002fe8 <HAL_RCC_OscConfig+0x344>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e40:	4b66      	ldr	r3, [pc, #408]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2209      	movs	r2, #9
 8002e46:	4393      	bics	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 fbeb 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8002e56:	0001      	movs	r1, r0
 8002e58:	4b60      	ldr	r3, [pc, #384]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	220f      	movs	r2, #15
 8002e60:	4013      	ands	r3, r2
 8002e62:	4a62      	ldr	r2, [pc, #392]	; (8002fec <HAL_RCC_OscConfig+0x348>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	000a      	movs	r2, r1
 8002e68:	40da      	lsrs	r2, r3
 8002e6a:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_RCC_OscConfig+0x34c>)
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e6e:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCC_OscConfig+0x350>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2513      	movs	r5, #19
 8002e74:	197c      	adds	r4, r7, r5
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7ff fbae 	bl	80025d8 <HAL_InitTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e80:	197b      	adds	r3, r7, r5
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d046      	beq.n	8002f16 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002e88:	197b      	adds	r3, r7, r5
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	e280      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d027      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e94:	4b51      	ldr	r3, [pc, #324]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2209      	movs	r2, #9
 8002e9a:	4393      	bics	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	4b4f      	ldr	r3, [pc, #316]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7ff fbdd 	bl	8002664 <HAL_GetTick>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fbd8 	bl	8002664 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e266      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec2:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d0f1      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a45      	ldr	r2, [pc, #276]	; (8002fe8 <HAL_RCC_OscConfig+0x344>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	021a      	lsls	r2, r3, #8
 8002edc:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e018      	b.n	8002f16 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002eea:	2101      	movs	r1, #1
 8002eec:	438a      	bics	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fbb8 	bl	8002664 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efa:	f7ff fbb3 	bl	8002664 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e241      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f0c:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2204      	movs	r2, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	d1f1      	bne.n	8002efa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <HAL_RCC_OscConfig+0x27e>
 8002f20:	e0a1      	b.n	8003066 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d140      	bne.n	8002faa <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x29c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e227      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <HAL_RCC_OscConfig+0x354>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	0a19      	lsrs	r1, r3, #8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	061a      	lsls	r2, r3, #24
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	0b5b      	lsrs	r3, r3, #13
 8002f6e:	3301      	adds	r3, #1
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0212      	lsls	r2, r2, #8
 8002f74:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	400b      	ands	r3, r1
 8002f80:	491a      	ldr	r1, [pc, #104]	; (8002fec <HAL_RCC_OscConfig+0x348>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_OscConfig+0x34c>)
 8002f88:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCC_OscConfig+0x350>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2513      	movs	r5, #19
 8002f90:	197c      	adds	r4, r7, r5
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7ff fb20 	bl	80025d8 <HAL_InitTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f9c:	197b      	adds	r3, r7, r5
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d060      	beq.n	8003066 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002fa4:	197b      	adds	r3, r7, r5
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	e1f2      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03f      	beq.n	8003032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0049      	lsls	r1, r1, #1
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7ff fb50 	bl	8002664 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc8:	e018      	b.n	8002ffc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fca:	f7ff fb4b 	bl	8002664 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d911      	bls.n	8002ffc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1d9      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	fffeffff 	.word	0xfffeffff
 8002fe4:	fffbffff 	.word	0xfffbffff
 8002fe8:	ffffe0ff 	.word	0xffffe0ff
 8002fec:	08007898 	.word	0x08007898
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	20000014 	.word	0x20000014
 8002ff8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ffc:	4bc9      	ldr	r3, [pc, #804]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d0e0      	beq.n	8002fca <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4bc6      	ldr	r3, [pc, #792]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4ac6      	ldr	r2, [pc, #792]	; (8003328 <HAL_RCC_OscConfig+0x684>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	4bc3      	ldr	r3, [pc, #780]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301c:	4bc1      	ldr	r3, [pc, #772]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	0a19      	lsrs	r1, r3, #8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	061a      	lsls	r2, r3, #24
 800302a:	4bbe      	ldr	r3, [pc, #760]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	e019      	b.n	8003066 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003032:	4bbc      	ldr	r3, [pc, #752]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4bbb      	ldr	r3, [pc, #748]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003038:	49bc      	ldr	r1, [pc, #752]	; (800332c <HAL_RCC_OscConfig+0x688>)
 800303a:	400a      	ands	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7ff fb11 	bl	8002664 <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003048:	f7ff fb0c 	bl	8002664 <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e19a      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800305a:	4bb2      	ldr	r3, [pc, #712]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4013      	ands	r3, r2
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2208      	movs	r2, #8
 800306c:	4013      	ands	r3, r2
 800306e:	d036      	beq.n	80030de <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d019      	beq.n	80030ac <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4baa      	ldr	r3, [pc, #680]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800307a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800307c:	4ba9      	ldr	r3, [pc, #676]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800307e:	2101      	movs	r1, #1
 8003080:	430a      	orrs	r2, r1
 8003082:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7ff faee 	bl	8002664 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7ff fae9 	bl	8002664 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e177      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030a0:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d0f1      	beq.n	800308e <HAL_RCC_OscConfig+0x3ea>
 80030aa:	e018      	b.n	80030de <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4b9d      	ldr	r3, [pc, #628]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80030ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030b0:	4b9c      	ldr	r3, [pc, #624]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	438a      	bics	r2, r1
 80030b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7ff fad4 	bl	8002664 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c2:	f7ff facf 	bl	8002664 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e15d      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030d4:	4b93      	ldr	r3, [pc, #588]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d1f1      	bne.n	80030c2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_OscConfig+0x446>
 80030e8:	e0ae      	b.n	8003248 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2023      	movs	r0, #35	; 0x23
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80030f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	055b      	lsls	r3, r3, #21
 80030fa:	4013      	ands	r3, r2
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	0549      	lsls	r1, r1, #21
 8003108:	430a      	orrs	r2, r1
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800310c:	183b      	adds	r3, r7, r0
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b87      	ldr	r3, [pc, #540]	; (8003330 <HAL_RCC_OscConfig+0x68c>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4013      	ands	r3, r2
 800311c:	d11a      	bne.n	8003154 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b84      	ldr	r3, [pc, #528]	; (8003330 <HAL_RCC_OscConfig+0x68c>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b83      	ldr	r3, [pc, #524]	; (8003330 <HAL_RCC_OscConfig+0x68c>)
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	0049      	lsls	r1, r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312c:	f7ff fa9a 	bl	8002664 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7ff fa95 	bl	8002664 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e123      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCC_OscConfig+0x68c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	429a      	cmp	r2, r3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x4cc>
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	0049      	lsls	r1, r1, #1
 800316a:	430a      	orrs	r2, r1
 800316c:	651a      	str	r2, [r3, #80]	; 0x50
 800316e:	e031      	b.n	80031d4 <HAL_RCC_OscConfig+0x530>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x4ee>
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800317a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800317c:	4b69      	ldr	r3, [pc, #420]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800317e:	496b      	ldr	r1, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x688>)
 8003180:	400a      	ands	r2, r1
 8003182:	651a      	str	r2, [r3, #80]	; 0x50
 8003184:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800318a:	496a      	ldr	r1, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x690>)
 800318c:	400a      	ands	r2, r1
 800318e:	651a      	str	r2, [r3, #80]	; 0x50
 8003190:	e020      	b.n	80031d4 <HAL_RCC_OscConfig+0x530>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	23a0      	movs	r3, #160	; 0xa0
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	429a      	cmp	r2, r3
 800319c:	d10e      	bne.n	80031bc <HAL_RCC_OscConfig+0x518>
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	00c9      	lsls	r1, r1, #3
 80031a8:	430a      	orrs	r2, r1
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b0:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0049      	lsls	r1, r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	651a      	str	r2, [r3, #80]	; 0x50
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x530>
 80031bc:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031c2:	495a      	ldr	r1, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x688>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	651a      	str	r2, [r3, #80]	; 0x50
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031cc:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031ce:	4959      	ldr	r1, [pc, #356]	; (8003334 <HAL_RCC_OscConfig+0x690>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7ff fa42 	bl	8002664 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e4:	e009      	b.n	80031fa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7ff fa3d 	bl	8002664 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a51      	ldr	r2, [pc, #324]	; (8003338 <HAL_RCC_OscConfig+0x694>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0ca      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80031fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d0ef      	beq.n	80031e6 <HAL_RCC_OscConfig+0x542>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7ff fa2c 	bl	8002664 <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003210:	e009      	b.n	8003226 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7ff fa27 	bl	8002664 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a46      	ldr	r2, [pc, #280]	; (8003338 <HAL_RCC_OscConfig+0x694>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0b4      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003226:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	d1ef      	bne.n	8003212 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003232:	2323      	movs	r3, #35	; 0x23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003242:	493e      	ldr	r1, [pc, #248]	; (800333c <HAL_RCC_OscConfig+0x698>)
 8003244:	400a      	ands	r2, r1
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d100      	bne.n	8003252 <HAL_RCC_OscConfig+0x5ae>
 8003250:	e09d      	b.n	800338e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b0c      	cmp	r3, #12
 8003256:	d100      	bne.n	800325a <HAL_RCC_OscConfig+0x5b6>
 8003258:	e076      	b.n	8003348 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b02      	cmp	r3, #2
 8003260:	d145      	bne.n	80032ee <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003268:	4935      	ldr	r1, [pc, #212]	; (8003340 <HAL_RCC_OscConfig+0x69c>)
 800326a:	400a      	ands	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7ff f9f9 	bl	8002664 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff f9f4 	bl	8002664 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e082      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	4013      	ands	r3, r2
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x6a0>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	431a      	orrs	r2, r3
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0449      	lsls	r1, r1, #17
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7ff f9ce 	bl	8002664 <HAL_GetTick>
 80032c8:	0003      	movs	r3, r0
 80032ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7ff f9c9 	bl	8002664 <HAL_GetTick>
 80032d2:	0002      	movs	r2, r0
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e057      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	049b      	lsls	r3, r3, #18
 80032e8:	4013      	ands	r3, r2
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x62a>
 80032ec:	e04f      	b.n	800338e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 80032f4:	4912      	ldr	r1, [pc, #72]	; (8003340 <HAL_RCC_OscConfig+0x69c>)
 80032f6:	400a      	ands	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7ff f9b3 	bl	8002664 <HAL_GetTick>
 80032fe:	0003      	movs	r3, r0
 8003300:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7ff f9ae 	bl	8002664 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e03c      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003316:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_OscConfig+0x680>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	049b      	lsls	r3, r3, #18
 800331e:	4013      	ands	r3, r2
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x660>
 8003322:	e034      	b.n	800338e <HAL_RCC_OscConfig+0x6ea>
 8003324:	40021000 	.word	0x40021000
 8003328:	ffff1fff 	.word	0xffff1fff
 800332c:	fffffeff 	.word	0xfffffeff
 8003330:	40007000 	.word	0x40007000
 8003334:	fffffbff 	.word	0xfffffbff
 8003338:	00001388 	.word	0x00001388
 800333c:	efffffff 	.word	0xefffffff
 8003340:	feffffff 	.word	0xfeffffff
 8003344:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_OscConfig+0x6f4>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	401a      	ands	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	429a      	cmp	r2, r3
 8003368:	d10f      	bne.n	800338a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	23f0      	movs	r3, #240	; 0xf0
 800336e:	039b      	lsls	r3, r3, #14
 8003370:	401a      	ands	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d107      	bne.n	800338a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	401a      	ands	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b00a      	add	sp, #40	; 0x28
 8003396:	bdb0      	pop	{r4, r5, r7, pc}
 8003398:	40021000 	.word	0x40021000

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e128      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b96      	ldr	r3, [pc, #600]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d91e      	bls.n	80033fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b93      	ldr	r3, [pc, #588]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4393      	bics	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	4b90      	ldr	r3, [pc, #576]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033d0:	f7ff f948 	bl	8002664 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d8:	e009      	b.n	80033ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033da:	f7ff f943 	bl	8002664 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	4a8a      	ldr	r2, [pc, #552]	; (8003610 <HAL_RCC_ClockConfig+0x274>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e109      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b87      	ldr	r3, [pc, #540]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1ee      	bne.n	80033da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003406:	4b83      	ldr	r3, [pc, #524]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	22f0      	movs	r2, #240	; 0xf0
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b7f      	ldr	r3, [pc, #508]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003416:	430a      	orrs	r2, r1
 8003418:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	d100      	bne.n	8003426 <HAL_RCC_ClockConfig+0x8a>
 8003424:	e089      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342e:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	029b      	lsls	r3, r3, #10
 8003436:	4013      	ands	r3, r2
 8003438:	d120      	bne.n	800347c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0e1      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003446:	4b73      	ldr	r3, [pc, #460]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	049b      	lsls	r3, r3, #18
 800344e:	4013      	ands	r3, r2
 8003450:	d114      	bne.n	800347c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0d5      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d106      	bne.n	800346c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2204      	movs	r2, #4
 8003464:	4013      	ands	r3, r2
 8003466:	d109      	bne.n	800347c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0ca      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0c2      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347c:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2203      	movs	r2, #3
 8003482:	4393      	bics	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4b62      	ldr	r3, [pc, #392]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7ff f8e8 	bl	8002664 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d111      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a0:	e009      	b.n	80034b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a2:	f7ff f8df 	bl	8002664 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	4a58      	ldr	r2, [pc, #352]	; (8003610 <HAL_RCC_ClockConfig+0x274>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0a5      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b6:	4b57      	ldr	r3, [pc, #348]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	220c      	movs	r2, #12
 80034bc:	4013      	ands	r3, r2
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d1ef      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x106>
 80034c2:	e03a      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d111      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7ff f8c9 	bl	8002664 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	4a4d      	ldr	r2, [pc, #308]	; (8003610 <HAL_RCC_ClockConfig+0x274>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e08f      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	220c      	movs	r2, #12
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d1ef      	bne.n	80034ce <HAL_RCC_ClockConfig+0x132>
 80034ee:	e024      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d11b      	bne.n	8003530 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f8:	e009      	b.n	800350e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fa:	f7ff f8b3 	bl	8002664 <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_RCC_ClockConfig+0x274>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e079      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	220c      	movs	r2, #12
 8003514:	4013      	ands	r3, r2
 8003516:	2b04      	cmp	r3, #4
 8003518:	d1ef      	bne.n	80034fa <HAL_RCC_ClockConfig+0x15e>
 800351a:	e00e      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7ff f8a2 	bl	8002664 <HAL_GetTick>
 8003520:	0002      	movs	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	4a3a      	ldr	r2, [pc, #232]	; (8003610 <HAL_RCC_ClockConfig+0x274>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e068      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	220c      	movs	r2, #12
 8003536:	4013      	ands	r3, r2
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	4013      	ands	r3, r2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d21e      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2201      	movs	r2, #1
 800354e:	4393      	bics	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800355a:	f7ff f883 	bl	8002664 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	e009      	b.n	8003578 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7ff f87e 	bl	8002664 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_RCC_ClockConfig+0x274>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e044      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_RCC_ClockConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	4013      	ands	r3, r2
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_RCC_ClockConfig+0x27c>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 80035a0:	430a      	orrs	r2, r1
 80035a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2208      	movs	r2, #8
 80035aa:	4013      	ands	r3, r2
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_RCC_ClockConfig+0x280>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	00da      	lsls	r2, r3, #3
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c4:	f000 f832 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035c8:	0001      	movs	r1, r0
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x278>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	220f      	movs	r2, #15
 80035d2:	4013      	ands	r3, r2
 80035d4:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x284>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	000a      	movs	r2, r1
 80035da:	40da      	lsrs	r2, r3
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_ClockConfig+0x288>)
 80035de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_RCC_ClockConfig+0x28c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	250b      	movs	r5, #11
 80035e6:	197c      	adds	r4, r7, r5
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fe fff5 	bl	80025d8 <HAL_InitTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035f2:	197b      	adds	r3, r7, r5
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035fa:	197b      	adds	r3, r7, r5
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	e000      	b.n	8003602 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b004      	add	sp, #16
 8003608:	bdb0      	pop	{r4, r5, r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	40022000 	.word	0x40022000
 8003610:	00001388 	.word	0x00001388
 8003614:	40021000 	.word	0x40021000
 8003618:	fffff8ff 	.word	0xfffff8ff
 800361c:	ffffc7ff 	.word	0xffffc7ff
 8003620:	08007898 	.word	0x08007898
 8003624:	20000010 	.word	0x20000010
 8003628:	20000014 	.word	0x20000014

0800362c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b08e      	sub	sp, #56	; 0x38
 8003630:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_RCC_GetSysClockFreq+0x138>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363a:	230c      	movs	r3, #12
 800363c:	4013      	ands	r3, r2
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d014      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x40>
 8003642:	d900      	bls.n	8003646 <HAL_RCC_GetSysClockFreq+0x1a>
 8003644:	e07b      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x112>
 8003646:	2b04      	cmp	r3, #4
 8003648:	d002      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x24>
 800364a:	2b08      	cmp	r3, #8
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x3a>
 800364e:	e076      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003650:	4b44      	ldr	r3, [pc, #272]	; (8003764 <HAL_RCC_GetSysClockFreq+0x138>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	4013      	ands	r3, r2
 8003658:	d002      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800365a:	4b43      	ldr	r3, [pc, #268]	; (8003768 <HAL_RCC_GetSysClockFreq+0x13c>)
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800365e:	e07c      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003660:	4b42      	ldr	r3, [pc, #264]	; (800376c <HAL_RCC_GetSysClockFreq+0x140>)
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003664:	e079      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCC_GetSysClockFreq+0x144>)
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800366a:	e076      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	0c9a      	lsrs	r2, r3, #18
 8003670:	230f      	movs	r3, #15
 8003672:	401a      	ands	r2, r3
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_GetSysClockFreq+0x148>)
 8003676:	5c9b      	ldrb	r3, [r3, r2]
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	0d9a      	lsrs	r2, r3, #22
 800367e:	2303      	movs	r3, #3
 8003680:	4013      	ands	r3, r2
 8003682:	3301      	adds	r3, #1
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_GetSysClockFreq+0x138>)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	025b      	lsls	r3, r3, #9
 800368e:	4013      	ands	r3, r2
 8003690:	d01a      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <HAL_RCC_GetSysClockFreq+0x144>)
 800369c:	2300      	movs	r3, #0
 800369e:	69b8      	ldr	r0, [r7, #24]
 80036a0:	69f9      	ldr	r1, [r7, #28]
 80036a2:	f7fc fe2b 	bl	80002fc <__aeabi_lmul>
 80036a6:	0002      	movs	r2, r0
 80036a8:	000b      	movs	r3, r1
 80036aa:	0010      	movs	r0, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f7fc fdff 	bl	80002bc <__aeabi_uldivmod>
 80036be:	0002      	movs	r2, r0
 80036c0:	000b      	movs	r3, r1
 80036c2:	0013      	movs	r3, r2
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
 80036c6:	e037      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_RCC_GetSysClockFreq+0x138>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2210      	movs	r2, #16
 80036ce:	4013      	ands	r3, r2
 80036d0:	d01a      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	4a23      	ldr	r2, [pc, #140]	; (8003768 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036dc:	2300      	movs	r3, #0
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	f7fc fe0b 	bl	80002fc <__aeabi_lmul>
 80036e6:	0002      	movs	r2, r0
 80036e8:	000b      	movs	r3, r1
 80036ea:	0010      	movs	r0, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f7fc fddf 	bl	80002bc <__aeabi_uldivmod>
 80036fe:	0002      	movs	r2, r0
 8003700:	000b      	movs	r3, r1
 8003702:	0013      	movs	r3, r2
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	e017      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	0018      	movs	r0, r3
 800370c:	2300      	movs	r3, #0
 800370e:	0019      	movs	r1, r3
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_RCC_GetSysClockFreq+0x140>)
 8003712:	2300      	movs	r3, #0
 8003714:	f7fc fdf2 	bl	80002fc <__aeabi_lmul>
 8003718:	0002      	movs	r2, r0
 800371a:	000b      	movs	r3, r1
 800371c:	0010      	movs	r0, r2
 800371e:	0019      	movs	r1, r3
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	001c      	movs	r4, r3
 8003724:	2300      	movs	r3, #0
 8003726:	001d      	movs	r5, r3
 8003728:	0022      	movs	r2, r4
 800372a:	002b      	movs	r3, r5
 800372c:	f7fc fdc6 	bl	80002bc <__aeabi_uldivmod>
 8003730:	0002      	movs	r2, r0
 8003732:	000b      	movs	r3, r1
 8003734:	0013      	movs	r3, r2
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800373c:	e00d      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_GetSysClockFreq+0x138>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	0b5b      	lsrs	r3, r3, #13
 8003744:	2207      	movs	r2, #7
 8003746:	4013      	ands	r3, r2
 8003748:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	3301      	adds	r3, #1
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	0212      	lsls	r2, r2, #8
 8003752:	409a      	lsls	r2, r3
 8003754:	0013      	movs	r3, r2
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003758:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b00e      	add	sp, #56	; 0x38
 8003762:	bdb0      	pop	{r4, r5, r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	003d0900 	.word	0x003d0900
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200
 8003774:	080078b0 	.word	0x080078b0

08003778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800377c:	4b02      	ldr	r3, [pc, #8]	; (8003788 <HAL_RCC_GetHCLKFreq+0x10>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	20000010 	.word	0x20000010

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff2 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 8003794:	0001      	movs	r1, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	2207      	movs	r2, #7
 800379e:	4013      	ands	r3, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	40d9      	lsrs	r1, r3
 80037a6:	000b      	movs	r3, r1
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	40021000 	.word	0x40021000
 80037b4:	080078a8 	.word	0x080078a8

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037bc:	f7ff ffdc 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 80037c0:	0001      	movs	r1, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	0adb      	lsrs	r3, r3, #11
 80037c8:	2207      	movs	r2, #7
 80037ca:	4013      	ands	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	40d9      	lsrs	r1, r3
 80037d2:	000b      	movs	r3, r1
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	40021000 	.word	0x40021000
 80037e0:	080078a8 	.word	0x080078a8

080037e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80037ec:	2017      	movs	r0, #23
 80037ee:	183b      	adds	r3, r7, r0
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2220      	movs	r2, #32
 80037fa:	4013      	ands	r3, r2
 80037fc:	d100      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80037fe:	e0c7      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003800:	4b84      	ldr	r3, [pc, #528]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	055b      	lsls	r3, r3, #21
 8003808:	4013      	ands	r3, r2
 800380a:	d109      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	4b81      	ldr	r3, [pc, #516]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800380e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003810:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	0549      	lsls	r1, r1, #21
 8003816:	430a      	orrs	r2, r1
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800381a:	183b      	adds	r3, r7, r0
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d11a      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382c:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b79      	ldr	r3, [pc, #484]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0049      	lsls	r1, r1, #1
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383a:	f7fe ff13 	bl	8002664 <HAL_GetTick>
 800383e:	0003      	movs	r3, r0
 8003840:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	e008      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7fe ff0e 	bl	8002664 <HAL_GetTick>
 8003848:	0002      	movs	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0d9      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d0f0      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003862:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	23c0      	movs	r3, #192	; 0xc0
 8003868:	039b      	lsls	r3, r3, #14
 800386a:	4013      	ands	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	23c0      	movs	r3, #192	; 0xc0
 8003874:	039b      	lsls	r3, r3, #14
 8003876:	4013      	ands	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	429a      	cmp	r2, r3
 800387c:	d013      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	23c0      	movs	r3, #192	; 0xc0
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	401a      	ands	r2, r3
 8003888:	23c0      	movs	r3, #192	; 0xc0
 800388a:	029b      	lsls	r3, r3, #10
 800388c:	429a      	cmp	r2, r3
 800388e:	d10a      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003890:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	029b      	lsls	r3, r3, #10
 8003898:	401a      	ands	r2, r3
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	029b      	lsls	r3, r3, #10
 800389e:	429a      	cmp	r2, r3
 80038a0:	d101      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0b1      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80038a6:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038aa:	23c0      	movs	r3, #192	; 0xc0
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	4013      	ands	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d03b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	23c0      	movs	r3, #192	; 0xc0
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	4013      	ands	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d033      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2220      	movs	r2, #32
 80038ce:	4013      	ands	r3, r2
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80038d2:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	4a51      	ldr	r2, [pc, #324]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038e0:	4b4c      	ldr	r3, [pc, #304]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0309      	lsls	r1, r1, #12
 80038e6:	430a      	orrs	r2, r1
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ea:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038ee:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038f0:	494b      	ldr	r1, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d014      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fe fead 	bl	8002664 <HAL_GetTick>
 800390a:	0003      	movs	r3, r0
 800390c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fe fea8 	bl	8002664 <HAL_GetTick>
 8003914:	0002      	movs	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	4a42      	ldr	r2, [pc, #264]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e072      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d0ef      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	4013      	ands	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	23c0      	movs	r3, #192	; 0xc0
 8003940:	029b      	lsls	r3, r3, #10
 8003942:	401a      	ands	r2, r3
 8003944:	23c0      	movs	r3, #192	; 0xc0
 8003946:	029b      	lsls	r3, r3, #10
 8003948:	429a      	cmp	r2, r3
 800394a:	d10c      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800394c:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003952:	4013      	ands	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	23c0      	movs	r3, #192	; 0xc0
 800395c:	039b      	lsls	r3, r3, #14
 800395e:	401a      	ands	r2, r3
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003968:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	23c0      	movs	r3, #192	; 0xc0
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	401a      	ands	r2, r3
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003976:	430a      	orrs	r2, r1
 8003978:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800397a:	2317      	movs	r3, #23
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003988:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800398a:	4928      	ldr	r1, [pc, #160]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800398c:	400a      	ands	r2, r1
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2202      	movs	r2, #2
 8003996:	4013      	ands	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	220c      	movs	r2, #12
 80039a0:	4393      	bics	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039aa:	430a      	orrs	r2, r1
 80039ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2204      	movs	r2, #4
 80039b4:	4013      	ands	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2208      	movs	r2, #8
 80039d2:	4013      	ands	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039dc:	4013      	ands	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e6:	430a      	orrs	r2, r1
 80039e8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	4013      	ands	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a04:	430a      	orrs	r2, r1
 8003a06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b006      	add	sp, #24
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	fffcffff 	.word	0xfffcffff
 8003a20:	fff7ffff 	.word	0xfff7ffff
 8003a24:	00001388 	.word	0x00001388
 8003a28:	ffcfffff 	.word	0xffcfffff
 8003a2c:	efffffff 	.word	0xefffffff
 8003a30:	fffff3ff 	.word	0xfffff3ff
 8003a34:	ffffcfff 	.word	0xffffcfff
 8003a38:	fff3ffff 	.word	0xfff3ffff

08003a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e032      	b.n	8003ab4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2239      	movs	r2, #57	; 0x39
 8003a52:	5c9b      	ldrb	r3, [r3, r2]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2238      	movs	r2, #56	; 0x38
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fe fc97 	bl	8002398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2239      	movs	r2, #57	; 0x39
 8003a6e:	2102      	movs	r1, #2
 8003a70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	f000 fc65 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	223e      	movs	r2, #62	; 0x3e
 8003a86:	2101      	movs	r1, #1
 8003a88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	223a      	movs	r2, #58	; 0x3a
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	223b      	movs	r2, #59	; 0x3b
 8003a96:	2101      	movs	r1, #1
 8003a98:	5499      	strb	r1, [r3, r2]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	223c      	movs	r2, #60	; 0x3c
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	5499      	strb	r1, [r3, r2]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	223d      	movs	r2, #61	; 0x3d
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2239      	movs	r2, #57	; 0x39
 8003aae:	2101      	movs	r1, #1
 8003ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e032      	b.n	8003b34 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2239      	movs	r2, #57	; 0x39
 8003ad2:	5c9b      	ldrb	r3, [r3, r2]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2238      	movs	r2, #56	; 0x38
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f829 	bl	8003b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2239      	movs	r2, #57	; 0x39
 8003aee:	2102      	movs	r1, #2
 8003af0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	0019      	movs	r1, r3
 8003afc:	0010      	movs	r0, r2
 8003afe:	f000 fc25 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	223e      	movs	r2, #62	; 0x3e
 8003b06:	2101      	movs	r1, #1
 8003b08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	223a      	movs	r2, #58	; 0x3a
 8003b0e:	2101      	movs	r1, #1
 8003b10:	5499      	strb	r1, [r3, r2]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223b      	movs	r2, #59	; 0x3b
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	223c      	movs	r2, #60	; 0x3c
 8003b1e:	2101      	movs	r1, #1
 8003b20:	5499      	strb	r1, [r3, r2]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223d      	movs	r2, #61	; 0x3d
 8003b26:	2101      	movs	r1, #1
 8003b28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2239      	movs	r2, #57	; 0x39
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	230f      	movs	r3, #15
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <HAL_TIM_PWM_Start_IT+0x2a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	223a      	movs	r2, #58	; 0x3a
 8003b68:	5c9b      	ldrb	r3, [r3, r2]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	4193      	sbcs	r3, r2
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e01f      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x6a>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d108      	bne.n	8003b8e <HAL_TIM_PWM_Start_IT+0x42>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	223b      	movs	r2, #59	; 0x3b
 8003b80:	5c9b      	ldrb	r3, [r3, r2]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	4193      	sbcs	r3, r2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e013      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x6a>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d108      	bne.n	8003ba6 <HAL_TIM_PWM_Start_IT+0x5a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	223c      	movs	r2, #60	; 0x3c
 8003b98:	5c9b      	ldrb	r3, [r3, r2]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	4193      	sbcs	r3, r2
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e007      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x6a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	223d      	movs	r2, #61	; 0x3d
 8003baa:	5c9b      	ldrb	r3, [r3, r2]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	4193      	sbcs	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e090      	b.n	8003ce0 <HAL_TIM_PWM_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start_IT+0x82>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	223a      	movs	r2, #58	; 0x3a
 8003bc8:	2102      	movs	r1, #2
 8003bca:	5499      	strb	r1, [r3, r2]
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_PWM_Start_IT+0xaa>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start_IT+0x92>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	223b      	movs	r2, #59	; 0x3b
 8003bd8:	2102      	movs	r1, #2
 8003bda:	5499      	strb	r1, [r3, r2]
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_PWM_Start_IT+0xaa>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start_IT+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	223c      	movs	r2, #60	; 0x3c
 8003be8:	2102      	movs	r1, #2
 8003bea:	5499      	strb	r1, [r3, r2]
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_PWM_Start_IT+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223d      	movs	r2, #61	; 0x3d
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	d02a      	beq.n	8003c52 <HAL_TIM_PWM_Start_IT+0x106>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d830      	bhi.n	8003c64 <HAL_TIM_PWM_Start_IT+0x118>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d01b      	beq.n	8003c40 <HAL_TIM_PWM_Start_IT+0xf4>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d82a      	bhi.n	8003c64 <HAL_TIM_PWM_Start_IT+0x118>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_TIM_PWM_Start_IT+0xd0>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d009      	beq.n	8003c2e <HAL_TIM_PWM_Start_IT+0xe2>
 8003c1a:	e023      	b.n	8003c64 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2102      	movs	r1, #2
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]
      break;
 8003c2c:	e01f      	b.n	8003c6e <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2104      	movs	r1, #4
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	60da      	str	r2, [r3, #12]
      break;
 8003c3e:	e016      	b.n	8003c6e <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]
      break;
 8003c50:	e00d      	b.n	8003c6e <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	60da      	str	r2, [r3, #12]
      break;
 8003c62:	e004      	b.n	8003c6e <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8003c64:	230f      	movs	r3, #15
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
      break;
 8003c6c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d130      	bne.n	8003cda <HAL_TIM_PWM_Start_IT+0x18e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 fd55 	bl	8004730 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	05db      	lsls	r3, r3, #23
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIM_PWM_Start_IT+0x15a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <HAL_TIM_PWM_Start_IT+0x19c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIM_PWM_Start_IT+0x15a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a12      	ldr	r2, [pc, #72]	; (8003cec <HAL_TIM_PWM_Start_IT+0x1a0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d111      	bne.n	8003cca <HAL_TIM_PWM_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2207      	movs	r2, #7
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d010      	beq.n	8003cda <HAL_TIM_PWM_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	e007      	b.n	8003cda <HAL_TIM_PWM_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003cda:	230f      	movs	r3, #15
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b004      	add	sp, #16
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40011400 	.word	0x40011400

08003cf0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d02a      	beq.n	8003d5e <HAL_TIM_PWM_Stop_IT+0x6e>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d830      	bhi.n	8003d70 <HAL_TIM_PWM_Stop_IT+0x80>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d01b      	beq.n	8003d4c <HAL_TIM_PWM_Stop_IT+0x5c>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d82a      	bhi.n	8003d70 <HAL_TIM_PWM_Stop_IT+0x80>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_PWM_Stop_IT+0x38>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d009      	beq.n	8003d3a <HAL_TIM_PWM_Stop_IT+0x4a>
 8003d26:	e023      	b.n	8003d70 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2102      	movs	r1, #2
 8003d34:	438a      	bics	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]
      break;
 8003d38:	e01f      	b.n	8003d7a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2104      	movs	r1, #4
 8003d46:	438a      	bics	r2, r1
 8003d48:	60da      	str	r2, [r3, #12]
      break;
 8003d4a:	e016      	b.n	8003d7a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2108      	movs	r1, #8
 8003d58:	438a      	bics	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]
      break;
 8003d5c:	e00d      	b.n	8003d7a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2110      	movs	r1, #16
 8003d6a:	438a      	bics	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
      break;
 8003d6e:	e004      	b.n	8003d7a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8003d70:	230f      	movs	r3, #15
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
      break;
 8003d78:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003d7a:	230f      	movs	r3, #15
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d130      	bne.n	8003de6 <HAL_TIM_PWM_Stop_IT+0xf6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 fccf 	bl	8004730 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <HAL_TIM_PWM_Stop_IT+0x104>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_PWM_Stop_IT+0xbe>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	438a      	bics	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Stop_IT+0xce>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	223a      	movs	r2, #58	; 0x3a
 8003db8:	2101      	movs	r1, #1
 8003dba:	5499      	strb	r1, [r3, r2]
 8003dbc:	e013      	b.n	8003de6 <HAL_TIM_PWM_Stop_IT+0xf6>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_PWM_Stop_IT+0xde>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	223b      	movs	r2, #59	; 0x3b
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]
 8003dcc:	e00b      	b.n	8003de6 <HAL_TIM_PWM_Stop_IT+0xf6>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_PWM_Stop_IT+0xee>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	223c      	movs	r2, #60	; 0x3c
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5499      	strb	r1, [r3, r2]
 8003ddc:	e003      	b.n	8003de6 <HAL_TIM_PWM_Stop_IT+0xf6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	223d      	movs	r2, #61	; 0x3d
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003de6:	230f      	movs	r3, #15
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	781b      	ldrb	r3, [r3, #0]
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b004      	add	sp, #16
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	00001111 	.word	0x00001111

08003df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2202      	movs	r2, #2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d124      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2202      	movs	r2, #2
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d11d      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2203      	movs	r2, #3
 8003e22:	4252      	negs	r2, r2
 8003e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2203      	movs	r2, #3
 8003e34:	4013      	ands	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 fa6e 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003e40:	e007      	b.n	8003e52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 fa61 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fa6d 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d125      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d11e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2205      	movs	r2, #5
 8003e7a:	4252      	negs	r2, r2
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	23c0      	movs	r3, #192	; 0xc0
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fa41 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003e9a:	e007      	b.n	8003eac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 fa34 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 fa40 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d124      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d11d      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2209      	movs	r2, #9
 8003ed4:	4252      	negs	r2, r2
 8003ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2204      	movs	r2, #4
 8003edc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 fa15 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003ef2:	e007      	b.n	8003f04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f000 fa08 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 fa14 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2210      	movs	r2, #16
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d125      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d11e      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2211      	movs	r2, #17
 8003f2c:	4252      	negs	r2, r2
 8003f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2208      	movs	r2, #8
 8003f34:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	23c0      	movs	r3, #192	; 0xc0
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 f9e8 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e007      	b.n	8003f5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f9db 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 f9e7 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10f      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d108      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2202      	movs	r2, #2
 8003f86:	4252      	negs	r2, r2
 8003f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f9b5 	bl	80042fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2240      	movs	r2, #64	; 0x40
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d108      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2241      	movs	r2, #65	; 0x41
 8003fb4:	4252      	negs	r2, r2
 8003fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f000 f9be 	bl	800433c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2317      	movs	r3, #23
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2238      	movs	r2, #56	; 0x38
 8003fe0:	5c9b      	ldrb	r3, [r3, r2]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x22>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0ad      	b.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2238      	movs	r2, #56	; 0x38
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d100      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x32>
 8003ff8:	e076      	b.n	80040e8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d900      	bls.n	8004002 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004000:	e095      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d04e      	beq.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d900      	bls.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x48>
 800400e:	e08e      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d021      	beq.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x98>
 800401c:	e087      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f000 f9e4 	bl	80043f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2108      	movs	r1, #8
 8004038:	430a      	orrs	r2, r1
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2104      	movs	r1, #4
 8004048:	438a      	bics	r2, r1
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
      break;
 800405e:	e06b      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f000 f9ff 	bl	800446c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	0109      	lsls	r1, r1, #4
 800407c:	430a      	orrs	r2, r1
 800407e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4931      	ldr	r1, [pc, #196]	; (8004150 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800408c:	400a      	ands	r2, r1
 800408e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6999      	ldr	r1, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]
      break;
 80040a4:	e048      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 fa1e 	bl	80044f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2108      	movs	r1, #8
 80040c0:	430a      	orrs	r2, r1
 80040c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2104      	movs	r1, #4
 80040d0:	438a      	bics	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69d9      	ldr	r1, [r3, #28]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	61da      	str	r2, [r3, #28]
      break;
 80040e6:	e027      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fa3d 	bl	8004570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0109      	lsls	r1, r1, #4
 8004104:	430a      	orrs	r2, r1
 8004106:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	490f      	ldr	r1, [pc, #60]	; (8004150 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004114:	400a      	ands	r2, r1
 8004116:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69d9      	ldr	r1, [r3, #28]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	61da      	str	r2, [r3, #28]
      break;
 800412c:	e004      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800412e:	2317      	movs	r3, #23
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
      break;
 8004136:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2238      	movs	r2, #56	; 0x38
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

  return status;
 8004140:	2317      	movs	r3, #23
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b006      	add	sp, #24
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	fffffbff 	.word	0xfffffbff

08004154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	230f      	movs	r3, #15
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2238      	movs	r2, #56	; 0x38
 800416a:	5c9b      	ldrb	r3, [r3, r2]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIM_ConfigClockSource+0x20>
 8004170:	2302      	movs	r3, #2
 8004172:	e0bc      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x19a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2238      	movs	r2, #56	; 0x38
 8004178:	2101      	movs	r1, #1
 800417a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2239      	movs	r2, #57	; 0x39
 8004180:	2102      	movs	r1, #2
 8004182:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2277      	movs	r2, #119	; 0x77
 8004190:	4393      	bics	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	0192      	lsls	r2, r2, #6
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0xde>
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	0192      	lsls	r2, r2, #6
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d900      	bls.n	80041ba <HAL_TIM_ConfigClockSource+0x66>
 80041b8:	e088      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	0152      	lsls	r2, r2, #5
 80041be:	4293      	cmp	r3, r2
 80041c0:	d100      	bne.n	80041c4 <HAL_TIM_ConfigClockSource+0x70>
 80041c2:	e088      	b.n	80042d6 <HAL_TIM_ConfigClockSource+0x182>
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	0152      	lsls	r2, r2, #5
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d900      	bls.n	80041ce <HAL_TIM_ConfigClockSource+0x7a>
 80041cc:	e07e      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041ce:	2b70      	cmp	r3, #112	; 0x70
 80041d0:	d018      	beq.n	8004204 <HAL_TIM_ConfigClockSource+0xb0>
 80041d2:	d900      	bls.n	80041d6 <HAL_TIM_ConfigClockSource+0x82>
 80041d4:	e07a      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041d6:	2b60      	cmp	r3, #96	; 0x60
 80041d8:	d04f      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x126>
 80041da:	d900      	bls.n	80041de <HAL_TIM_ConfigClockSource+0x8a>
 80041dc:	e076      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041de:	2b50      	cmp	r3, #80	; 0x50
 80041e0:	d03b      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x106>
 80041e2:	d900      	bls.n	80041e6 <HAL_TIM_ConfigClockSource+0x92>
 80041e4:	e072      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d057      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x146>
 80041ea:	d900      	bls.n	80041ee <HAL_TIM_ConfigClockSource+0x9a>
 80041ec:	e06e      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041ee:	2b30      	cmp	r3, #48	; 0x30
 80041f0:	d063      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x166>
 80041f2:	d86b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d060      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x166>
 80041f8:	d868      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d05d      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x166>
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d05b      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x166>
 8004202:	e063      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6899      	ldr	r1, [r3, #8]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f000 fa6c 	bl	80046f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2277      	movs	r2, #119	; 0x77
 8004224:	4313      	orrs	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	609a      	str	r2, [r3, #8]
      break;
 8004230:	e052      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6899      	ldr	r1, [r3, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f000 fa55 	bl	80046f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	01c9      	lsls	r1, r1, #7
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
      break;
 8004258:	e03e      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	001a      	movs	r2, r3
 8004268:	f000 f9c8 	bl	80045fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2150      	movs	r1, #80	; 0x50
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fa22 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 8004278:	e02e      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	001a      	movs	r2, r3
 8004288:	f000 f9e6 	bl	8004658 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2160      	movs	r1, #96	; 0x60
 8004292:	0018      	movs	r0, r3
 8004294:	f000 fa12 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 8004298:	e01e      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	001a      	movs	r2, r3
 80042a8:	f000 f9a8 	bl	80045fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	0018      	movs	r0, r3
 80042b4:	f000 fa02 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 80042b8:	e00e      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0019      	movs	r1, r3
 80042c4:	0010      	movs	r0, r2
 80042c6:	f000 f9f9 	bl	80046bc <TIM_ITRx_SetConfig>
      break;
 80042ca:	e005      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
      break;
 80042d4:	e000      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80042d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2239      	movs	r2, #57	; 0x39
 80042dc:	2101      	movs	r1, #1
 80042de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2238      	movs	r2, #56	; 0x38
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

  return status;
 80042e8:	230f      	movs	r3, #15
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	ffff00ff 	.word	0xffff00ff

080042fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	05db      	lsls	r3, r3, #23
 8004362:	429a      	cmp	r2, r3
 8004364:	d007      	beq.n	8004376 <TIM_Base_SetConfig+0x2a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <TIM_Base_SetConfig+0x9c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_Base_SetConfig+0x2a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <TIM_Base_SetConfig+0xa0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2270      	movs	r2, #112	; 0x70
 800437a:	4393      	bics	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	05db      	lsls	r3, r3, #23
 800438e:	429a      	cmp	r2, r3
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0x56>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <TIM_Base_SetConfig+0x9c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0x56>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <TIM_Base_SetConfig+0xa0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <TIM_Base_SetConfig+0xa4>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	4393      	bics	r3, r2
 80043ba:	001a      	movs	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	615a      	str	r2, [r3, #20]
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b004      	add	sp, #16
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40010800 	.word	0x40010800
 80043ec:	40011400 	.word	0x40011400
 80043f0:	fffffcff 	.word	0xfffffcff

080043f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	2201      	movs	r2, #1
 8004404:	4393      	bics	r3, r2
 8004406:	001a      	movs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2270      	movs	r2, #112	; 0x70
 8004422:	4393      	bics	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2203      	movs	r2, #3
 800442a:	4393      	bics	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2202      	movs	r2, #2
 800443c:	4393      	bics	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b006      	add	sp, #24
 800446a:	bd80      	pop	{r7, pc}

0800446c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	2210      	movs	r2, #16
 800447c:	4393      	bics	r3, r2
 800447e:	001a      	movs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <TIM_OC2_SetConfig+0x7c>)
 800449a:	4013      	ands	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a12      	ldr	r2, [pc, #72]	; (80044ec <TIM_OC2_SetConfig+0x80>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2220      	movs	r2, #32
 80044b6:	4393      	bics	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b006      	add	sp, #24
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	ffff8fff 	.word	0xffff8fff
 80044ec:	fffffcff 	.word	0xfffffcff

080044f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <TIM_OC3_SetConfig+0x78>)
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2270      	movs	r2, #112	; 0x70
 800451c:	4393      	bics	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2203      	movs	r2, #3
 8004524:	4393      	bics	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <TIM_OC3_SetConfig+0x7c>)
 8004536:	4013      	ands	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}
 8004568:	fffffeff 	.word	0xfffffeff
 800456c:	fffffdff 	.word	0xfffffdff

08004570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <TIM_OC4_SetConfig+0x7c>)
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <TIM_OC4_SetConfig+0x80>)
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <TIM_OC4_SetConfig+0x84>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <TIM_OC4_SetConfig+0x88>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b006      	add	sp, #24
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	ffffefff 	.word	0xffffefff
 80045f0:	ffff8fff 	.word	0xffff8fff
 80045f4:	fffffcff 	.word	0xfffffcff
 80045f8:	ffffdfff 	.word	0xffffdfff

080045fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	2201      	movs	r2, #1
 8004614:	4393      	bics	r3, r2
 8004616:	001a      	movs	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	22f0      	movs	r2, #240	; 0xf0
 8004626:	4393      	bics	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	220a      	movs	r2, #10
 8004638:	4393      	bics	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	621a      	str	r2, [r3, #32]
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}

08004658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	2210      	movs	r2, #16
 800466a:	4393      	bics	r3, r2
 800466c:	001a      	movs	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <TIM_TI2_ConfigInputStage+0x60>)
 8004682:	4013      	ands	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	22a0      	movs	r2, #160	; 0xa0
 8004694:	4393      	bics	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b006      	add	sp, #24
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	ffff0fff 	.word	0xffff0fff

080046bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2270      	movs	r2, #112	; 0x70
 80046d0:	4393      	bics	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	2207      	movs	r2, #7
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	609a      	str	r2, [r3, #8]
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <TIM_ETR_SetConfig+0x3c>)
 8004708:	4013      	ands	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	431a      	orrs	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b006      	add	sp, #24
 800472a:	bd80      	pop	{r7, pc}
 800472c:	ffff00ff 	.word	0xffff00ff

08004730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	221f      	movs	r2, #31
 8004740:	4013      	ands	r3, r2
 8004742:	2201      	movs	r2, #1
 8004744:	409a      	lsls	r2, r3
 8004746:	0013      	movs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	43d2      	mvns	r2, r2
 8004752:	401a      	ands	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	211f      	movs	r1, #31
 8004760:	400b      	ands	r3, r1
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4099      	lsls	r1, r3
 8004766:	000b      	movs	r3, r1
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b006      	add	sp, #24
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2238      	movs	r2, #56	; 0x38
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800478c:	2302      	movs	r3, #2
 800478e:	e042      	b.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2238      	movs	r2, #56	; 0x38
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2239      	movs	r2, #57	; 0x39
 800479c:	2102      	movs	r1, #2
 800479e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2270      	movs	r2, #112	; 0x70
 80047b4:	4393      	bics	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	05db      	lsls	r3, r3, #23
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d009      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a11      	ldr	r2, [pc, #68]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	4393      	bics	r3, r2
 80047f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2239      	movs	r2, #57	; 0x39
 8004808:	2101      	movs	r1, #1
 800480a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2238      	movs	r2, #56	; 0x38
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b004      	add	sp, #16
 800481c:	bd80      	pop	{r7, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	40010800 	.word	0x40010800
 8004824:	40011400 	.word	0x40011400

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e044      	b.n	80048c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2278      	movs	r2, #120	; 0x78
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0018      	movs	r0, r3
 800484e:	f7fd fe2d 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2224      	movs	r2, #36	; 0x24
 8004856:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2101      	movs	r1, #1
 8004864:	438a      	bics	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fc2c 	bl	80050c8 <UART_SetConfig>
 8004870:	0003      	movs	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e024      	b.n	80048c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f000 fe69 	bl	800555c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	490d      	ldr	r1, [pc, #52]	; (80048cc <HAL_UART_Init+0xa4>)
 8004896:	400a      	ands	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	212a      	movs	r1, #42	; 0x2a
 80048a6:	438a      	bics	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 ff01 	bl	80056c4 <UART_CheckIdleState>
 80048c2:	0003      	movs	r3, r0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	ffffb7ff 	.word	0xffffb7ff

080048d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d000      	beq.n	80048ea <HAL_UART_Transmit+0x1a>
 80048e8:	e08c      	b.n	8004a04 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_UART_Transmit+0x28>
 80048f0:	1dbb      	adds	r3, r7, #6
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e084      	b.n	8004a06 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	015b      	lsls	r3, r3, #5
 8004904:	429a      	cmp	r2, r3
 8004906:	d109      	bne.n	800491c <HAL_UART_Transmit+0x4c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2201      	movs	r2, #1
 8004914:	4013      	ands	r3, r2
 8004916:	d001      	beq.n	800491c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e074      	b.n	8004a06 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2284      	movs	r2, #132	; 0x84
 8004920:	2100      	movs	r1, #0
 8004922:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492a:	f7fd fe9b 	bl	8002664 <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1dba      	adds	r2, r7, #6
 8004936:	2150      	movs	r1, #80	; 0x50
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1dba      	adds	r2, r7, #6
 8004940:	2152      	movs	r1, #82	; 0x52
 8004942:	8812      	ldrh	r2, [r2, #0]
 8004944:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	015b      	lsls	r3, r3, #5
 800494e:	429a      	cmp	r2, r3
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x94>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800496c:	e02f      	b.n	80049ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	0013      	movs	r3, r2
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	f000 ff4a 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d004      	beq.n	800498e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e03b      	b.n	8004a06 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	001a      	movs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	05d2      	lsls	r2, r2, #23
 80049a0:	0dd2      	lsrs	r2, r2, #23
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	3302      	adds	r3, #2
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e007      	b.n	80049bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3301      	adds	r3, #1
 80049ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2252      	movs	r2, #82	; 0x52
 80049c0:	5a9b      	ldrh	r3, [r3, r2]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b299      	uxth	r1, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2252      	movs	r2, #82	; 0x52
 80049cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2252      	movs	r2, #82	; 0x52
 80049d2:	5a9b      	ldrh	r3, [r3, r2]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1c9      	bne.n	800496e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	0013      	movs	r3, r2
 80049e4:	2200      	movs	r2, #0
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	f000 ff14 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d004      	beq.n	80049fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e005      	b.n	8004a06 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
  }
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b008      	add	sp, #32
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	1dbb      	adds	r3, r7, #6
 8004a1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	589b      	ldr	r3, [r3, r2]
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d14a      	bne.n	8004abe <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_UART_Receive_IT+0x26>
 8004a2e:	1dbb      	adds	r3, r7, #6
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e042      	b.n	8004ac0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	015b      	lsls	r3, r3, #5
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d109      	bne.n	8004a5a <HAL_UART_Receive_IT+0x4a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2201      	movs	r2, #1
 8004a52:	4013      	ands	r3, r2
 8004a54:	d001      	beq.n	8004a5a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e032      	b.n	8004ac0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <HAL_UART_Receive_IT+0xb8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d020      	beq.n	8004aac <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	4013      	ands	r3, r2
 8004a76:	d019      	beq.n	8004aac <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a78:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a7e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	2301      	movs	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	04c9      	lsls	r1, r1, #19
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aac:	1dbb      	adds	r3, r7, #6
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f000 ff17 	bl	80058e8 <UART_Start_Receive_IT>
 8004aba:	0003      	movs	r3, r0
 8004abc:	e000      	b.n	8004ac0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b008      	add	sp, #32
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40004800 	.word	0x40004800

08004acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b0ab      	sub	sp, #172	; 0xac
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	22a4      	movs	r2, #164	; 0xa4
 8004adc:	18b9      	adds	r1, r7, r2
 8004ade:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	20a0      	movs	r0, #160	; 0xa0
 8004ae8:	1839      	adds	r1, r7, r0
 8004aea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	219c      	movs	r1, #156	; 0x9c
 8004af4:	1879      	adds	r1, r7, r1
 8004af6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004af8:	0011      	movs	r1, r2
 8004afa:	18bb      	adds	r3, r7, r2
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a99      	ldr	r2, [pc, #612]	; (8004d64 <HAL_UART_IRQHandler+0x298>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	2298      	movs	r2, #152	; 0x98
 8004b04:	18bc      	adds	r4, r7, r2
 8004b06:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004b08:	18bb      	adds	r3, r7, r2
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d114      	bne.n	8004b3a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2220      	movs	r2, #32
 8004b16:	4013      	ands	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b1a:	183b      	adds	r3, r7, r0
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	4013      	ands	r3, r2
 8004b22:	d00a      	beq.n	8004b3a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d100      	bne.n	8004b2e <HAL_UART_IRQHandler+0x62>
 8004b2c:	e2a0      	b.n	8005070 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	0010      	movs	r0, r2
 8004b36:	4798      	blx	r3
      }
      return;
 8004b38:	e29a      	b.n	8005070 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b3a:	2398      	movs	r3, #152	; 0x98
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d100      	bne.n	8004b46 <HAL_UART_IRQHandler+0x7a>
 8004b44:	e114      	b.n	8004d70 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b46:	239c      	movs	r3, #156	; 0x9c
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b52:	23a0      	movs	r3, #160	; 0xa0
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <HAL_UART_IRQHandler+0x29c>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d100      	bne.n	8004b60 <HAL_UART_IRQHandler+0x94>
 8004b5e:	e107      	b.n	8004d70 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b60:	23a4      	movs	r3, #164	; 0xa4
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d012      	beq.n	8004b92 <HAL_UART_IRQHandler+0xc6>
 8004b6c:	23a0      	movs	r3, #160	; 0xa0
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2284      	movs	r2, #132	; 0x84
 8004b86:	589b      	ldr	r3, [r3, r2]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2184      	movs	r1, #132	; 0x84
 8004b90:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b92:	23a4      	movs	r3, #164	; 0xa4
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d011      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xf6>
 8004b9e:	239c      	movs	r3, #156	; 0x9c
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2284      	movs	r2, #132	; 0x84
 8004bb6:	589b      	ldr	r3, [r3, r2]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2184      	movs	r1, #132	; 0x84
 8004bc0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc2:	23a4      	movs	r3, #164	; 0xa4
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d011      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x126>
 8004bce:	239c      	movs	r3, #156	; 0x9c
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2204      	movs	r2, #4
 8004be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2284      	movs	r2, #132	; 0x84
 8004be6:	589b      	ldr	r3, [r3, r2]
 8004be8:	2202      	movs	r2, #2
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2184      	movs	r1, #132	; 0x84
 8004bf0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bf2:	23a4      	movs	r3, #164	; 0xa4
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d017      	beq.n	8004c2e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bfe:	23a0      	movs	r3, #160	; 0xa0
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2220      	movs	r2, #32
 8004c06:	4013      	ands	r3, r2
 8004c08:	d105      	bne.n	8004c16 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c0a:	239c      	movs	r3, #156	; 0x9c
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c14:	d00b      	beq.n	8004c2e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2284      	movs	r2, #132	; 0x84
 8004c22:	589b      	ldr	r3, [r3, r2]
 8004c24:	2208      	movs	r2, #8
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2184      	movs	r1, #132	; 0x84
 8004c2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c2e:	23a4      	movs	r3, #164	; 0xa4
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_UART_IRQHandler+0x198>
 8004c3c:	23a0      	movs	r3, #160	; 0xa0
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	04db      	lsls	r3, r3, #19
 8004c46:	4013      	ands	r3, r2
 8004c48:	d00c      	beq.n	8004c64 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2280      	movs	r2, #128	; 0x80
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2284      	movs	r2, #132	; 0x84
 8004c58:	589b      	ldr	r3, [r3, r2]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2184      	movs	r1, #132	; 0x84
 8004c62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2284      	movs	r2, #132	; 0x84
 8004c68:	589b      	ldr	r3, [r3, r2]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d100      	bne.n	8004c70 <HAL_UART_IRQHandler+0x1a4>
 8004c6e:	e201      	b.n	8005074 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c70:	23a4      	movs	r3, #164	; 0xa4
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2220      	movs	r2, #32
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c7c:	23a0      	movs	r3, #160	; 0xa0
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2220      	movs	r2, #32
 8004c84:	4013      	ands	r3, r2
 8004c86:	d008      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	0010      	movs	r0, r2
 8004c98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2284      	movs	r2, #132	; 0x84
 8004c9e:	589b      	ldr	r3, [r3, r2]
 8004ca0:	2194      	movs	r1, #148	; 0x94
 8004ca2:	187a      	adds	r2, r7, r1
 8004ca4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d004      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2228      	movs	r2, #40	; 0x28
 8004cba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cbc:	d047      	beq.n	8004d4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f000 fedb 	bl	8005a7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2240      	movs	r2, #64	; 0x40
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d137      	bne.n	8004d44 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cdc:	2090      	movs	r0, #144	; 0x90
 8004cde:	183a      	adds	r2, r7, r0
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2140      	movs	r1, #64	; 0x40
 8004cfa:	438a      	bics	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	183b      	adds	r3, r7, r0
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <HAL_UART_IRQHandler+0x2a0>)
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d20:	0018      	movs	r0, r3
 8004d22:	f7fd fdeb 	bl	80028fc <HAL_DMA_Abort_IT>
 8004d26:	1e03      	subs	r3, r0, #0
 8004d28:	d01a      	beq.n	8004d60 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	0018      	movs	r0, r3
 8004d36:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	e012      	b.n	8004d60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 f9af 	bl	80050a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d42:	e00d      	b.n	8004d60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f9aa 	bl	80050a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e008      	b.n	8004d60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 f9a5 	bl	80050a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2284      	movs	r2, #132	; 0x84
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004d5e:	e189      	b.n	8005074 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	46c0      	nop			; (mov r8, r8)
    return;
 8004d62:	e187      	b.n	8005074 <HAL_UART_IRQHandler+0x5a8>
 8004d64:	0000080f 	.word	0x0000080f
 8004d68:	04000120 	.word	0x04000120
 8004d6c:	08005b45 	.word	0x08005b45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d000      	beq.n	8004d7a <HAL_UART_IRQHandler+0x2ae>
 8004d78:	e13b      	b.n	8004ff2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d7a:	23a4      	movs	r3, #164	; 0xa4
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	4013      	ands	r3, r2
 8004d84:	d100      	bne.n	8004d88 <HAL_UART_IRQHandler+0x2bc>
 8004d86:	e134      	b.n	8004ff2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d88:	23a0      	movs	r3, #160	; 0xa0
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	4013      	ands	r3, r2
 8004d92:	d100      	bne.n	8004d96 <HAL_UART_IRQHandler+0x2ca>
 8004d94:	e12d      	b.n	8004ff2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2240      	movs	r2, #64	; 0x40
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d000      	beq.n	8004dae <HAL_UART_IRQHandler+0x2e2>
 8004dac:	e0a1      	b.n	8004ef2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	217e      	movs	r1, #126	; 0x7e
 8004db8:	187b      	adds	r3, r7, r1
 8004dba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d100      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2fa>
 8004dc4:	e158      	b.n	8005078 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2258      	movs	r2, #88	; 0x58
 8004dca:	5a9b      	ldrh	r3, [r3, r2]
 8004dcc:	187a      	adds	r2, r7, r1
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d300      	bcc.n	8004dd6 <HAL_UART_IRQHandler+0x30a>
 8004dd4:	e150      	b.n	8005078 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	187a      	adds	r2, r7, r1
 8004dda:	215a      	movs	r1, #90	; 0x5a
 8004ddc:	8812      	ldrh	r2, [r2, #0]
 8004dde:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2220      	movs	r2, #32
 8004dea:	4013      	ands	r3, r2
 8004dec:	d16f      	bne.n	8004ece <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dee:	f3ef 8310 	mrs	r3, PRIMASK
 8004df2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004df8:	2301      	movs	r3, #1
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	499e      	ldr	r1, [pc, #632]	; (8005088 <HAL_UART_IRQHandler+0x5bc>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	f383 8810 	msr	PRIMASK, r3
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	677b      	str	r3, [r7, #116]	; 0x74
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2101      	movs	r1, #1
 8004e42:	438a      	bics	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2140      	movs	r1, #64	; 0x40
 8004e74:	438a      	bics	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	2120      	movs	r1, #32
 8004e8a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e92:	f3ef 8310 	mrs	r3, PRIMASK
 8004e96:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea2:	f383 8810 	msr	PRIMASK, r3
}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	f383 8810 	msr	PRIMASK, r3
}
 8004ec2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fd fcd7 	bl	800287c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2258      	movs	r2, #88	; 0x58
 8004ed8:	5a9a      	ldrh	r2, [r3, r2]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	215a      	movs	r1, #90	; 0x5a
 8004ede:	5a5b      	ldrh	r3, [r3, r1]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0011      	movs	r1, r2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 f8e0 	bl	80050b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ef0:	e0c2      	b.n	8005078 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2258      	movs	r2, #88	; 0x58
 8004ef6:	5a99      	ldrh	r1, [r3, r2]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	225a      	movs	r2, #90	; 0x5a
 8004efc:	5a9b      	ldrh	r3, [r3, r2]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	208e      	movs	r0, #142	; 0x8e
 8004f02:	183b      	adds	r3, r7, r0
 8004f04:	1a8a      	subs	r2, r1, r2
 8004f06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	225a      	movs	r2, #90	; 0x5a
 8004f0c:	5a9b      	ldrh	r3, [r3, r2]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d100      	bne.n	8004f16 <HAL_UART_IRQHandler+0x44a>
 8004f14:	e0b2      	b.n	800507c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004f16:	183b      	adds	r3, r7, r0
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d100      	bne.n	8004f20 <HAL_UART_IRQHandler+0x454>
 8004f1e:	e0ad      	b.n	800507c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f20:	f3ef 8310 	mrs	r3, PRIMASK
 8004f24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f28:	2488      	movs	r4, #136	; 0x88
 8004f2a:	193a      	adds	r2, r7, r4
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	2301      	movs	r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4951      	ldr	r1, [pc, #324]	; (800508c <HAL_UART_IRQHandler+0x5c0>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	193b      	adds	r3, r7, r4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f383 8810 	msr	PRIMASK, r3
}
 8004f56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f58:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	2484      	movs	r4, #132	; 0x84
 8004f62:	193a      	adds	r2, r7, r4
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	2301      	movs	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f383 8810 	msr	PRIMASK, r3
}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	438a      	bics	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	2120      	movs	r1, #32
 8004f96:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fac:	2480      	movs	r4, #128	; 0x80
 8004fae:	193a      	adds	r2, r7, r4
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	f383 8810 	msr	PRIMASK, r3
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2110      	movs	r1, #16
 8004fca:	438a      	bics	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	f383 8810 	msr	PRIMASK, r3
}
 8004fda:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fe2:	183b      	adds	r3, r7, r0
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0011      	movs	r1, r2
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 f860 	bl	80050b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ff0:	e044      	b.n	800507c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ff2:	23a4      	movs	r3, #164	; 0xa4
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	035b      	lsls	r3, r3, #13
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d010      	beq.n	8005022 <HAL_UART_IRQHandler+0x556>
 8005000:	239c      	movs	r3, #156	; 0x9c
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	03db      	lsls	r3, r3, #15
 800500a:	4013      	ands	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	0352      	lsls	r2, r2, #13
 8005016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	0018      	movs	r0, r3
 800501c:	f000 ff98 	bl	8005f50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005020:	e02f      	b.n	8005082 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005022:	23a4      	movs	r3, #164	; 0xa4
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	4013      	ands	r3, r2
 800502c:	d00f      	beq.n	800504e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800502e:	23a0      	movs	r3, #160	; 0xa0
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	4013      	ands	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01e      	beq.n	8005080 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	0010      	movs	r0, r2
 800504a:	4798      	blx	r3
    }
    return;
 800504c:	e018      	b.n	8005080 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800504e:	23a4      	movs	r3, #164	; 0xa4
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	4013      	ands	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_UART_IRQHandler+0x5b6>
 800505a:	23a0      	movs	r3, #160	; 0xa0
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2240      	movs	r2, #64	; 0x40
 8005062:	4013      	ands	r3, r2
 8005064:	d00d      	beq.n	8005082 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f000 fd82 	bl	8005b72 <UART_EndTransmit_IT>
    return;
 800506e:	e008      	b.n	8005082 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	e006      	b.n	8005082 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	e004      	b.n	8005082 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	e002      	b.n	8005082 <HAL_UART_IRQHandler+0x5b6>
      return;
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	e000      	b.n	8005082 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005080:	46c0      	nop			; (mov r8, r8)
  }

}
 8005082:	46bd      	mov	sp, r7
 8005084:	b02b      	add	sp, #172	; 0xac
 8005086:	bd90      	pop	{r4, r7, pc}
 8005088:	fffffeff 	.word	0xfffffeff
 800508c:	fffffedf 	.word	0xfffffedf

08005090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	000a      	movs	r2, r1
 80050ba:	1cbb      	adds	r3, r7, #2
 80050bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b002      	add	sp, #8
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b5b0      	push	{r4, r5, r7, lr}
 80050ca:	b08e      	sub	sp, #56	; 0x38
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d0:	231a      	movs	r3, #26
 80050d2:	2218      	movs	r2, #24
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	19db      	adds	r3, r3, r7
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4ab4      	ldr	r2, [pc, #720]	; (80053cc <UART_SetConfig+0x304>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4aaf      	ldr	r2, [pc, #700]	; (80053d0 <UART_SetConfig+0x308>)
 8005112:	4013      	ands	r3, r2
 8005114:	0019      	movs	r1, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4aa9      	ldr	r2, [pc, #676]	; (80053d4 <UART_SetConfig+0x30c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005138:	4313      	orrs	r3, r2
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4aa5      	ldr	r2, [pc, #660]	; (80053d8 <UART_SetConfig+0x310>)
 8005144:	4013      	ands	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4aa1      	ldr	r2, [pc, #644]	; (80053dc <UART_SetConfig+0x314>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d131      	bne.n	80051c0 <UART_SetConfig+0xf8>
 800515c:	4ba0      	ldr	r3, [pc, #640]	; (80053e0 <UART_SetConfig+0x318>)
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	220c      	movs	r2, #12
 8005162:	4013      	ands	r3, r2
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d01d      	beq.n	80051a4 <UART_SetConfig+0xdc>
 8005168:	d823      	bhi.n	80051b2 <UART_SetConfig+0xea>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d00c      	beq.n	8005188 <UART_SetConfig+0xc0>
 800516e:	d820      	bhi.n	80051b2 <UART_SetConfig+0xea>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <UART_SetConfig+0xb2>
 8005174:	2b04      	cmp	r3, #4
 8005176:	d00e      	beq.n	8005196 <UART_SetConfig+0xce>
 8005178:	e01b      	b.n	80051b2 <UART_SetConfig+0xea>
 800517a:	231b      	movs	r3, #27
 800517c:	2218      	movs	r2, #24
 800517e:	189b      	adds	r3, r3, r2
 8005180:	19db      	adds	r3, r3, r7
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e065      	b.n	8005254 <UART_SetConfig+0x18c>
 8005188:	231b      	movs	r3, #27
 800518a:	2218      	movs	r2, #24
 800518c:	189b      	adds	r3, r3, r2
 800518e:	19db      	adds	r3, r3, r7
 8005190:	2202      	movs	r2, #2
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e05e      	b.n	8005254 <UART_SetConfig+0x18c>
 8005196:	231b      	movs	r3, #27
 8005198:	2218      	movs	r2, #24
 800519a:	189b      	adds	r3, r3, r2
 800519c:	19db      	adds	r3, r3, r7
 800519e:	2204      	movs	r2, #4
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e057      	b.n	8005254 <UART_SetConfig+0x18c>
 80051a4:	231b      	movs	r3, #27
 80051a6:	2218      	movs	r2, #24
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	2208      	movs	r2, #8
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e050      	b.n	8005254 <UART_SetConfig+0x18c>
 80051b2:	231b      	movs	r3, #27
 80051b4:	2218      	movs	r2, #24
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	19db      	adds	r3, r3, r7
 80051ba:	2210      	movs	r2, #16
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e049      	b.n	8005254 <UART_SetConfig+0x18c>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a83      	ldr	r2, [pc, #524]	; (80053d4 <UART_SetConfig+0x30c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d13e      	bne.n	8005248 <UART_SetConfig+0x180>
 80051ca:	4b85      	ldr	r3, [pc, #532]	; (80053e0 <UART_SetConfig+0x318>)
 80051cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ce:	23c0      	movs	r3, #192	; 0xc0
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	4013      	ands	r3, r2
 80051d4:	22c0      	movs	r2, #192	; 0xc0
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	4293      	cmp	r3, r2
 80051da:	d027      	beq.n	800522c <UART_SetConfig+0x164>
 80051dc:	22c0      	movs	r2, #192	; 0xc0
 80051de:	0112      	lsls	r2, r2, #4
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d82a      	bhi.n	800523a <UART_SetConfig+0x172>
 80051e4:	2280      	movs	r2, #128	; 0x80
 80051e6:	0112      	lsls	r2, r2, #4
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d011      	beq.n	8005210 <UART_SetConfig+0x148>
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d822      	bhi.n	800523a <UART_SetConfig+0x172>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <UART_SetConfig+0x13a>
 80051f8:	2280      	movs	r2, #128	; 0x80
 80051fa:	00d2      	lsls	r2, r2, #3
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <UART_SetConfig+0x156>
 8005200:	e01b      	b.n	800523a <UART_SetConfig+0x172>
 8005202:	231b      	movs	r3, #27
 8005204:	2218      	movs	r2, #24
 8005206:	189b      	adds	r3, r3, r2
 8005208:	19db      	adds	r3, r3, r7
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e021      	b.n	8005254 <UART_SetConfig+0x18c>
 8005210:	231b      	movs	r3, #27
 8005212:	2218      	movs	r2, #24
 8005214:	189b      	adds	r3, r3, r2
 8005216:	19db      	adds	r3, r3, r7
 8005218:	2202      	movs	r2, #2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e01a      	b.n	8005254 <UART_SetConfig+0x18c>
 800521e:	231b      	movs	r3, #27
 8005220:	2218      	movs	r2, #24
 8005222:	189b      	adds	r3, r3, r2
 8005224:	19db      	adds	r3, r3, r7
 8005226:	2204      	movs	r2, #4
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e013      	b.n	8005254 <UART_SetConfig+0x18c>
 800522c:	231b      	movs	r3, #27
 800522e:	2218      	movs	r2, #24
 8005230:	189b      	adds	r3, r3, r2
 8005232:	19db      	adds	r3, r3, r7
 8005234:	2208      	movs	r2, #8
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e00c      	b.n	8005254 <UART_SetConfig+0x18c>
 800523a:	231b      	movs	r3, #27
 800523c:	2218      	movs	r2, #24
 800523e:	189b      	adds	r3, r3, r2
 8005240:	19db      	adds	r3, r3, r7
 8005242:	2210      	movs	r2, #16
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e005      	b.n	8005254 <UART_SetConfig+0x18c>
 8005248:	231b      	movs	r3, #27
 800524a:	2218      	movs	r2, #24
 800524c:	189b      	adds	r3, r3, r2
 800524e:	19db      	adds	r3, r3, r7
 8005250:	2210      	movs	r2, #16
 8005252:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a5e      	ldr	r2, [pc, #376]	; (80053d4 <UART_SetConfig+0x30c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d000      	beq.n	8005260 <UART_SetConfig+0x198>
 800525e:	e084      	b.n	800536a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005260:	231b      	movs	r3, #27
 8005262:	2218      	movs	r2, #24
 8005264:	189b      	adds	r3, r3, r2
 8005266:	19db      	adds	r3, r3, r7
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d01d      	beq.n	80052aa <UART_SetConfig+0x1e2>
 800526e:	dc20      	bgt.n	80052b2 <UART_SetConfig+0x1ea>
 8005270:	2b04      	cmp	r3, #4
 8005272:	d015      	beq.n	80052a0 <UART_SetConfig+0x1d8>
 8005274:	dc1d      	bgt.n	80052b2 <UART_SetConfig+0x1ea>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <UART_SetConfig+0x1b8>
 800527a:	2b02      	cmp	r3, #2
 800527c:	d005      	beq.n	800528a <UART_SetConfig+0x1c2>
 800527e:	e018      	b.n	80052b2 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fe fa84 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8005284:	0003      	movs	r3, r0
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005288:	e01c      	b.n	80052c4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800528a:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <UART_SetConfig+0x318>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2210      	movs	r2, #16
 8005290:	4013      	ands	r3, r2
 8005292:	d002      	beq.n	800529a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005294:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <UART_SetConfig+0x31c>)
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005298:	e014      	b.n	80052c4 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800529a:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <UART_SetConfig+0x320>)
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800529e:	e011      	b.n	80052c4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a0:	f7fe f9c4 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80052a4:	0003      	movs	r3, r0
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052a8:	e00c      	b.n	80052c4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	2380      	movs	r3, #128	; 0x80
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b0:	e008      	b.n	80052c4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052b6:	231a      	movs	r3, #26
 80052b8:	2218      	movs	r2, #24
 80052ba:	189b      	adds	r3, r3, r2
 80052bc:	19db      	adds	r3, r3, r7
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
        break;
 80052c2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d100      	bne.n	80052cc <UART_SetConfig+0x204>
 80052ca:	e12f      	b.n	800552c <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	0013      	movs	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	189b      	adds	r3, r3, r2
 80052d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d8:	429a      	cmp	r2, r3
 80052da:	d305      	bcc.n	80052e8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d906      	bls.n	80052f6 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80052e8:	231a      	movs	r3, #26
 80052ea:	2218      	movs	r2, #24
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	19db      	adds	r3, r3, r7
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e11a      	b.n	800552c <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	000b      	movs	r3, r1
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	0010      	movs	r0, r2
 8005308:	0205      	lsls	r5, r0, #8
 800530a:	431d      	orrs	r5, r3
 800530c:	000b      	movs	r3, r1
 800530e:	021c      	lsls	r4, r3, #8
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68b8      	ldr	r0, [r7, #8]
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	1900      	adds	r0, r0, r4
 8005322:	4169      	adcs	r1, r5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f7fa ffc3 	bl	80002bc <__aeabi_uldivmod>
 8005336:	0002      	movs	r2, r0
 8005338:	000b      	movs	r3, r1
 800533a:	0013      	movs	r3, r2
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800533e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005340:	23c0      	movs	r3, #192	; 0xc0
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	d309      	bcc.n	800535c <UART_SetConfig+0x294>
 8005348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	035b      	lsls	r3, r3, #13
 800534e:	429a      	cmp	r2, r3
 8005350:	d204      	bcs.n	800535c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	e0e7      	b.n	800552c <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 800535c:	231a      	movs	r3, #26
 800535e:	2218      	movs	r2, #24
 8005360:	189b      	adds	r3, r3, r2
 8005362:	19db      	adds	r3, r3, r7
 8005364:	2201      	movs	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e0e0      	b.n	800552c <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	429a      	cmp	r2, r3
 8005374:	d000      	beq.n	8005378 <UART_SetConfig+0x2b0>
 8005376:	e082      	b.n	800547e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005378:	231b      	movs	r3, #27
 800537a:	2218      	movs	r2, #24
 800537c:	189b      	adds	r3, r3, r2
 800537e:	19db      	adds	r3, r3, r7
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b08      	cmp	r3, #8
 8005384:	d834      	bhi.n	80053f0 <UART_SetConfig+0x328>
 8005386:	009a      	lsls	r2, r3, #2
 8005388:	4b18      	ldr	r3, [pc, #96]	; (80053ec <UART_SetConfig+0x324>)
 800538a:	18d3      	adds	r3, r2, r3
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005390:	f7fe f9fc 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8005394:	0003      	movs	r3, r0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005398:	e033      	b.n	8005402 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800539a:	f7fe fa0d 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 800539e:	0003      	movs	r3, r0
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053a2:	e02e      	b.n	8005402 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <UART_SetConfig+0x318>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2210      	movs	r2, #16
 80053aa:	4013      	ands	r3, r2
 80053ac:	d002      	beq.n	80053b4 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <UART_SetConfig+0x31c>)
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053b2:	e026      	b.n	8005402 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <UART_SetConfig+0x320>)
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053b8:	e023      	b.n	8005402 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ba:	f7fe f937 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80053be:	0003      	movs	r3, r0
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053c2:	e01e      	b.n	8005402 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053ca:	e01a      	b.n	8005402 <UART_SetConfig+0x33a>
 80053cc:	efff69f3 	.word	0xefff69f3
 80053d0:	ffffcfff 	.word	0xffffcfff
 80053d4:	40004800 	.word	0x40004800
 80053d8:	fffff4ff 	.word	0xfffff4ff
 80053dc:	40004400 	.word	0x40004400
 80053e0:	40021000 	.word	0x40021000
 80053e4:	003d0900 	.word	0x003d0900
 80053e8:	00f42400 	.word	0x00f42400
 80053ec:	080078bc 	.word	0x080078bc
      default:
        pclk = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80053f4:	231a      	movs	r3, #26
 80053f6:	2218      	movs	r2, #24
 80053f8:	189b      	adds	r3, r3, r2
 80053fa:	19db      	adds	r3, r3, r7
 80053fc:	2201      	movs	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
        break;
 8005400:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d100      	bne.n	800540a <UART_SetConfig+0x342>
 8005408:	e090      	b.n	800552c <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	005a      	lsls	r2, r3, #1
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	18d2      	adds	r2, r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	0019      	movs	r1, r3
 800541c:	0010      	movs	r0, r2
 800541e:	f7fa fe87 	bl	8000130 <__udivsi3>
 8005422:	0003      	movs	r3, r0
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	2b0f      	cmp	r3, #15
 800542a:	d921      	bls.n	8005470 <UART_SetConfig+0x3a8>
 800542c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	025b      	lsls	r3, r3, #9
 8005432:	429a      	cmp	r2, r3
 8005434:	d21c      	bcs.n	8005470 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	b29a      	uxth	r2, r3
 800543a:	200e      	movs	r0, #14
 800543c:	2418      	movs	r4, #24
 800543e:	1903      	adds	r3, r0, r4
 8005440:	19db      	adds	r3, r3, r7
 8005442:	210f      	movs	r1, #15
 8005444:	438a      	bics	r2, r1
 8005446:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	b29b      	uxth	r3, r3
 800544e:	2207      	movs	r2, #7
 8005450:	4013      	ands	r3, r2
 8005452:	b299      	uxth	r1, r3
 8005454:	1903      	adds	r3, r0, r4
 8005456:	19db      	adds	r3, r3, r7
 8005458:	1902      	adds	r2, r0, r4
 800545a:	19d2      	adds	r2, r2, r7
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	1902      	adds	r2, r0, r4
 8005468:	19d2      	adds	r2, r2, r7
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	e05d      	b.n	800552c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005470:	231a      	movs	r3, #26
 8005472:	2218      	movs	r2, #24
 8005474:	189b      	adds	r3, r3, r2
 8005476:	19db      	adds	r3, r3, r7
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e056      	b.n	800552c <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800547e:	231b      	movs	r3, #27
 8005480:	2218      	movs	r2, #24
 8005482:	189b      	adds	r3, r3, r2
 8005484:	19db      	adds	r3, r3, r7
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d822      	bhi.n	80054d2 <UART_SetConfig+0x40a>
 800548c:	009a      	lsls	r2, r3, #2
 800548e:	4b2f      	ldr	r3, [pc, #188]	; (800554c <UART_SetConfig+0x484>)
 8005490:	18d3      	adds	r3, r2, r3
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005496:	f7fe f979 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 800549a:	0003      	movs	r3, r0
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800549e:	e021      	b.n	80054e4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a0:	f7fe f98a 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 80054a4:	0003      	movs	r3, r0
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054a8:	e01c      	b.n	80054e4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054aa:	4b29      	ldr	r3, [pc, #164]	; (8005550 <UART_SetConfig+0x488>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2210      	movs	r2, #16
 80054b0:	4013      	ands	r3, r2
 80054b2:	d002      	beq.n	80054ba <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054b4:	4b27      	ldr	r3, [pc, #156]	; (8005554 <UART_SetConfig+0x48c>)
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054b8:	e014      	b.n	80054e4 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <UART_SetConfig+0x490>)
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054be:	e011      	b.n	80054e4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c0:	f7fe f8b4 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80054c4:	0003      	movs	r3, r0
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054c8:	e00c      	b.n	80054e4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d0:	e008      	b.n	80054e4 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054d6:	231a      	movs	r3, #26
 80054d8:	2218      	movs	r2, #24
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	19db      	adds	r3, r3, r7
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
        break;
 80054e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	085a      	lsrs	r2, r3, #1
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	18d2      	adds	r2, r2, r3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0019      	movs	r1, r3
 80054fa:	0010      	movs	r0, r2
 80054fc:	f7fa fe18 	bl	8000130 <__udivsi3>
 8005500:	0003      	movs	r3, r0
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d90a      	bls.n	8005520 <UART_SetConfig+0x458>
 800550a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	025b      	lsls	r3, r3, #9
 8005510:	429a      	cmp	r2, r3
 8005512:	d205      	bcs.n	8005520 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	b29a      	uxth	r2, r3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	e005      	b.n	800552c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005520:	231a      	movs	r3, #26
 8005522:	2218      	movs	r2, #24
 8005524:	189b      	adds	r3, r3, r2
 8005526:	19db      	adds	r3, r3, r7
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2200      	movs	r2, #0
 8005530:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2200      	movs	r2, #0
 8005536:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005538:	231a      	movs	r3, #26
 800553a:	2218      	movs	r2, #24
 800553c:	189b      	adds	r3, r3, r2
 800553e:	19db      	adds	r3, r3, r7
 8005540:	781b      	ldrb	r3, [r3, #0]
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b00e      	add	sp, #56	; 0x38
 8005548:	bdb0      	pop	{r4, r5, r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	080078e0 	.word	0x080078e0
 8005550:	40021000 	.word	0x40021000
 8005554:	003d0900 	.word	0x003d0900
 8005558:	00f42400 	.word	0x00f42400

0800555c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2201      	movs	r2, #1
 800556a:	4013      	ands	r3, r2
 800556c:	d00b      	beq.n	8005586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a4a      	ldr	r2, [pc, #296]	; (80056a0 <UART_AdvFeatureConfig+0x144>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2202      	movs	r2, #2
 800558c:	4013      	ands	r3, r2
 800558e:	d00b      	beq.n	80055a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a43      	ldr	r2, [pc, #268]	; (80056a4 <UART_AdvFeatureConfig+0x148>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2204      	movs	r2, #4
 80055ae:	4013      	ands	r3, r2
 80055b0:	d00b      	beq.n	80055ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <UART_AdvFeatureConfig+0x14c>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2208      	movs	r2, #8
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a34      	ldr	r2, [pc, #208]	; (80056ac <UART_AdvFeatureConfig+0x150>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2210      	movs	r2, #16
 80055f2:	4013      	ands	r3, r2
 80055f4:	d00b      	beq.n	800560e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a2c      	ldr	r2, [pc, #176]	; (80056b0 <UART_AdvFeatureConfig+0x154>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2220      	movs	r2, #32
 8005614:	4013      	ands	r3, r2
 8005616:	d00b      	beq.n	8005630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <UART_AdvFeatureConfig+0x158>)
 8005620:	4013      	ands	r3, r2
 8005622:	0019      	movs	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2240      	movs	r2, #64	; 0x40
 8005636:	4013      	ands	r3, r2
 8005638:	d01d      	beq.n	8005676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <UART_AdvFeatureConfig+0x15c>)
 8005642:	4013      	ands	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	035b      	lsls	r3, r3, #13
 800565a:	429a      	cmp	r2, r3
 800565c:	d10b      	bne.n	8005676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a15      	ldr	r2, [pc, #84]	; (80056bc <UART_AdvFeatureConfig+0x160>)
 8005666:	4013      	ands	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	4013      	ands	r3, r2
 800567e:	d00b      	beq.n	8005698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <UART_AdvFeatureConfig+0x164>)
 8005688:	4013      	ands	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	fffdffff 	.word	0xfffdffff
 80056a4:	fffeffff 	.word	0xfffeffff
 80056a8:	fffbffff 	.word	0xfffbffff
 80056ac:	ffff7fff 	.word	0xffff7fff
 80056b0:	ffffefff 	.word	0xffffefff
 80056b4:	ffffdfff 	.word	0xffffdfff
 80056b8:	ffefffff 	.word	0xffefffff
 80056bc:	ff9fffff 	.word	0xff9fffff
 80056c0:	fff7ffff 	.word	0xfff7ffff

080056c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b092      	sub	sp, #72	; 0x48
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2284      	movs	r2, #132	; 0x84
 80056d0:	2100      	movs	r1, #0
 80056d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d4:	f7fc ffc6 	bl	8002664 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2208      	movs	r2, #8
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d12c      	bne.n	8005744 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ec:	2280      	movs	r2, #128	; 0x80
 80056ee:	0391      	lsls	r1, r2, #14
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4a46      	ldr	r2, [pc, #280]	; (800580c <UART_CheckIdleState+0x148>)
 80056f4:	9200      	str	r2, [sp, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f000 f88c 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d021      	beq.n	8005744 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
 800570a:	2301      	movs	r3, #1
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	438a      	bics	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2278      	movs	r2, #120	; 0x78
 800573c:	2100      	movs	r1, #0
 800573e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e05f      	b.n	8005804 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2204      	movs	r2, #4
 800574c:	4013      	ands	r3, r2
 800574e:	2b04      	cmp	r3, #4
 8005750:	d146      	bne.n	80057e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	03d1      	lsls	r1, r2, #15
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4a2c      	ldr	r2, [pc, #176]	; (800580c <UART_CheckIdleState+0x148>)
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	f000 f858 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 8005764:	1e03      	subs	r3, r0, #0
 8005766:	d03b      	beq.n	80057e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005768:	f3ef 8310 	mrs	r3, PRIMASK
 800576c:	60fb      	str	r3, [r7, #12]
  return(result);
 800576e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
 8005772:	2301      	movs	r3, #1
 8005774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4921      	ldr	r1, [pc, #132]	; (8005810 <UART_CheckIdleState+0x14c>)
 800578a:	400a      	ands	r2, r1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579a:	f3ef 8310 	mrs	r3, PRIMASK
 800579e:	61bb      	str	r3, [r7, #24]
  return(result);
 80057a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	633b      	str	r3, [r7, #48]	; 0x30
 80057a4:	2301      	movs	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f383 8810 	msr	PRIMASK, r3
}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2101      	movs	r1, #1
 80057bc:	438a      	bics	r2, r1
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f383 8810 	msr	PRIMASK, r3
}
 80057ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2280      	movs	r2, #128	; 0x80
 80057d0:	2120      	movs	r1, #32
 80057d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2278      	movs	r2, #120	; 0x78
 80057d8:	2100      	movs	r1, #0
 80057da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e011      	b.n	8005804 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	2120      	movs	r1, #32
 80057ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2278      	movs	r2, #120	; 0x78
 80057fe:	2100      	movs	r1, #0
 8005800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b010      	add	sp, #64	; 0x40
 800580a:	bd80      	pop	{r7, pc}
 800580c:	01ffffff 	.word	0x01ffffff
 8005810:	fffffedf 	.word	0xfffffedf

08005814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	1dfb      	adds	r3, r7, #7
 8005822:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005824:	e04b      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3301      	adds	r3, #1
 800582a:	d048      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582c:	f7fc ff1a 	bl	8002664 <HAL_GetTick>
 8005830:	0002      	movs	r2, r0
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <UART_WaitOnFlagUntilTimeout+0x2e>
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e04b      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2204      	movs	r2, #4
 800584e:	4013      	ands	r3, r2
 8005850:	d035      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2208      	movs	r2, #8
 800585a:	4013      	ands	r3, r2
 800585c:	2b08      	cmp	r3, #8
 800585e:	d111      	bne.n	8005884 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2208      	movs	r2, #8
 8005866:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	0018      	movs	r0, r3
 800586c:	f000 f906 	bl	8005a7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2284      	movs	r2, #132	; 0x84
 8005874:	2108      	movs	r1, #8
 8005876:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2278      	movs	r2, #120	; 0x78
 800587c:	2100      	movs	r1, #0
 800587e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e02c      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	401a      	ands	r2, r3
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	429a      	cmp	r2, r3
 8005896:	d112      	bne.n	80058be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 f8e9 	bl	8005a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2284      	movs	r2, #132	; 0x84
 80058ae:	2120      	movs	r1, #32
 80058b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2278      	movs	r2, #120	; 0x78
 80058b6:	2100      	movs	r1, #0
 80058b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e00f      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	4013      	ands	r3, r2
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	425a      	negs	r2, r3
 80058ce:	4153      	adcs	r3, r2
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	001a      	movs	r2, r3
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d0a4      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	0018      	movs	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b004      	add	sp, #16
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b090      	sub	sp, #64	; 0x40
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	1dbb      	adds	r3, r7, #6
 80058f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	1dba      	adds	r2, r7, #6
 8005900:	2158      	movs	r1, #88	; 0x58
 8005902:	8812      	ldrh	r2, [r2, #0]
 8005904:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1dba      	adds	r2, r7, #6
 800590a:	215a      	movs	r1, #90	; 0x5a
 800590c:	8812      	ldrh	r2, [r2, #0]
 800590e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	015b      	lsls	r3, r3, #5
 800591e:	429a      	cmp	r2, r3
 8005920:	d10d      	bne.n	800593e <UART_Start_Receive_IT+0x56>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <UART_Start_Receive_IT+0x4c>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	225c      	movs	r2, #92	; 0x5c
 800592e:	4950      	ldr	r1, [pc, #320]	; (8005a70 <UART_Start_Receive_IT+0x188>)
 8005930:	5299      	strh	r1, [r3, r2]
 8005932:	e02e      	b.n	8005992 <UART_Start_Receive_IT+0xaa>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	225c      	movs	r2, #92	; 0x5c
 8005938:	21ff      	movs	r1, #255	; 0xff
 800593a:	5299      	strh	r1, [r3, r2]
 800593c:	e029      	b.n	8005992 <UART_Start_Receive_IT+0xaa>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10d      	bne.n	8005962 <UART_Start_Receive_IT+0x7a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <UART_Start_Receive_IT+0x70>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	225c      	movs	r2, #92	; 0x5c
 8005952:	21ff      	movs	r1, #255	; 0xff
 8005954:	5299      	strh	r1, [r3, r2]
 8005956:	e01c      	b.n	8005992 <UART_Start_Receive_IT+0xaa>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	225c      	movs	r2, #92	; 0x5c
 800595c:	217f      	movs	r1, #127	; 0x7f
 800595e:	5299      	strh	r1, [r3, r2]
 8005960:	e017      	b.n	8005992 <UART_Start_Receive_IT+0xaa>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	055b      	lsls	r3, r3, #21
 800596a:	429a      	cmp	r2, r3
 800596c:	d10d      	bne.n	800598a <UART_Start_Receive_IT+0xa2>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <UART_Start_Receive_IT+0x98>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	225c      	movs	r2, #92	; 0x5c
 800597a:	217f      	movs	r1, #127	; 0x7f
 800597c:	5299      	strh	r1, [r3, r2]
 800597e:	e008      	b.n	8005992 <UART_Start_Receive_IT+0xaa>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	225c      	movs	r2, #92	; 0x5c
 8005984:	213f      	movs	r1, #63	; 0x3f
 8005986:	5299      	strh	r1, [r3, r2]
 8005988:	e003      	b.n	8005992 <UART_Start_Receive_IT+0xaa>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	225c      	movs	r2, #92	; 0x5c
 800598e:	2100      	movs	r1, #0
 8005990:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2284      	movs	r2, #132	; 0x84
 8005996:	2100      	movs	r1, #0
 8005998:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	2122      	movs	r1, #34	; 0x22
 80059a0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a2:	f3ef 8310 	mrs	r3, PRIMASK
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ac:	2301      	movs	r3, #1
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	f383 8810 	msr	PRIMASK, r3
}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2101      	movs	r1, #1
 80059c4:	430a      	orrs	r2, r1
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	f383 8810 	msr	PRIMASK, r3
}
 80059d2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	015b      	lsls	r3, r3, #5
 80059dc:	429a      	cmp	r2, r3
 80059de:	d107      	bne.n	80059f0 <UART_Start_Receive_IT+0x108>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <UART_Start_Receive_IT+0x18c>)
 80059ec:	669a      	str	r2, [r3, #104]	; 0x68
 80059ee:	e002      	b.n	80059f6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <UART_Start_Receive_IT+0x190>)
 80059f4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005a02:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a04:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	2301      	movs	r3, #1
 8005a0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2190      	movs	r1, #144	; 0x90
 8005a20:	0049      	lsls	r1, r1, #1
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	e018      	b.n	8005a64 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a32:	f3ef 8310 	mrs	r3, PRIMASK
 8005a36:	613b      	str	r3, [r7, #16]
  return(result);
 8005a38:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f383 8810 	msr	PRIMASK, r3
}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2120      	movs	r1, #32
 8005a54:	430a      	orrs	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f383 8810 	msr	PRIMASK, r3
}
 8005a62:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b010      	add	sp, #64	; 0x40
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	000001ff 	.word	0x000001ff
 8005a74:	08005d8d 	.word	0x08005d8d
 8005a78:	08005bc9 	.word	0x08005bc9

08005a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	; 0x38
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	617b      	str	r3, [r7, #20]
  return(result);
 8005a8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4926      	ldr	r1, [pc, #152]	; (8005b40 <UART_EndRxTransfer+0xc4>)
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aba:	623b      	str	r3, [r7, #32]
  return(result);
 8005abc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	438a      	bics	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d118      	bne.n	8005b22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af0:	f3ef 8310 	mrs	r3, PRIMASK
 8005af4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afa:	2301      	movs	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2110      	movs	r1, #16
 8005b12:	438a      	bics	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f383 8810 	msr	PRIMASK, r3
}
 8005b20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	2120      	movs	r1, #32
 8005b28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b00e      	add	sp, #56	; 0x38
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	fffffedf 	.word	0xfffffedf

08005b44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	225a      	movs	r2, #90	; 0x5a
 8005b56:	2100      	movs	r1, #0
 8005b58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2252      	movs	r2, #82	; 0x52
 8005b5e:	2100      	movs	r1, #0
 8005b60:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f7ff fa9b 	bl	80050a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b80:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	2301      	movs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f383 8810 	msr	PRIMASK, r3
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2140      	movs	r1, #64	; 0x40
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f383 8810 	msr	PRIMASK, r3
}
 8005baa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f7ff fa68 	bl	8005090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b006      	add	sp, #24
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b094      	sub	sp, #80	; 0x50
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bd0:	204e      	movs	r0, #78	; 0x4e
 8005bd2:	183b      	adds	r3, r7, r0
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	215c      	movs	r1, #92	; 0x5c
 8005bd8:	5a52      	ldrh	r2, [r2, r1]
 8005bda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	589b      	ldr	r3, [r3, r2]
 8005be2:	2b22      	cmp	r3, #34	; 0x22
 8005be4:	d000      	beq.n	8005be8 <UART_RxISR_8BIT+0x20>
 8005be6:	e0bf      	b.n	8005d68 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bee:	214c      	movs	r1, #76	; 0x4c
 8005bf0:	187b      	adds	r3, r7, r1
 8005bf2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b2d9      	uxtb	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	400a      	ands	r2, r1
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	225a      	movs	r2, #90	; 0x5a
 8005c18:	5a9b      	ldrh	r3, [r3, r2]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b299      	uxth	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	225a      	movs	r2, #90	; 0x5a
 8005c24:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	225a      	movs	r2, #90	; 0x5a
 8005c2a:	5a9b      	ldrh	r3, [r3, r2]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d000      	beq.n	8005c34 <UART_RxISR_8BIT+0x6c>
 8005c32:	e0a1      	b.n	8005d78 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3e:	2301      	movs	r3, #1
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	494a      	ldr	r1, [pc, #296]	; (8005d80 <UART_RxISR_8BIT+0x1b8>)
 8005c56:	400a      	ands	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c66:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c70:	2301      	movs	r3, #1
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	f383 8810 	msr	PRIMASK, r3
}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2101      	movs	r1, #1
 8005c88:	438a      	bics	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a34      	ldr	r2, [pc, #208]	; (8005d84 <UART_RxISR_8BIT+0x1bc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01f      	beq.n	8005cf6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cca:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4928      	ldr	r1, [pc, #160]	; (8005d88 <UART_RxISR_8BIT+0x1c0>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d12f      	bne.n	8005d5e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d04:	f3ef 8310 	mrs	r3, PRIMASK
 8005d08:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d0a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0e:	2301      	movs	r3, #1
 8005d10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2110      	movs	r1, #16
 8005d26:	438a      	bics	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d103      	bne.n	8005d4c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2258      	movs	r2, #88	; 0x58
 8005d50:	5a9a      	ldrh	r2, [r3, r2]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	0011      	movs	r1, r2
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff f9aa 	bl	80050b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d5c:	e00c      	b.n	8005d78 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7fc f965 	bl	8002030 <HAL_UART_RxCpltCallback>
}
 8005d66:	e007      	b.n	8005d78 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2108      	movs	r1, #8
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b014      	add	sp, #80	; 0x50
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	fffffedf 	.word	0xfffffedf
 8005d84:	40004800 	.word	0x40004800
 8005d88:	fbffffff 	.word	0xfbffffff

08005d8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b094      	sub	sp, #80	; 0x50
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d94:	204e      	movs	r0, #78	; 0x4e
 8005d96:	183b      	adds	r3, r7, r0
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	215c      	movs	r1, #92	; 0x5c
 8005d9c:	5a52      	ldrh	r2, [r2, r1]
 8005d9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	589b      	ldr	r3, [r3, r2]
 8005da6:	2b22      	cmp	r3, #34	; 0x22
 8005da8:	d000      	beq.n	8005dac <UART_RxISR_16BIT+0x20>
 8005daa:	e0bf      	b.n	8005f2c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db2:	214c      	movs	r1, #76	; 0x4c
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005dbe:	187b      	adds	r3, r7, r1
 8005dc0:	183a      	adds	r2, r7, r0
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	8812      	ldrh	r2, [r2, #0]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	1c9a      	adds	r2, r3, #2
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	225a      	movs	r2, #90	; 0x5a
 8005ddc:	5a9b      	ldrh	r3, [r3, r2]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b299      	uxth	r1, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	225a      	movs	r2, #90	; 0x5a
 8005de8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	225a      	movs	r2, #90	; 0x5a
 8005dee:	5a9b      	ldrh	r3, [r3, r2]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d000      	beq.n	8005df8 <UART_RxISR_16BIT+0x6c>
 8005df6:	e0a1      	b.n	8005f3c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	623b      	str	r3, [r7, #32]
  return(result);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	647b      	str	r3, [r7, #68]	; 0x44
 8005e02:	2301      	movs	r3, #1
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	494a      	ldr	r1, [pc, #296]	; (8005f44 <UART_RxISR_16BIT+0x1b8>)
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	643b      	str	r3, [r7, #64]	; 0x40
 8005e34:	2301      	movs	r3, #1
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	2120      	movs	r1, #32
 8005e62:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a34      	ldr	r2, [pc, #208]	; (8005f48 <UART_RxISR_16BIT+0x1bc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01f      	beq.n	8005eba <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	4013      	ands	r3, r2
 8005e86:	d018      	beq.n	8005eba <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e88:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e8e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e92:	2301      	movs	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f383 8810 	msr	PRIMASK, r3
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4928      	ldr	r1, [pc, #160]	; (8005f4c <UART_RxISR_16BIT+0x1c0>)
 8005eaa:	400a      	ands	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f383 8810 	msr	PRIMASK, r3
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d12f      	bne.n	8005f22 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ece:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f383 8810 	msr	PRIMASK, r3
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2110      	movs	r1, #16
 8005eea:	438a      	bics	r2, r1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f383 8810 	msr	PRIMASK, r3
}
 8005ef8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2210      	movs	r2, #16
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d103      	bne.n	8005f10 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2258      	movs	r2, #88	; 0x58
 8005f14:	5a9a      	ldrh	r2, [r3, r2]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0011      	movs	r1, r2
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7ff f8c8 	bl	80050b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f20:	e00c      	b.n	8005f3c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fc f883 	bl	8002030 <HAL_UART_RxCpltCallback>
}
 8005f2a:	e007      	b.n	8005f3c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2108      	movs	r1, #8
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	619a      	str	r2, [r3, #24]
}
 8005f3c:	46c0      	nop			; (mov r8, r8)
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b014      	add	sp, #80	; 0x50
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	fffffedf 	.word	0xfffffedf
 8005f48:	40004800 	.word	0x40004800
 8005f4c:	fbffffff 	.word	0xfbffffff

08005f50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b002      	add	sp, #8
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <atoi>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	220a      	movs	r2, #10
 8005f64:	2100      	movs	r1, #0
 8005f66:	f000 f9bb 	bl	80062e0 <strtol>
 8005f6a:	bd10      	pop	{r4, pc}

08005f6c <__errno>:
 8005f6c:	4b01      	ldr	r3, [pc, #4]	; (8005f74 <__errno+0x8>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	4770      	bx	lr
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	2000001c 	.word	0x2000001c

08005f78 <__libc_init_array>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	4d0c      	ldr	r5, [pc, #48]	; (8005fb0 <__libc_init_array+0x38>)
 8005f7e:	4c0d      	ldr	r4, [pc, #52]	; (8005fb4 <__libc_init_array+0x3c>)
 8005f80:	1b64      	subs	r4, r4, r5
 8005f82:	10a4      	asrs	r4, r4, #2
 8005f84:	42a6      	cmp	r6, r4
 8005f86:	d109      	bne.n	8005f9c <__libc_init_array+0x24>
 8005f88:	2600      	movs	r6, #0
 8005f8a:	f001 f9fd 	bl	8007388 <_init>
 8005f8e:	4d0a      	ldr	r5, [pc, #40]	; (8005fb8 <__libc_init_array+0x40>)
 8005f90:	4c0a      	ldr	r4, [pc, #40]	; (8005fbc <__libc_init_array+0x44>)
 8005f92:	1b64      	subs	r4, r4, r5
 8005f94:	10a4      	asrs	r4, r4, #2
 8005f96:	42a6      	cmp	r6, r4
 8005f98:	d105      	bne.n	8005fa6 <__libc_init_array+0x2e>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	00b3      	lsls	r3, r6, #2
 8005f9e:	58eb      	ldr	r3, [r5, r3]
 8005fa0:	4798      	blx	r3
 8005fa2:	3601      	adds	r6, #1
 8005fa4:	e7ee      	b.n	8005f84 <__libc_init_array+0xc>
 8005fa6:	00b3      	lsls	r3, r6, #2
 8005fa8:	58eb      	ldr	r3, [r5, r3]
 8005faa:	4798      	blx	r3
 8005fac:	3601      	adds	r6, #1
 8005fae:	e7f2      	b.n	8005f96 <__libc_init_array+0x1e>
 8005fb0:	08007b58 	.word	0x08007b58
 8005fb4:	08007b58 	.word	0x08007b58
 8005fb8:	08007b58 	.word	0x08007b58
 8005fbc:	08007b5c 	.word	0x08007b5c

08005fc0 <memset>:
 8005fc0:	0003      	movs	r3, r0
 8005fc2:	1882      	adds	r2, r0, r2
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	7019      	strb	r1, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <iprintf>:
 8005fd0:	b40f      	push	{r0, r1, r2, r3}
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <iprintf+0x30>)
 8005fd4:	b513      	push	{r0, r1, r4, lr}
 8005fd6:	681c      	ldr	r4, [r3, #0]
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	d005      	beq.n	8005fe8 <iprintf+0x18>
 8005fdc:	69a3      	ldr	r3, [r4, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <iprintf+0x18>
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	f000 fba2 	bl	800672c <__sinit>
 8005fe8:	ab05      	add	r3, sp, #20
 8005fea:	0020      	movs	r0, r4
 8005fec:	9a04      	ldr	r2, [sp, #16]
 8005fee:	68a1      	ldr	r1, [r4, #8]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	f000 fdcf 	bl	8006b94 <_vfiprintf_r>
 8005ff6:	bc16      	pop	{r1, r2, r4}
 8005ff8:	bc08      	pop	{r3}
 8005ffa:	b004      	add	sp, #16
 8005ffc:	4718      	bx	r3
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	2000001c 	.word	0x2000001c

08006004 <_puts_r>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	0005      	movs	r5, r0
 8006008:	000e      	movs	r6, r1
 800600a:	2800      	cmp	r0, #0
 800600c:	d004      	beq.n	8006018 <_puts_r+0x14>
 800600e:	6983      	ldr	r3, [r0, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <_puts_r+0x14>
 8006014:	f000 fb8a 	bl	800672c <__sinit>
 8006018:	69ab      	ldr	r3, [r5, #24]
 800601a:	68ac      	ldr	r4, [r5, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <_puts_r+0x22>
 8006020:	0028      	movs	r0, r5
 8006022:	f000 fb83 	bl	800672c <__sinit>
 8006026:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <_puts_r+0xd8>)
 8006028:	429c      	cmp	r4, r3
 800602a:	d122      	bne.n	8006072 <_puts_r+0x6e>
 800602c:	686c      	ldr	r4, [r5, #4]
 800602e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	d405      	bmi.n	8006040 <_puts_r+0x3c>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	059b      	lsls	r3, r3, #22
 8006038:	d402      	bmi.n	8006040 <_puts_r+0x3c>
 800603a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800603c:	f000 fc27 	bl	800688e <__retarget_lock_acquire_recursive>
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	071b      	lsls	r3, r3, #28
 8006044:	d502      	bpl.n	800604c <_puts_r+0x48>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d129      	bne.n	80060a0 <_puts_r+0x9c>
 800604c:	0021      	movs	r1, r4
 800604e:	0028      	movs	r0, r5
 8006050:	f000 f9a8 	bl	80063a4 <__swsetup_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	d023      	beq.n	80060a0 <_puts_r+0x9c>
 8006058:	2501      	movs	r5, #1
 800605a:	426d      	negs	r5, r5
 800605c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800605e:	07db      	lsls	r3, r3, #31
 8006060:	d405      	bmi.n	800606e <_puts_r+0x6a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	059b      	lsls	r3, r3, #22
 8006066:	d402      	bmi.n	800606e <_puts_r+0x6a>
 8006068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800606a:	f000 fc11 	bl	8006890 <__retarget_lock_release_recursive>
 800606e:	0028      	movs	r0, r5
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <_puts_r+0xdc>)
 8006074:	429c      	cmp	r4, r3
 8006076:	d101      	bne.n	800607c <_puts_r+0x78>
 8006078:	68ac      	ldr	r4, [r5, #8]
 800607a:	e7d8      	b.n	800602e <_puts_r+0x2a>
 800607c:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <_puts_r+0xe0>)
 800607e:	429c      	cmp	r4, r3
 8006080:	d1d5      	bne.n	800602e <_puts_r+0x2a>
 8006082:	68ec      	ldr	r4, [r5, #12]
 8006084:	e7d3      	b.n	800602e <_puts_r+0x2a>
 8006086:	3601      	adds	r6, #1
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	da04      	bge.n	8006098 <_puts_r+0x94>
 800608e:	69a2      	ldr	r2, [r4, #24]
 8006090:	429a      	cmp	r2, r3
 8006092:	dc16      	bgt.n	80060c2 <_puts_r+0xbe>
 8006094:	290a      	cmp	r1, #10
 8006096:	d014      	beq.n	80060c2 <_puts_r+0xbe>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	7019      	strb	r1, [r3, #0]
 80060a0:	68a3      	ldr	r3, [r4, #8]
 80060a2:	7831      	ldrb	r1, [r6, #0]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	2900      	cmp	r1, #0
 80060a8:	d1ed      	bne.n	8006086 <_puts_r+0x82>
 80060aa:	60a3      	str	r3, [r4, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da0f      	bge.n	80060d0 <_puts_r+0xcc>
 80060b0:	0028      	movs	r0, r5
 80060b2:	0022      	movs	r2, r4
 80060b4:	310a      	adds	r1, #10
 80060b6:	f000 f91f 	bl	80062f8 <__swbuf_r>
 80060ba:	250a      	movs	r5, #10
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d1cd      	bne.n	800605c <_puts_r+0x58>
 80060c0:	e7ca      	b.n	8006058 <_puts_r+0x54>
 80060c2:	0022      	movs	r2, r4
 80060c4:	0028      	movs	r0, r5
 80060c6:	f000 f917 	bl	80062f8 <__swbuf_r>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d1e8      	bne.n	80060a0 <_puts_r+0x9c>
 80060ce:	e7c3      	b.n	8006058 <_puts_r+0x54>
 80060d0:	250a      	movs	r5, #10
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	6022      	str	r2, [r4, #0]
 80060d8:	701d      	strb	r5, [r3, #0]
 80060da:	e7bf      	b.n	800605c <_puts_r+0x58>
 80060dc:	08007adc 	.word	0x08007adc
 80060e0:	08007afc 	.word	0x08007afc
 80060e4:	08007abc 	.word	0x08007abc

080060e8 <puts>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <puts+0x10>)
 80060ec:	0001      	movs	r1, r0
 80060ee:	6818      	ldr	r0, [r3, #0]
 80060f0:	f7ff ff88 	bl	8006004 <_puts_r>
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	2000001c 	.word	0x2000001c

080060fc <strtok>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	4b16      	ldr	r3, [pc, #88]	; (8006158 <strtok+0x5c>)
 8006100:	0005      	movs	r5, r0
 8006102:	681f      	ldr	r7, [r3, #0]
 8006104:	000e      	movs	r6, r1
 8006106:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006108:	2c00      	cmp	r4, #0
 800610a:	d11d      	bne.n	8006148 <strtok+0x4c>
 800610c:	2050      	movs	r0, #80	; 0x50
 800610e:	f000 fc2d 	bl	800696c <malloc>
 8006112:	1e02      	subs	r2, r0, #0
 8006114:	65b8      	str	r0, [r7, #88]	; 0x58
 8006116:	d104      	bne.n	8006122 <strtok+0x26>
 8006118:	2157      	movs	r1, #87	; 0x57
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <strtok+0x60>)
 800611c:	4810      	ldr	r0, [pc, #64]	; (8006160 <strtok+0x64>)
 800611e:	f000 f9b9 	bl	8006494 <__assert_func>
 8006122:	6004      	str	r4, [r0, #0]
 8006124:	6044      	str	r4, [r0, #4]
 8006126:	6084      	str	r4, [r0, #8]
 8006128:	60c4      	str	r4, [r0, #12]
 800612a:	6104      	str	r4, [r0, #16]
 800612c:	6144      	str	r4, [r0, #20]
 800612e:	6184      	str	r4, [r0, #24]
 8006130:	6284      	str	r4, [r0, #40]	; 0x28
 8006132:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006134:	6304      	str	r4, [r0, #48]	; 0x30
 8006136:	6344      	str	r4, [r0, #52]	; 0x34
 8006138:	6384      	str	r4, [r0, #56]	; 0x38
 800613a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800613c:	6404      	str	r4, [r0, #64]	; 0x40
 800613e:	6444      	str	r4, [r0, #68]	; 0x44
 8006140:	6484      	str	r4, [r0, #72]	; 0x48
 8006142:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006144:	7704      	strb	r4, [r0, #28]
 8006146:	6244      	str	r4, [r0, #36]	; 0x24
 8006148:	0031      	movs	r1, r6
 800614a:	0028      	movs	r0, r5
 800614c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800614e:	2301      	movs	r3, #1
 8006150:	f000 f808 	bl	8006164 <__strtok_r>
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	2000001c 	.word	0x2000001c
 800615c:	08007908 	.word	0x08007908
 8006160:	0800791f 	.word	0x0800791f

08006164 <__strtok_r>:
 8006164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006166:	2800      	cmp	r0, #0
 8006168:	d102      	bne.n	8006170 <__strtok_r+0xc>
 800616a:	6810      	ldr	r0, [r2, #0]
 800616c:	2800      	cmp	r0, #0
 800616e:	d013      	beq.n	8006198 <__strtok_r+0x34>
 8006170:	0004      	movs	r4, r0
 8006172:	0020      	movs	r0, r4
 8006174:	000e      	movs	r6, r1
 8006176:	7805      	ldrb	r5, [r0, #0]
 8006178:	3401      	adds	r4, #1
 800617a:	7837      	ldrb	r7, [r6, #0]
 800617c:	2f00      	cmp	r7, #0
 800617e:	d104      	bne.n	800618a <__strtok_r+0x26>
 8006180:	2d00      	cmp	r5, #0
 8006182:	d10f      	bne.n	80061a4 <__strtok_r+0x40>
 8006184:	0028      	movs	r0, r5
 8006186:	6015      	str	r5, [r2, #0]
 8006188:	e006      	b.n	8006198 <__strtok_r+0x34>
 800618a:	3601      	adds	r6, #1
 800618c:	42bd      	cmp	r5, r7
 800618e:	d1f4      	bne.n	800617a <__strtok_r+0x16>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ee      	bne.n	8006172 <__strtok_r+0xe>
 8006194:	6014      	str	r4, [r2, #0]
 8006196:	7003      	strb	r3, [r0, #0]
 8006198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800619a:	002f      	movs	r7, r5
 800619c:	e00f      	b.n	80061be <__strtok_r+0x5a>
 800619e:	3301      	adds	r3, #1
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d104      	bne.n	80061ae <__strtok_r+0x4a>
 80061a4:	0023      	movs	r3, r4
 80061a6:	3401      	adds	r4, #1
 80061a8:	781d      	ldrb	r5, [r3, #0]
 80061aa:	0027      	movs	r7, r4
 80061ac:	000b      	movs	r3, r1
 80061ae:	781e      	ldrb	r6, [r3, #0]
 80061b0:	42b5      	cmp	r5, r6
 80061b2:	d1f4      	bne.n	800619e <__strtok_r+0x3a>
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	d0f0      	beq.n	800619a <__strtok_r+0x36>
 80061b8:	2300      	movs	r3, #0
 80061ba:	3c01      	subs	r4, #1
 80061bc:	7023      	strb	r3, [r4, #0]
 80061be:	6017      	str	r7, [r2, #0]
 80061c0:	e7ea      	b.n	8006198 <__strtok_r+0x34>
	...

080061c4 <_strtol_l.constprop.0>:
 80061c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c6:	b087      	sub	sp, #28
 80061c8:	001e      	movs	r6, r3
 80061ca:	9005      	str	r0, [sp, #20]
 80061cc:	9101      	str	r1, [sp, #4]
 80061ce:	9202      	str	r2, [sp, #8]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d045      	beq.n	8006260 <_strtol_l.constprop.0+0x9c>
 80061d4:	000b      	movs	r3, r1
 80061d6:	2e24      	cmp	r6, #36	; 0x24
 80061d8:	d842      	bhi.n	8006260 <_strtol_l.constprop.0+0x9c>
 80061da:	4a3f      	ldr	r2, [pc, #252]	; (80062d8 <_strtol_l.constprop.0+0x114>)
 80061dc:	2108      	movs	r1, #8
 80061de:	4694      	mov	ip, r2
 80061e0:	001a      	movs	r2, r3
 80061e2:	4660      	mov	r0, ip
 80061e4:	7814      	ldrb	r4, [r2, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	5d00      	ldrb	r0, [r0, r4]
 80061ea:	001d      	movs	r5, r3
 80061ec:	0007      	movs	r7, r0
 80061ee:	400f      	ands	r7, r1
 80061f0:	4208      	tst	r0, r1
 80061f2:	d1f5      	bne.n	80061e0 <_strtol_l.constprop.0+0x1c>
 80061f4:	2c2d      	cmp	r4, #45	; 0x2d
 80061f6:	d13a      	bne.n	800626e <_strtol_l.constprop.0+0xaa>
 80061f8:	2701      	movs	r7, #1
 80061fa:	781c      	ldrb	r4, [r3, #0]
 80061fc:	1c95      	adds	r5, r2, #2
 80061fe:	2e00      	cmp	r6, #0
 8006200:	d065      	beq.n	80062ce <_strtol_l.constprop.0+0x10a>
 8006202:	2e10      	cmp	r6, #16
 8006204:	d109      	bne.n	800621a <_strtol_l.constprop.0+0x56>
 8006206:	2c30      	cmp	r4, #48	; 0x30
 8006208:	d107      	bne.n	800621a <_strtol_l.constprop.0+0x56>
 800620a:	2220      	movs	r2, #32
 800620c:	782b      	ldrb	r3, [r5, #0]
 800620e:	4393      	bics	r3, r2
 8006210:	2b58      	cmp	r3, #88	; 0x58
 8006212:	d157      	bne.n	80062c4 <_strtol_l.constprop.0+0x100>
 8006214:	2610      	movs	r6, #16
 8006216:	786c      	ldrb	r4, [r5, #1]
 8006218:	3502      	adds	r5, #2
 800621a:	4b30      	ldr	r3, [pc, #192]	; (80062dc <_strtol_l.constprop.0+0x118>)
 800621c:	0031      	movs	r1, r6
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	0018      	movs	r0, r3
 8006222:	9303      	str	r3, [sp, #12]
 8006224:	f7fa f80a 	bl	800023c <__aeabi_uidivmod>
 8006228:	2300      	movs	r3, #0
 800622a:	2201      	movs	r2, #1
 800622c:	4684      	mov	ip, r0
 800622e:	0018      	movs	r0, r3
 8006230:	9104      	str	r1, [sp, #16]
 8006232:	4252      	negs	r2, r2
 8006234:	0021      	movs	r1, r4
 8006236:	3930      	subs	r1, #48	; 0x30
 8006238:	2909      	cmp	r1, #9
 800623a:	d81d      	bhi.n	8006278 <_strtol_l.constprop.0+0xb4>
 800623c:	000c      	movs	r4, r1
 800623e:	42a6      	cmp	r6, r4
 8006240:	dd28      	ble.n	8006294 <_strtol_l.constprop.0+0xd0>
 8006242:	2b00      	cmp	r3, #0
 8006244:	db24      	blt.n	8006290 <_strtol_l.constprop.0+0xcc>
 8006246:	0013      	movs	r3, r2
 8006248:	4584      	cmp	ip, r0
 800624a:	d306      	bcc.n	800625a <_strtol_l.constprop.0+0x96>
 800624c:	d102      	bne.n	8006254 <_strtol_l.constprop.0+0x90>
 800624e:	9904      	ldr	r1, [sp, #16]
 8006250:	42a1      	cmp	r1, r4
 8006252:	db02      	blt.n	800625a <_strtol_l.constprop.0+0x96>
 8006254:	2301      	movs	r3, #1
 8006256:	4370      	muls	r0, r6
 8006258:	1820      	adds	r0, r4, r0
 800625a:	782c      	ldrb	r4, [r5, #0]
 800625c:	3501      	adds	r5, #1
 800625e:	e7e9      	b.n	8006234 <_strtol_l.constprop.0+0x70>
 8006260:	f7ff fe84 	bl	8005f6c <__errno>
 8006264:	2316      	movs	r3, #22
 8006266:	6003      	str	r3, [r0, #0]
 8006268:	2000      	movs	r0, #0
 800626a:	b007      	add	sp, #28
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626e:	2c2b      	cmp	r4, #43	; 0x2b
 8006270:	d1c5      	bne.n	80061fe <_strtol_l.constprop.0+0x3a>
 8006272:	781c      	ldrb	r4, [r3, #0]
 8006274:	1c95      	adds	r5, r2, #2
 8006276:	e7c2      	b.n	80061fe <_strtol_l.constprop.0+0x3a>
 8006278:	0021      	movs	r1, r4
 800627a:	3941      	subs	r1, #65	; 0x41
 800627c:	2919      	cmp	r1, #25
 800627e:	d801      	bhi.n	8006284 <_strtol_l.constprop.0+0xc0>
 8006280:	3c37      	subs	r4, #55	; 0x37
 8006282:	e7dc      	b.n	800623e <_strtol_l.constprop.0+0x7a>
 8006284:	0021      	movs	r1, r4
 8006286:	3961      	subs	r1, #97	; 0x61
 8006288:	2919      	cmp	r1, #25
 800628a:	d803      	bhi.n	8006294 <_strtol_l.constprop.0+0xd0>
 800628c:	3c57      	subs	r4, #87	; 0x57
 800628e:	e7d6      	b.n	800623e <_strtol_l.constprop.0+0x7a>
 8006290:	0013      	movs	r3, r2
 8006292:	e7e2      	b.n	800625a <_strtol_l.constprop.0+0x96>
 8006294:	2b00      	cmp	r3, #0
 8006296:	da09      	bge.n	80062ac <_strtol_l.constprop.0+0xe8>
 8006298:	2322      	movs	r3, #34	; 0x22
 800629a:	9a05      	ldr	r2, [sp, #20]
 800629c:	9803      	ldr	r0, [sp, #12]
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	9b02      	ldr	r3, [sp, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0e1      	beq.n	800626a <_strtol_l.constprop.0+0xa6>
 80062a6:	1e6b      	subs	r3, r5, #1
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	e007      	b.n	80062bc <_strtol_l.constprop.0+0xf8>
 80062ac:	2f00      	cmp	r7, #0
 80062ae:	d000      	beq.n	80062b2 <_strtol_l.constprop.0+0xee>
 80062b0:	4240      	negs	r0, r0
 80062b2:	9a02      	ldr	r2, [sp, #8]
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d0d8      	beq.n	800626a <_strtol_l.constprop.0+0xa6>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f4      	bne.n	80062a6 <_strtol_l.constprop.0+0xe2>
 80062bc:	9b02      	ldr	r3, [sp, #8]
 80062be:	9a01      	ldr	r2, [sp, #4]
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e7d2      	b.n	800626a <_strtol_l.constprop.0+0xa6>
 80062c4:	2430      	movs	r4, #48	; 0x30
 80062c6:	2e00      	cmp	r6, #0
 80062c8:	d1a7      	bne.n	800621a <_strtol_l.constprop.0+0x56>
 80062ca:	3608      	adds	r6, #8
 80062cc:	e7a5      	b.n	800621a <_strtol_l.constprop.0+0x56>
 80062ce:	2c30      	cmp	r4, #48	; 0x30
 80062d0:	d09b      	beq.n	800620a <_strtol_l.constprop.0+0x46>
 80062d2:	260a      	movs	r6, #10
 80062d4:	e7a1      	b.n	800621a <_strtol_l.constprop.0+0x56>
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	080079b9 	.word	0x080079b9
 80062dc:	7fffffff 	.word	0x7fffffff

080062e0 <strtol>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	0013      	movs	r3, r2
 80062e4:	000a      	movs	r2, r1
 80062e6:	0001      	movs	r1, r0
 80062e8:	4802      	ldr	r0, [pc, #8]	; (80062f4 <strtol+0x14>)
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	f7ff ff6a 	bl	80061c4 <_strtol_l.constprop.0>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	2000001c 	.word	0x2000001c

080062f8 <__swbuf_r>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	0005      	movs	r5, r0
 80062fc:	000e      	movs	r6, r1
 80062fe:	0014      	movs	r4, r2
 8006300:	2800      	cmp	r0, #0
 8006302:	d004      	beq.n	800630e <__swbuf_r+0x16>
 8006304:	6983      	ldr	r3, [r0, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <__swbuf_r+0x16>
 800630a:	f000 fa0f 	bl	800672c <__sinit>
 800630e:	4b22      	ldr	r3, [pc, #136]	; (8006398 <__swbuf_r+0xa0>)
 8006310:	429c      	cmp	r4, r3
 8006312:	d12e      	bne.n	8006372 <__swbuf_r+0x7a>
 8006314:	686c      	ldr	r4, [r5, #4]
 8006316:	69a3      	ldr	r3, [r4, #24]
 8006318:	60a3      	str	r3, [r4, #8]
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	071b      	lsls	r3, r3, #28
 800631e:	d532      	bpl.n	8006386 <__swbuf_r+0x8e>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02f      	beq.n	8006386 <__swbuf_r+0x8e>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	6922      	ldr	r2, [r4, #16]
 800632a:	b2f7      	uxtb	r7, r6
 800632c:	1a98      	subs	r0, r3, r2
 800632e:	6963      	ldr	r3, [r4, #20]
 8006330:	b2f6      	uxtb	r6, r6
 8006332:	4283      	cmp	r3, r0
 8006334:	dc05      	bgt.n	8006342 <__swbuf_r+0x4a>
 8006336:	0021      	movs	r1, r4
 8006338:	0028      	movs	r0, r5
 800633a:	f000 f955 	bl	80065e8 <_fflush_r>
 800633e:	2800      	cmp	r0, #0
 8006340:	d127      	bne.n	8006392 <__swbuf_r+0x9a>
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	3001      	adds	r0, #1
 8006346:	3b01      	subs	r3, #1
 8006348:	60a3      	str	r3, [r4, #8]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	701f      	strb	r7, [r3, #0]
 8006352:	6963      	ldr	r3, [r4, #20]
 8006354:	4283      	cmp	r3, r0
 8006356:	d004      	beq.n	8006362 <__swbuf_r+0x6a>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	07db      	lsls	r3, r3, #31
 800635c:	d507      	bpl.n	800636e <__swbuf_r+0x76>
 800635e:	2e0a      	cmp	r6, #10
 8006360:	d105      	bne.n	800636e <__swbuf_r+0x76>
 8006362:	0021      	movs	r1, r4
 8006364:	0028      	movs	r0, r5
 8006366:	f000 f93f 	bl	80065e8 <_fflush_r>
 800636a:	2800      	cmp	r0, #0
 800636c:	d111      	bne.n	8006392 <__swbuf_r+0x9a>
 800636e:	0030      	movs	r0, r6
 8006370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006372:	4b0a      	ldr	r3, [pc, #40]	; (800639c <__swbuf_r+0xa4>)
 8006374:	429c      	cmp	r4, r3
 8006376:	d101      	bne.n	800637c <__swbuf_r+0x84>
 8006378:	68ac      	ldr	r4, [r5, #8]
 800637a:	e7cc      	b.n	8006316 <__swbuf_r+0x1e>
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <__swbuf_r+0xa8>)
 800637e:	429c      	cmp	r4, r3
 8006380:	d1c9      	bne.n	8006316 <__swbuf_r+0x1e>
 8006382:	68ec      	ldr	r4, [r5, #12]
 8006384:	e7c7      	b.n	8006316 <__swbuf_r+0x1e>
 8006386:	0021      	movs	r1, r4
 8006388:	0028      	movs	r0, r5
 800638a:	f000 f80b 	bl	80063a4 <__swsetup_r>
 800638e:	2800      	cmp	r0, #0
 8006390:	d0c9      	beq.n	8006326 <__swbuf_r+0x2e>
 8006392:	2601      	movs	r6, #1
 8006394:	4276      	negs	r6, r6
 8006396:	e7ea      	b.n	800636e <__swbuf_r+0x76>
 8006398:	08007adc 	.word	0x08007adc
 800639c:	08007afc 	.word	0x08007afc
 80063a0:	08007abc 	.word	0x08007abc

080063a4 <__swsetup_r>:
 80063a4:	4b37      	ldr	r3, [pc, #220]	; (8006484 <__swsetup_r+0xe0>)
 80063a6:	b570      	push	{r4, r5, r6, lr}
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	0006      	movs	r6, r0
 80063ac:	000c      	movs	r4, r1
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	d005      	beq.n	80063be <__swsetup_r+0x1a>
 80063b2:	69ab      	ldr	r3, [r5, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <__swsetup_r+0x1a>
 80063b8:	0028      	movs	r0, r5
 80063ba:	f000 f9b7 	bl	800672c <__sinit>
 80063be:	4b32      	ldr	r3, [pc, #200]	; (8006488 <__swsetup_r+0xe4>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	d10f      	bne.n	80063e4 <__swsetup_r+0x40>
 80063c4:	686c      	ldr	r4, [r5, #4]
 80063c6:	230c      	movs	r3, #12
 80063c8:	5ee2      	ldrsh	r2, [r4, r3]
 80063ca:	b293      	uxth	r3, r2
 80063cc:	0711      	lsls	r1, r2, #28
 80063ce:	d42d      	bmi.n	800642c <__swsetup_r+0x88>
 80063d0:	06d9      	lsls	r1, r3, #27
 80063d2:	d411      	bmi.n	80063f8 <__swsetup_r+0x54>
 80063d4:	2309      	movs	r3, #9
 80063d6:	2001      	movs	r0, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	3337      	adds	r3, #55	; 0x37
 80063dc:	4313      	orrs	r3, r2
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	4240      	negs	r0, r0
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	4b29      	ldr	r3, [pc, #164]	; (800648c <__swsetup_r+0xe8>)
 80063e6:	429c      	cmp	r4, r3
 80063e8:	d101      	bne.n	80063ee <__swsetup_r+0x4a>
 80063ea:	68ac      	ldr	r4, [r5, #8]
 80063ec:	e7eb      	b.n	80063c6 <__swsetup_r+0x22>
 80063ee:	4b28      	ldr	r3, [pc, #160]	; (8006490 <__swsetup_r+0xec>)
 80063f0:	429c      	cmp	r4, r3
 80063f2:	d1e8      	bne.n	80063c6 <__swsetup_r+0x22>
 80063f4:	68ec      	ldr	r4, [r5, #12]
 80063f6:	e7e6      	b.n	80063c6 <__swsetup_r+0x22>
 80063f8:	075b      	lsls	r3, r3, #29
 80063fa:	d513      	bpl.n	8006424 <__swsetup_r+0x80>
 80063fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063fe:	2900      	cmp	r1, #0
 8006400:	d008      	beq.n	8006414 <__swsetup_r+0x70>
 8006402:	0023      	movs	r3, r4
 8006404:	3344      	adds	r3, #68	; 0x44
 8006406:	4299      	cmp	r1, r3
 8006408:	d002      	beq.n	8006410 <__swsetup_r+0x6c>
 800640a:	0030      	movs	r0, r6
 800640c:	f000 fab8 	bl	8006980 <_free_r>
 8006410:	2300      	movs	r3, #0
 8006412:	6363      	str	r3, [r4, #52]	; 0x34
 8006414:	2224      	movs	r2, #36	; 0x24
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	4393      	bics	r3, r2
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	2300      	movs	r3, #0
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	2308      	movs	r3, #8
 8006426:	89a2      	ldrh	r2, [r4, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <__swsetup_r+0xa6>
 8006432:	21a0      	movs	r1, #160	; 0xa0
 8006434:	2280      	movs	r2, #128	; 0x80
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	0089      	lsls	r1, r1, #2
 800643a:	0092      	lsls	r2, r2, #2
 800643c:	400b      	ands	r3, r1
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <__swsetup_r+0xa6>
 8006442:	0021      	movs	r1, r4
 8006444:	0030      	movs	r0, r6
 8006446:	f000 fa4d 	bl	80068e4 <__smakebuf_r>
 800644a:	220c      	movs	r2, #12
 800644c:	5ea3      	ldrsh	r3, [r4, r2]
 800644e:	2001      	movs	r0, #1
 8006450:	001a      	movs	r2, r3
 8006452:	b299      	uxth	r1, r3
 8006454:	4002      	ands	r2, r0
 8006456:	4203      	tst	r3, r0
 8006458:	d00f      	beq.n	800647a <__swsetup_r+0xd6>
 800645a:	2200      	movs	r2, #0
 800645c:	60a2      	str	r2, [r4, #8]
 800645e:	6962      	ldr	r2, [r4, #20]
 8006460:	4252      	negs	r2, r2
 8006462:	61a2      	str	r2, [r4, #24]
 8006464:	2000      	movs	r0, #0
 8006466:	6922      	ldr	r2, [r4, #16]
 8006468:	4282      	cmp	r2, r0
 800646a:	d1ba      	bne.n	80063e2 <__swsetup_r+0x3e>
 800646c:	060a      	lsls	r2, r1, #24
 800646e:	d5b8      	bpl.n	80063e2 <__swsetup_r+0x3e>
 8006470:	2240      	movs	r2, #64	; 0x40
 8006472:	4313      	orrs	r3, r2
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	3801      	subs	r0, #1
 8006478:	e7b3      	b.n	80063e2 <__swsetup_r+0x3e>
 800647a:	0788      	lsls	r0, r1, #30
 800647c:	d400      	bmi.n	8006480 <__swsetup_r+0xdc>
 800647e:	6962      	ldr	r2, [r4, #20]
 8006480:	60a2      	str	r2, [r4, #8]
 8006482:	e7ef      	b.n	8006464 <__swsetup_r+0xc0>
 8006484:	2000001c 	.word	0x2000001c
 8006488:	08007adc 	.word	0x08007adc
 800648c:	08007afc 	.word	0x08007afc
 8006490:	08007abc 	.word	0x08007abc

08006494 <__assert_func>:
 8006494:	b530      	push	{r4, r5, lr}
 8006496:	0014      	movs	r4, r2
 8006498:	001a      	movs	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <__assert_func+0x2c>)
 800649c:	0005      	movs	r5, r0
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	b085      	sub	sp, #20
 80064a2:	68d8      	ldr	r0, [r3, #12]
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <__assert_func+0x30>)
 80064a6:	2c00      	cmp	r4, #0
 80064a8:	d101      	bne.n	80064ae <__assert_func+0x1a>
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <__assert_func+0x34>)
 80064ac:	001c      	movs	r4, r3
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	9100      	str	r1, [sp, #0]
 80064b2:	002b      	movs	r3, r5
 80064b4:	4905      	ldr	r1, [pc, #20]	; (80064cc <__assert_func+0x38>)
 80064b6:	9402      	str	r4, [sp, #8]
 80064b8:	f000 f9b8 	bl	800682c <fiprintf>
 80064bc:	f000 fe98 	bl	80071f0 <abort>
 80064c0:	2000001c 	.word	0x2000001c
 80064c4:	0800797c 	.word	0x0800797c
 80064c8:	080079b7 	.word	0x080079b7
 80064cc:	08007989 	.word	0x08007989

080064d0 <__sflush_r>:
 80064d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d2:	898b      	ldrh	r3, [r1, #12]
 80064d4:	0005      	movs	r5, r0
 80064d6:	000c      	movs	r4, r1
 80064d8:	071a      	lsls	r2, r3, #28
 80064da:	d45f      	bmi.n	800659c <__sflush_r+0xcc>
 80064dc:	684a      	ldr	r2, [r1, #4]
 80064de:	2a00      	cmp	r2, #0
 80064e0:	dc04      	bgt.n	80064ec <__sflush_r+0x1c>
 80064e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	dc01      	bgt.n	80064ec <__sflush_r+0x1c>
 80064e8:	2000      	movs	r0, #0
 80064ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	d0fa      	beq.n	80064e8 <__sflush_r+0x18>
 80064f2:	2200      	movs	r2, #0
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	682e      	ldr	r6, [r5, #0]
 80064f8:	602a      	str	r2, [r5, #0]
 80064fa:	001a      	movs	r2, r3
 80064fc:	0149      	lsls	r1, r1, #5
 80064fe:	400a      	ands	r2, r1
 8006500:	420b      	tst	r3, r1
 8006502:	d034      	beq.n	800656e <__sflush_r+0x9e>
 8006504:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	075b      	lsls	r3, r3, #29
 800650a:	d506      	bpl.n	800651a <__sflush_r+0x4a>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	1ac0      	subs	r0, r0, r3
 8006510:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <__sflush_r+0x4a>
 8006516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006518:	1ac0      	subs	r0, r0, r3
 800651a:	0002      	movs	r2, r0
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	2300      	movs	r3, #0
 8006520:	0028      	movs	r0, r5
 8006522:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006524:	47b8      	blx	r7
 8006526:	89a1      	ldrh	r1, [r4, #12]
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d106      	bne.n	800653a <__sflush_r+0x6a>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	2b1d      	cmp	r3, #29
 8006530:	d831      	bhi.n	8006596 <__sflush_r+0xc6>
 8006532:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <__sflush_r+0x114>)
 8006534:	40da      	lsrs	r2, r3
 8006536:	07d3      	lsls	r3, r2, #31
 8006538:	d52d      	bpl.n	8006596 <__sflush_r+0xc6>
 800653a:	2300      	movs	r3, #0
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	04cb      	lsls	r3, r1, #19
 8006544:	d505      	bpl.n	8006552 <__sflush_r+0x82>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <__sflush_r+0x80>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d100      	bne.n	8006552 <__sflush_r+0x82>
 8006550:	6560      	str	r0, [r4, #84]	; 0x54
 8006552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006554:	602e      	str	r6, [r5, #0]
 8006556:	2900      	cmp	r1, #0
 8006558:	d0c6      	beq.n	80064e8 <__sflush_r+0x18>
 800655a:	0023      	movs	r3, r4
 800655c:	3344      	adds	r3, #68	; 0x44
 800655e:	4299      	cmp	r1, r3
 8006560:	d002      	beq.n	8006568 <__sflush_r+0x98>
 8006562:	0028      	movs	r0, r5
 8006564:	f000 fa0c 	bl	8006980 <_free_r>
 8006568:	2000      	movs	r0, #0
 800656a:	6360      	str	r0, [r4, #52]	; 0x34
 800656c:	e7bd      	b.n	80064ea <__sflush_r+0x1a>
 800656e:	2301      	movs	r3, #1
 8006570:	0028      	movs	r0, r5
 8006572:	6a21      	ldr	r1, [r4, #32]
 8006574:	47b8      	blx	r7
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d1c5      	bne.n	8006506 <__sflush_r+0x36>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0c2      	beq.n	8006506 <__sflush_r+0x36>
 8006580:	2b1d      	cmp	r3, #29
 8006582:	d001      	beq.n	8006588 <__sflush_r+0xb8>
 8006584:	2b16      	cmp	r3, #22
 8006586:	d101      	bne.n	800658c <__sflush_r+0xbc>
 8006588:	602e      	str	r6, [r5, #0]
 800658a:	e7ad      	b.n	80064e8 <__sflush_r+0x18>
 800658c:	2340      	movs	r3, #64	; 0x40
 800658e:	89a2      	ldrh	r2, [r4, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	e7a9      	b.n	80064ea <__sflush_r+0x1a>
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	430b      	orrs	r3, r1
 800659a:	e7fa      	b.n	8006592 <__sflush_r+0xc2>
 800659c:	690f      	ldr	r7, [r1, #16]
 800659e:	2f00      	cmp	r7, #0
 80065a0:	d0a2      	beq.n	80064e8 <__sflush_r+0x18>
 80065a2:	680a      	ldr	r2, [r1, #0]
 80065a4:	600f      	str	r7, [r1, #0]
 80065a6:	1bd2      	subs	r2, r2, r7
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d100      	bne.n	80065b2 <__sflush_r+0xe2>
 80065b0:	694a      	ldr	r2, [r1, #20]
 80065b2:	60a2      	str	r2, [r4, #8]
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dc00      	bgt.n	80065bc <__sflush_r+0xec>
 80065ba:	e795      	b.n	80064e8 <__sflush_r+0x18>
 80065bc:	003a      	movs	r2, r7
 80065be:	0028      	movs	r0, r5
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	6a21      	ldr	r1, [r4, #32]
 80065c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065c6:	47b0      	blx	r6
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dc06      	bgt.n	80065da <__sflush_r+0x10a>
 80065cc:	2340      	movs	r3, #64	; 0x40
 80065ce:	2001      	movs	r0, #1
 80065d0:	89a2      	ldrh	r2, [r4, #12]
 80065d2:	4240      	negs	r0, r0
 80065d4:	4313      	orrs	r3, r2
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	e787      	b.n	80064ea <__sflush_r+0x1a>
 80065da:	9b01      	ldr	r3, [sp, #4]
 80065dc:	183f      	adds	r7, r7, r0
 80065de:	1a1b      	subs	r3, r3, r0
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	e7e7      	b.n	80065b4 <__sflush_r+0xe4>
 80065e4:	20400001 	.word	0x20400001

080065e8 <_fflush_r>:
 80065e8:	690b      	ldr	r3, [r1, #16]
 80065ea:	b570      	push	{r4, r5, r6, lr}
 80065ec:	0005      	movs	r5, r0
 80065ee:	000c      	movs	r4, r1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <_fflush_r+0x12>
 80065f4:	2500      	movs	r5, #0
 80065f6:	0028      	movs	r0, r5
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d004      	beq.n	8006608 <_fflush_r+0x20>
 80065fe:	6983      	ldr	r3, [r0, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <_fflush_r+0x20>
 8006604:	f000 f892 	bl	800672c <__sinit>
 8006608:	4b14      	ldr	r3, [pc, #80]	; (800665c <_fflush_r+0x74>)
 800660a:	429c      	cmp	r4, r3
 800660c:	d11b      	bne.n	8006646 <_fflush_r+0x5e>
 800660e:	686c      	ldr	r4, [r5, #4]
 8006610:	220c      	movs	r2, #12
 8006612:	5ea3      	ldrsh	r3, [r4, r2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ed      	beq.n	80065f4 <_fflush_r+0xc>
 8006618:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800661a:	07d2      	lsls	r2, r2, #31
 800661c:	d404      	bmi.n	8006628 <_fflush_r+0x40>
 800661e:	059b      	lsls	r3, r3, #22
 8006620:	d402      	bmi.n	8006628 <_fflush_r+0x40>
 8006622:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006624:	f000 f933 	bl	800688e <__retarget_lock_acquire_recursive>
 8006628:	0028      	movs	r0, r5
 800662a:	0021      	movs	r1, r4
 800662c:	f7ff ff50 	bl	80064d0 <__sflush_r>
 8006630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006632:	0005      	movs	r5, r0
 8006634:	07db      	lsls	r3, r3, #31
 8006636:	d4de      	bmi.n	80065f6 <_fflush_r+0xe>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	059b      	lsls	r3, r3, #22
 800663c:	d4db      	bmi.n	80065f6 <_fflush_r+0xe>
 800663e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006640:	f000 f926 	bl	8006890 <__retarget_lock_release_recursive>
 8006644:	e7d7      	b.n	80065f6 <_fflush_r+0xe>
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <_fflush_r+0x78>)
 8006648:	429c      	cmp	r4, r3
 800664a:	d101      	bne.n	8006650 <_fflush_r+0x68>
 800664c:	68ac      	ldr	r4, [r5, #8]
 800664e:	e7df      	b.n	8006610 <_fflush_r+0x28>
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <_fflush_r+0x7c>)
 8006652:	429c      	cmp	r4, r3
 8006654:	d1dc      	bne.n	8006610 <_fflush_r+0x28>
 8006656:	68ec      	ldr	r4, [r5, #12]
 8006658:	e7da      	b.n	8006610 <_fflush_r+0x28>
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	08007adc 	.word	0x08007adc
 8006660:	08007afc 	.word	0x08007afc
 8006664:	08007abc 	.word	0x08007abc

08006668 <std>:
 8006668:	2300      	movs	r3, #0
 800666a:	b510      	push	{r4, lr}
 800666c:	0004      	movs	r4, r0
 800666e:	6003      	str	r3, [r0, #0]
 8006670:	6043      	str	r3, [r0, #4]
 8006672:	6083      	str	r3, [r0, #8]
 8006674:	8181      	strh	r1, [r0, #12]
 8006676:	6643      	str	r3, [r0, #100]	; 0x64
 8006678:	0019      	movs	r1, r3
 800667a:	81c2      	strh	r2, [r0, #14]
 800667c:	6103      	str	r3, [r0, #16]
 800667e:	6143      	str	r3, [r0, #20]
 8006680:	6183      	str	r3, [r0, #24]
 8006682:	2208      	movs	r2, #8
 8006684:	305c      	adds	r0, #92	; 0x5c
 8006686:	f7ff fc9b 	bl	8005fc0 <memset>
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <std+0x38>)
 800668c:	6224      	str	r4, [r4, #32]
 800668e:	6263      	str	r3, [r4, #36]	; 0x24
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <std+0x3c>)
 8006692:	62a3      	str	r3, [r4, #40]	; 0x28
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <std+0x40>)
 8006696:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <std+0x44>)
 800669a:	6323      	str	r3, [r4, #48]	; 0x30
 800669c:	bd10      	pop	{r4, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	08007131 	.word	0x08007131
 80066a4:	08007159 	.word	0x08007159
 80066a8:	08007191 	.word	0x08007191
 80066ac:	080071bd 	.word	0x080071bd

080066b0 <_cleanup_r>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4902      	ldr	r1, [pc, #8]	; (80066bc <_cleanup_r+0xc>)
 80066b4:	f000 f8ca 	bl	800684c <_fwalk_reent>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	080065e9 	.word	0x080065e9

080066c0 <__sfmoreglue>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	2568      	movs	r5, #104	; 0x68
 80066c4:	1e4a      	subs	r2, r1, #1
 80066c6:	4355      	muls	r5, r2
 80066c8:	000e      	movs	r6, r1
 80066ca:	0029      	movs	r1, r5
 80066cc:	3174      	adds	r1, #116	; 0x74
 80066ce:	f000 f9c3 	bl	8006a58 <_malloc_r>
 80066d2:	1e04      	subs	r4, r0, #0
 80066d4:	d008      	beq.n	80066e8 <__sfmoreglue+0x28>
 80066d6:	2100      	movs	r1, #0
 80066d8:	002a      	movs	r2, r5
 80066da:	6001      	str	r1, [r0, #0]
 80066dc:	6046      	str	r6, [r0, #4]
 80066de:	300c      	adds	r0, #12
 80066e0:	60a0      	str	r0, [r4, #8]
 80066e2:	3268      	adds	r2, #104	; 0x68
 80066e4:	f7ff fc6c 	bl	8005fc0 <memset>
 80066e8:	0020      	movs	r0, r4
 80066ea:	bd70      	pop	{r4, r5, r6, pc}

080066ec <__sfp_lock_acquire>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	4802      	ldr	r0, [pc, #8]	; (80066f8 <__sfp_lock_acquire+0xc>)
 80066f0:	f000 f8cd 	bl	800688e <__retarget_lock_acquire_recursive>
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	20000189 	.word	0x20000189

080066fc <__sfp_lock_release>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4802      	ldr	r0, [pc, #8]	; (8006708 <__sfp_lock_release+0xc>)
 8006700:	f000 f8c6 	bl	8006890 <__retarget_lock_release_recursive>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	20000189 	.word	0x20000189

0800670c <__sinit_lock_acquire>:
 800670c:	b510      	push	{r4, lr}
 800670e:	4802      	ldr	r0, [pc, #8]	; (8006718 <__sinit_lock_acquire+0xc>)
 8006710:	f000 f8bd 	bl	800688e <__retarget_lock_acquire_recursive>
 8006714:	bd10      	pop	{r4, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	2000018a 	.word	0x2000018a

0800671c <__sinit_lock_release>:
 800671c:	b510      	push	{r4, lr}
 800671e:	4802      	ldr	r0, [pc, #8]	; (8006728 <__sinit_lock_release+0xc>)
 8006720:	f000 f8b6 	bl	8006890 <__retarget_lock_release_recursive>
 8006724:	bd10      	pop	{r4, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	2000018a 	.word	0x2000018a

0800672c <__sinit>:
 800672c:	b513      	push	{r0, r1, r4, lr}
 800672e:	0004      	movs	r4, r0
 8006730:	f7ff ffec 	bl	800670c <__sinit_lock_acquire>
 8006734:	69a3      	ldr	r3, [r4, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <__sinit+0x14>
 800673a:	f7ff ffef 	bl	800671c <__sinit_lock_release>
 800673e:	bd13      	pop	{r0, r1, r4, pc}
 8006740:	64a3      	str	r3, [r4, #72]	; 0x48
 8006742:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006744:	6523      	str	r3, [r4, #80]	; 0x50
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <__sinit+0x68>)
 8006748:	4a13      	ldr	r2, [pc, #76]	; (8006798 <__sinit+0x6c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	62a2      	str	r2, [r4, #40]	; 0x28
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	42a3      	cmp	r3, r4
 8006752:	d101      	bne.n	8006758 <__sinit+0x2c>
 8006754:	2301      	movs	r3, #1
 8006756:	61a3      	str	r3, [r4, #24]
 8006758:	0020      	movs	r0, r4
 800675a:	f000 f81f 	bl	800679c <__sfp>
 800675e:	6060      	str	r0, [r4, #4]
 8006760:	0020      	movs	r0, r4
 8006762:	f000 f81b 	bl	800679c <__sfp>
 8006766:	60a0      	str	r0, [r4, #8]
 8006768:	0020      	movs	r0, r4
 800676a:	f000 f817 	bl	800679c <__sfp>
 800676e:	2200      	movs	r2, #0
 8006770:	2104      	movs	r1, #4
 8006772:	60e0      	str	r0, [r4, #12]
 8006774:	6860      	ldr	r0, [r4, #4]
 8006776:	f7ff ff77 	bl	8006668 <std>
 800677a:	2201      	movs	r2, #1
 800677c:	2109      	movs	r1, #9
 800677e:	68a0      	ldr	r0, [r4, #8]
 8006780:	f7ff ff72 	bl	8006668 <std>
 8006784:	2202      	movs	r2, #2
 8006786:	2112      	movs	r1, #18
 8006788:	68e0      	ldr	r0, [r4, #12]
 800678a:	f7ff ff6d 	bl	8006668 <std>
 800678e:	2301      	movs	r3, #1
 8006790:	61a3      	str	r3, [r4, #24]
 8006792:	e7d2      	b.n	800673a <__sinit+0xe>
 8006794:	08007904 	.word	0x08007904
 8006798:	080066b1 	.word	0x080066b1

0800679c <__sfp>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	0007      	movs	r7, r0
 80067a0:	f7ff ffa4 	bl	80066ec <__sfp_lock_acquire>
 80067a4:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <__sfp+0x88>)
 80067a6:	681e      	ldr	r6, [r3, #0]
 80067a8:	69b3      	ldr	r3, [r6, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <__sfp+0x18>
 80067ae:	0030      	movs	r0, r6
 80067b0:	f7ff ffbc 	bl	800672c <__sinit>
 80067b4:	3648      	adds	r6, #72	; 0x48
 80067b6:	68b4      	ldr	r4, [r6, #8]
 80067b8:	6873      	ldr	r3, [r6, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	d504      	bpl.n	80067c8 <__sfp+0x2c>
 80067be:	6833      	ldr	r3, [r6, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d022      	beq.n	800680a <__sfp+0x6e>
 80067c4:	6836      	ldr	r6, [r6, #0]
 80067c6:	e7f6      	b.n	80067b6 <__sfp+0x1a>
 80067c8:	220c      	movs	r2, #12
 80067ca:	5ea5      	ldrsh	r5, [r4, r2]
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	d11a      	bne.n	8006806 <__sfp+0x6a>
 80067d0:	0020      	movs	r0, r4
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <__sfp+0x8c>)
 80067d4:	3058      	adds	r0, #88	; 0x58
 80067d6:	60e3      	str	r3, [r4, #12]
 80067d8:	6665      	str	r5, [r4, #100]	; 0x64
 80067da:	f000 f857 	bl	800688c <__retarget_lock_init_recursive>
 80067de:	f7ff ff8d 	bl	80066fc <__sfp_lock_release>
 80067e2:	0020      	movs	r0, r4
 80067e4:	2208      	movs	r2, #8
 80067e6:	0029      	movs	r1, r5
 80067e8:	6025      	str	r5, [r4, #0]
 80067ea:	60a5      	str	r5, [r4, #8]
 80067ec:	6065      	str	r5, [r4, #4]
 80067ee:	6125      	str	r5, [r4, #16]
 80067f0:	6165      	str	r5, [r4, #20]
 80067f2:	61a5      	str	r5, [r4, #24]
 80067f4:	305c      	adds	r0, #92	; 0x5c
 80067f6:	f7ff fbe3 	bl	8005fc0 <memset>
 80067fa:	6365      	str	r5, [r4, #52]	; 0x34
 80067fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80067fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8006800:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006802:	0020      	movs	r0, r4
 8006804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006806:	3468      	adds	r4, #104	; 0x68
 8006808:	e7d7      	b.n	80067ba <__sfp+0x1e>
 800680a:	2104      	movs	r1, #4
 800680c:	0038      	movs	r0, r7
 800680e:	f7ff ff57 	bl	80066c0 <__sfmoreglue>
 8006812:	1e04      	subs	r4, r0, #0
 8006814:	6030      	str	r0, [r6, #0]
 8006816:	d1d5      	bne.n	80067c4 <__sfp+0x28>
 8006818:	f7ff ff70 	bl	80066fc <__sfp_lock_release>
 800681c:	230c      	movs	r3, #12
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	e7ef      	b.n	8006802 <__sfp+0x66>
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	08007904 	.word	0x08007904
 8006828:	ffff0001 	.word	0xffff0001

0800682c <fiprintf>:
 800682c:	b40e      	push	{r1, r2, r3}
 800682e:	b503      	push	{r0, r1, lr}
 8006830:	0001      	movs	r1, r0
 8006832:	ab03      	add	r3, sp, #12
 8006834:	4804      	ldr	r0, [pc, #16]	; (8006848 <fiprintf+0x1c>)
 8006836:	cb04      	ldmia	r3!, {r2}
 8006838:	6800      	ldr	r0, [r0, #0]
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	f000 f9aa 	bl	8006b94 <_vfiprintf_r>
 8006840:	b002      	add	sp, #8
 8006842:	bc08      	pop	{r3}
 8006844:	b003      	add	sp, #12
 8006846:	4718      	bx	r3
 8006848:	2000001c 	.word	0x2000001c

0800684c <_fwalk_reent>:
 800684c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684e:	0004      	movs	r4, r0
 8006850:	0006      	movs	r6, r0
 8006852:	2700      	movs	r7, #0
 8006854:	9101      	str	r1, [sp, #4]
 8006856:	3448      	adds	r4, #72	; 0x48
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	68a5      	ldr	r5, [r4, #8]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	9b00      	ldr	r3, [sp, #0]
 8006860:	3b01      	subs	r3, #1
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	d504      	bpl.n	8006870 <_fwalk_reent+0x24>
 8006866:	6824      	ldr	r4, [r4, #0]
 8006868:	2c00      	cmp	r4, #0
 800686a:	d1f5      	bne.n	8006858 <_fwalk_reent+0xc>
 800686c:	0038      	movs	r0, r7
 800686e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006870:	89ab      	ldrh	r3, [r5, #12]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d908      	bls.n	8006888 <_fwalk_reent+0x3c>
 8006876:	220e      	movs	r2, #14
 8006878:	5eab      	ldrsh	r3, [r5, r2]
 800687a:	3301      	adds	r3, #1
 800687c:	d004      	beq.n	8006888 <_fwalk_reent+0x3c>
 800687e:	0029      	movs	r1, r5
 8006880:	0030      	movs	r0, r6
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	4798      	blx	r3
 8006886:	4307      	orrs	r7, r0
 8006888:	3568      	adds	r5, #104	; 0x68
 800688a:	e7e8      	b.n	800685e <_fwalk_reent+0x12>

0800688c <__retarget_lock_init_recursive>:
 800688c:	4770      	bx	lr

0800688e <__retarget_lock_acquire_recursive>:
 800688e:	4770      	bx	lr

08006890 <__retarget_lock_release_recursive>:
 8006890:	4770      	bx	lr
	...

08006894 <__swhatbuf_r>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	000e      	movs	r6, r1
 8006898:	001d      	movs	r5, r3
 800689a:	230e      	movs	r3, #14
 800689c:	5ec9      	ldrsh	r1, [r1, r3]
 800689e:	0014      	movs	r4, r2
 80068a0:	b096      	sub	sp, #88	; 0x58
 80068a2:	2900      	cmp	r1, #0
 80068a4:	da08      	bge.n	80068b8 <__swhatbuf_r+0x24>
 80068a6:	220c      	movs	r2, #12
 80068a8:	5eb3      	ldrsh	r3, [r6, r2]
 80068aa:	2200      	movs	r2, #0
 80068ac:	602a      	str	r2, [r5, #0]
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	d411      	bmi.n	80068d6 <__swhatbuf_r+0x42>
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	e00f      	b.n	80068d8 <__swhatbuf_r+0x44>
 80068b8:	466a      	mov	r2, sp
 80068ba:	f000 fcb3 	bl	8007224 <_fstat_r>
 80068be:	2800      	cmp	r0, #0
 80068c0:	dbf1      	blt.n	80068a6 <__swhatbuf_r+0x12>
 80068c2:	23f0      	movs	r3, #240	; 0xf0
 80068c4:	9901      	ldr	r1, [sp, #4]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	4019      	ands	r1, r3
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <__swhatbuf_r+0x4c>)
 80068cc:	18c9      	adds	r1, r1, r3
 80068ce:	424b      	negs	r3, r1
 80068d0:	4159      	adcs	r1, r3
 80068d2:	6029      	str	r1, [r5, #0]
 80068d4:	e7ed      	b.n	80068b2 <__swhatbuf_r+0x1e>
 80068d6:	2340      	movs	r3, #64	; 0x40
 80068d8:	2000      	movs	r0, #0
 80068da:	6023      	str	r3, [r4, #0]
 80068dc:	b016      	add	sp, #88	; 0x58
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	ffffe000 	.word	0xffffe000

080068e4 <__smakebuf_r>:
 80068e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068e6:	2602      	movs	r6, #2
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	0005      	movs	r5, r0
 80068ec:	000c      	movs	r4, r1
 80068ee:	4233      	tst	r3, r6
 80068f0:	d006      	beq.n	8006900 <__smakebuf_r+0x1c>
 80068f2:	0023      	movs	r3, r4
 80068f4:	3347      	adds	r3, #71	; 0x47
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	2301      	movs	r3, #1
 80068fc:	6163      	str	r3, [r4, #20]
 80068fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006900:	466a      	mov	r2, sp
 8006902:	ab01      	add	r3, sp, #4
 8006904:	f7ff ffc6 	bl	8006894 <__swhatbuf_r>
 8006908:	9900      	ldr	r1, [sp, #0]
 800690a:	0007      	movs	r7, r0
 800690c:	0028      	movs	r0, r5
 800690e:	f000 f8a3 	bl	8006a58 <_malloc_r>
 8006912:	2800      	cmp	r0, #0
 8006914:	d108      	bne.n	8006928 <__smakebuf_r+0x44>
 8006916:	220c      	movs	r2, #12
 8006918:	5ea3      	ldrsh	r3, [r4, r2]
 800691a:	059a      	lsls	r2, r3, #22
 800691c:	d4ef      	bmi.n	80068fe <__smakebuf_r+0x1a>
 800691e:	2203      	movs	r2, #3
 8006920:	4393      	bics	r3, r2
 8006922:	431e      	orrs	r6, r3
 8006924:	81a6      	strh	r6, [r4, #12]
 8006926:	e7e4      	b.n	80068f2 <__smakebuf_r+0xe>
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <__smakebuf_r+0x84>)
 800692a:	62ab      	str	r3, [r5, #40]	; 0x28
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	89a2      	ldrh	r2, [r4, #12]
 8006930:	6020      	str	r0, [r4, #0]
 8006932:	4313      	orrs	r3, r2
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	6120      	str	r0, [r4, #16]
 800693a:	6163      	str	r3, [r4, #20]
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <__smakebuf_r+0x7a>
 8006942:	0028      	movs	r0, r5
 8006944:	230e      	movs	r3, #14
 8006946:	5ee1      	ldrsh	r1, [r4, r3]
 8006948:	f000 fc7e 	bl	8007248 <_isatty_r>
 800694c:	2800      	cmp	r0, #0
 800694e:	d006      	beq.n	800695e <__smakebuf_r+0x7a>
 8006950:	2203      	movs	r2, #3
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	4393      	bics	r3, r2
 8006956:	001a      	movs	r2, r3
 8006958:	2301      	movs	r3, #1
 800695a:	4313      	orrs	r3, r2
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	89a0      	ldrh	r0, [r4, #12]
 8006960:	4307      	orrs	r7, r0
 8006962:	81a7      	strh	r7, [r4, #12]
 8006964:	e7cb      	b.n	80068fe <__smakebuf_r+0x1a>
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	080066b1 	.word	0x080066b1

0800696c <malloc>:
 800696c:	b510      	push	{r4, lr}
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <malloc+0x10>)
 8006970:	0001      	movs	r1, r0
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	f000 f870 	bl	8006a58 <_malloc_r>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	2000001c 	.word	0x2000001c

08006980 <_free_r>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	0005      	movs	r5, r0
 8006984:	2900      	cmp	r1, #0
 8006986:	d010      	beq.n	80069aa <_free_r+0x2a>
 8006988:	1f0c      	subs	r4, r1, #4
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	da00      	bge.n	8006992 <_free_r+0x12>
 8006990:	18e4      	adds	r4, r4, r3
 8006992:	0028      	movs	r0, r5
 8006994:	f000 fc8a 	bl	80072ac <__malloc_lock>
 8006998:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <_free_r+0x90>)
 800699a:	6813      	ldr	r3, [r2, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <_free_r+0x2c>
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	6014      	str	r4, [r2, #0]
 80069a4:	0028      	movs	r0, r5
 80069a6:	f000 fc89 	bl	80072bc <__malloc_unlock>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	d908      	bls.n	80069c2 <_free_r+0x42>
 80069b0:	6821      	ldr	r1, [r4, #0]
 80069b2:	1860      	adds	r0, r4, r1
 80069b4:	4283      	cmp	r3, r0
 80069b6:	d1f3      	bne.n	80069a0 <_free_r+0x20>
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	1841      	adds	r1, r0, r1
 80069be:	6021      	str	r1, [r4, #0]
 80069c0:	e7ee      	b.n	80069a0 <_free_r+0x20>
 80069c2:	001a      	movs	r2, r3
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <_free_r+0x4e>
 80069ca:	42a3      	cmp	r3, r4
 80069cc:	d9f9      	bls.n	80069c2 <_free_r+0x42>
 80069ce:	6811      	ldr	r1, [r2, #0]
 80069d0:	1850      	adds	r0, r2, r1
 80069d2:	42a0      	cmp	r0, r4
 80069d4:	d10b      	bne.n	80069ee <_free_r+0x6e>
 80069d6:	6820      	ldr	r0, [r4, #0]
 80069d8:	1809      	adds	r1, r1, r0
 80069da:	1850      	adds	r0, r2, r1
 80069dc:	6011      	str	r1, [r2, #0]
 80069de:	4283      	cmp	r3, r0
 80069e0:	d1e0      	bne.n	80069a4 <_free_r+0x24>
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	1841      	adds	r1, r0, r1
 80069e8:	6011      	str	r1, [r2, #0]
 80069ea:	6053      	str	r3, [r2, #4]
 80069ec:	e7da      	b.n	80069a4 <_free_r+0x24>
 80069ee:	42a0      	cmp	r0, r4
 80069f0:	d902      	bls.n	80069f8 <_free_r+0x78>
 80069f2:	230c      	movs	r3, #12
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	e7d5      	b.n	80069a4 <_free_r+0x24>
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	1860      	adds	r0, r4, r1
 80069fc:	4283      	cmp	r3, r0
 80069fe:	d103      	bne.n	8006a08 <_free_r+0x88>
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	1841      	adds	r1, r0, r1
 8006a06:	6021      	str	r1, [r4, #0]
 8006a08:	6063      	str	r3, [r4, #4]
 8006a0a:	6054      	str	r4, [r2, #4]
 8006a0c:	e7ca      	b.n	80069a4 <_free_r+0x24>
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	2000018c 	.word	0x2000018c

08006a14 <sbrk_aligned>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4e0f      	ldr	r6, [pc, #60]	; (8006a54 <sbrk_aligned+0x40>)
 8006a18:	000d      	movs	r5, r1
 8006a1a:	6831      	ldr	r1, [r6, #0]
 8006a1c:	0004      	movs	r4, r0
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d102      	bne.n	8006a28 <sbrk_aligned+0x14>
 8006a22:	f000 fb73 	bl	800710c <_sbrk_r>
 8006a26:	6030      	str	r0, [r6, #0]
 8006a28:	0029      	movs	r1, r5
 8006a2a:	0020      	movs	r0, r4
 8006a2c:	f000 fb6e 	bl	800710c <_sbrk_r>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d00a      	beq.n	8006a4a <sbrk_aligned+0x36>
 8006a34:	2303      	movs	r3, #3
 8006a36:	1cc5      	adds	r5, r0, #3
 8006a38:	439d      	bics	r5, r3
 8006a3a:	42a8      	cmp	r0, r5
 8006a3c:	d007      	beq.n	8006a4e <sbrk_aligned+0x3a>
 8006a3e:	1a29      	subs	r1, r5, r0
 8006a40:	0020      	movs	r0, r4
 8006a42:	f000 fb63 	bl	800710c <_sbrk_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d101      	bne.n	8006a4e <sbrk_aligned+0x3a>
 8006a4a:	2501      	movs	r5, #1
 8006a4c:	426d      	negs	r5, r5
 8006a4e:	0028      	movs	r0, r5
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	20000190 	.word	0x20000190

08006a58 <_malloc_r>:
 8006a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	1ccb      	adds	r3, r1, #3
 8006a5e:	4393      	bics	r3, r2
 8006a60:	3308      	adds	r3, #8
 8006a62:	0006      	movs	r6, r0
 8006a64:	001f      	movs	r7, r3
 8006a66:	2b0c      	cmp	r3, #12
 8006a68:	d232      	bcs.n	8006ad0 <_malloc_r+0x78>
 8006a6a:	270c      	movs	r7, #12
 8006a6c:	42b9      	cmp	r1, r7
 8006a6e:	d831      	bhi.n	8006ad4 <_malloc_r+0x7c>
 8006a70:	0030      	movs	r0, r6
 8006a72:	f000 fc1b 	bl	80072ac <__malloc_lock>
 8006a76:	4d32      	ldr	r5, [pc, #200]	; (8006b40 <_malloc_r+0xe8>)
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	001c      	movs	r4, r3
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	d12e      	bne.n	8006ade <_malloc_r+0x86>
 8006a80:	0039      	movs	r1, r7
 8006a82:	0030      	movs	r0, r6
 8006a84:	f7ff ffc6 	bl	8006a14 <sbrk_aligned>
 8006a88:	0004      	movs	r4, r0
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d11e      	bne.n	8006acc <_malloc_r+0x74>
 8006a8e:	682c      	ldr	r4, [r5, #0]
 8006a90:	0025      	movs	r5, r4
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	d14a      	bne.n	8006b2c <_malloc_r+0xd4>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	0029      	movs	r1, r5
 8006a9a:	18e3      	adds	r3, r4, r3
 8006a9c:	0030      	movs	r0, r6
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	f000 fb34 	bl	800710c <_sbrk_r>
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	4283      	cmp	r3, r0
 8006aa8:	d143      	bne.n	8006b32 <_malloc_r+0xda>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	3703      	adds	r7, #3
 8006aae:	1aff      	subs	r7, r7, r3
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	439f      	bics	r7, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	2f0c      	cmp	r7, #12
 8006ab8:	d200      	bcs.n	8006abc <_malloc_r+0x64>
 8006aba:	270c      	movs	r7, #12
 8006abc:	0039      	movs	r1, r7
 8006abe:	0030      	movs	r0, r6
 8006ac0:	f7ff ffa8 	bl	8006a14 <sbrk_aligned>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d034      	beq.n	8006b32 <_malloc_r+0xda>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	19df      	adds	r7, r3, r7
 8006acc:	6027      	str	r7, [r4, #0]
 8006ace:	e013      	b.n	8006af8 <_malloc_r+0xa0>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dacb      	bge.n	8006a6c <_malloc_r+0x14>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	0028      	movs	r0, r5
 8006adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	1bd1      	subs	r1, r2, r7
 8006ae2:	d420      	bmi.n	8006b26 <_malloc_r+0xce>
 8006ae4:	290b      	cmp	r1, #11
 8006ae6:	d917      	bls.n	8006b18 <_malloc_r+0xc0>
 8006ae8:	19e2      	adds	r2, r4, r7
 8006aea:	6027      	str	r7, [r4, #0]
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d111      	bne.n	8006b14 <_malloc_r+0xbc>
 8006af0:	602a      	str	r2, [r5, #0]
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	0030      	movs	r0, r6
 8006afa:	0025      	movs	r5, r4
 8006afc:	f000 fbde 	bl	80072bc <__malloc_unlock>
 8006b00:	2207      	movs	r2, #7
 8006b02:	350b      	adds	r5, #11
 8006b04:	1d23      	adds	r3, r4, #4
 8006b06:	4395      	bics	r5, r2
 8006b08:	1aea      	subs	r2, r5, r3
 8006b0a:	429d      	cmp	r5, r3
 8006b0c:	d0e5      	beq.n	8006ada <_malloc_r+0x82>
 8006b0e:	1b5b      	subs	r3, r3, r5
 8006b10:	50a3      	str	r3, [r4, r2]
 8006b12:	e7e2      	b.n	8006ada <_malloc_r+0x82>
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	e7ec      	b.n	8006af2 <_malloc_r+0x9a>
 8006b18:	6862      	ldr	r2, [r4, #4]
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	d101      	bne.n	8006b22 <_malloc_r+0xca>
 8006b1e:	602a      	str	r2, [r5, #0]
 8006b20:	e7ea      	b.n	8006af8 <_malloc_r+0xa0>
 8006b22:	605a      	str	r2, [r3, #4]
 8006b24:	e7e8      	b.n	8006af8 <_malloc_r+0xa0>
 8006b26:	0023      	movs	r3, r4
 8006b28:	6864      	ldr	r4, [r4, #4]
 8006b2a:	e7a7      	b.n	8006a7c <_malloc_r+0x24>
 8006b2c:	002c      	movs	r4, r5
 8006b2e:	686d      	ldr	r5, [r5, #4]
 8006b30:	e7af      	b.n	8006a92 <_malloc_r+0x3a>
 8006b32:	230c      	movs	r3, #12
 8006b34:	0030      	movs	r0, r6
 8006b36:	6033      	str	r3, [r6, #0]
 8006b38:	f000 fbc0 	bl	80072bc <__malloc_unlock>
 8006b3c:	e7cd      	b.n	8006ada <_malloc_r+0x82>
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	2000018c 	.word	0x2000018c

08006b44 <__sfputc_r>:
 8006b44:	6893      	ldr	r3, [r2, #8]
 8006b46:	b510      	push	{r4, lr}
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	6093      	str	r3, [r2, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da04      	bge.n	8006b5a <__sfputc_r+0x16>
 8006b50:	6994      	ldr	r4, [r2, #24]
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	db07      	blt.n	8006b66 <__sfputc_r+0x22>
 8006b56:	290a      	cmp	r1, #10
 8006b58:	d005      	beq.n	8006b66 <__sfputc_r+0x22>
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	1c58      	adds	r0, r3, #1
 8006b5e:	6010      	str	r0, [r2, #0]
 8006b60:	7019      	strb	r1, [r3, #0]
 8006b62:	0008      	movs	r0, r1
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	f7ff fbc7 	bl	80062f8 <__swbuf_r>
 8006b6a:	0001      	movs	r1, r0
 8006b6c:	e7f9      	b.n	8006b62 <__sfputc_r+0x1e>

08006b6e <__sfputs_r>:
 8006b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b70:	0006      	movs	r6, r0
 8006b72:	000f      	movs	r7, r1
 8006b74:	0014      	movs	r4, r2
 8006b76:	18d5      	adds	r5, r2, r3
 8006b78:	42ac      	cmp	r4, r5
 8006b7a:	d101      	bne.n	8006b80 <__sfputs_r+0x12>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e007      	b.n	8006b90 <__sfputs_r+0x22>
 8006b80:	7821      	ldrb	r1, [r4, #0]
 8006b82:	003a      	movs	r2, r7
 8006b84:	0030      	movs	r0, r6
 8006b86:	f7ff ffdd 	bl	8006b44 <__sfputc_r>
 8006b8a:	3401      	adds	r4, #1
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d1f3      	bne.n	8006b78 <__sfputs_r+0xa>
 8006b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b94 <_vfiprintf_r>:
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	b0a1      	sub	sp, #132	; 0x84
 8006b98:	0006      	movs	r6, r0
 8006b9a:	000c      	movs	r4, r1
 8006b9c:	001f      	movs	r7, r3
 8006b9e:	9203      	str	r2, [sp, #12]
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d004      	beq.n	8006bae <_vfiprintf_r+0x1a>
 8006ba4:	6983      	ldr	r3, [r0, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <_vfiprintf_r+0x1a>
 8006baa:	f7ff fdbf 	bl	800672c <__sinit>
 8006bae:	4b8e      	ldr	r3, [pc, #568]	; (8006de8 <_vfiprintf_r+0x254>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d11c      	bne.n	8006bee <_vfiprintf_r+0x5a>
 8006bb4:	6874      	ldr	r4, [r6, #4]
 8006bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d405      	bmi.n	8006bc8 <_vfiprintf_r+0x34>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	059b      	lsls	r3, r3, #22
 8006bc0:	d402      	bmi.n	8006bc8 <_vfiprintf_r+0x34>
 8006bc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc4:	f7ff fe63 	bl	800688e <__retarget_lock_acquire_recursive>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	071b      	lsls	r3, r3, #28
 8006bcc:	d502      	bpl.n	8006bd4 <_vfiprintf_r+0x40>
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11d      	bne.n	8006c10 <_vfiprintf_r+0x7c>
 8006bd4:	0021      	movs	r1, r4
 8006bd6:	0030      	movs	r0, r6
 8006bd8:	f7ff fbe4 	bl	80063a4 <__swsetup_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d017      	beq.n	8006c10 <_vfiprintf_r+0x7c>
 8006be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006be2:	07db      	lsls	r3, r3, #31
 8006be4:	d50d      	bpl.n	8006c02 <_vfiprintf_r+0x6e>
 8006be6:	2001      	movs	r0, #1
 8006be8:	4240      	negs	r0, r0
 8006bea:	b021      	add	sp, #132	; 0x84
 8006bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bee:	4b7f      	ldr	r3, [pc, #508]	; (8006dec <_vfiprintf_r+0x258>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d101      	bne.n	8006bf8 <_vfiprintf_r+0x64>
 8006bf4:	68b4      	ldr	r4, [r6, #8]
 8006bf6:	e7de      	b.n	8006bb6 <_vfiprintf_r+0x22>
 8006bf8:	4b7d      	ldr	r3, [pc, #500]	; (8006df0 <_vfiprintf_r+0x25c>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d1db      	bne.n	8006bb6 <_vfiprintf_r+0x22>
 8006bfe:	68f4      	ldr	r4, [r6, #12]
 8006c00:	e7d9      	b.n	8006bb6 <_vfiprintf_r+0x22>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	d4ee      	bmi.n	8006be6 <_vfiprintf_r+0x52>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f7ff fe41 	bl	8006890 <__retarget_lock_release_recursive>
 8006c0e:	e7ea      	b.n	8006be6 <_vfiprintf_r+0x52>
 8006c10:	2300      	movs	r3, #0
 8006c12:	ad08      	add	r5, sp, #32
 8006c14:	616b      	str	r3, [r5, #20]
 8006c16:	3320      	adds	r3, #32
 8006c18:	766b      	strb	r3, [r5, #25]
 8006c1a:	3310      	adds	r3, #16
 8006c1c:	76ab      	strb	r3, [r5, #26]
 8006c1e:	9707      	str	r7, [sp, #28]
 8006c20:	9f03      	ldr	r7, [sp, #12]
 8006c22:	783b      	ldrb	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <_vfiprintf_r+0x98>
 8006c28:	2b25      	cmp	r3, #37	; 0x25
 8006c2a:	d14e      	bne.n	8006cca <_vfiprintf_r+0x136>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	1afb      	subs	r3, r7, r3
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	429f      	cmp	r7, r3
 8006c36:	d00d      	beq.n	8006c54 <_vfiprintf_r+0xc0>
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	0021      	movs	r1, r4
 8006c3c:	0030      	movs	r0, r6
 8006c3e:	9a03      	ldr	r2, [sp, #12]
 8006c40:	f7ff ff95 	bl	8006b6e <__sfputs_r>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d100      	bne.n	8006c4a <_vfiprintf_r+0xb6>
 8006c48:	e0b5      	b.n	8006db6 <_vfiprintf_r+0x222>
 8006c4a:	696a      	ldr	r2, [r5, #20]
 8006c4c:	9b05      	ldr	r3, [sp, #20]
 8006c4e:	4694      	mov	ip, r2
 8006c50:	4463      	add	r3, ip
 8006c52:	616b      	str	r3, [r5, #20]
 8006c54:	783b      	ldrb	r3, [r7, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d100      	bne.n	8006c5c <_vfiprintf_r+0xc8>
 8006c5a:	e0ac      	b.n	8006db6 <_vfiprintf_r+0x222>
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	1c7b      	adds	r3, r7, #1
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	2300      	movs	r3, #0
 8006c64:	4252      	negs	r2, r2
 8006c66:	606a      	str	r2, [r5, #4]
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	3254      	adds	r2, #84	; 0x54
 8006c6c:	1852      	adds	r2, r2, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	60eb      	str	r3, [r5, #12]
 8006c72:	60ab      	str	r3, [r5, #8]
 8006c74:	7013      	strb	r3, [r2, #0]
 8006c76:	65ab      	str	r3, [r5, #88]	; 0x58
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	7819      	ldrb	r1, [r3, #0]
 8006c7e:	485d      	ldr	r0, [pc, #372]	; (8006df4 <_vfiprintf_r+0x260>)
 8006c80:	f000 fb08 	bl	8007294 <memchr>
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	1c5f      	adds	r7, r3, #1
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d120      	bne.n	8006cce <_vfiprintf_r+0x13a>
 8006c8c:	682a      	ldr	r2, [r5, #0]
 8006c8e:	06d3      	lsls	r3, r2, #27
 8006c90:	d504      	bpl.n	8006c9c <_vfiprintf_r+0x108>
 8006c92:	2353      	movs	r3, #83	; 0x53
 8006c94:	a904      	add	r1, sp, #16
 8006c96:	185b      	adds	r3, r3, r1
 8006c98:	2120      	movs	r1, #32
 8006c9a:	7019      	strb	r1, [r3, #0]
 8006c9c:	0713      	lsls	r3, r2, #28
 8006c9e:	d504      	bpl.n	8006caa <_vfiprintf_r+0x116>
 8006ca0:	2353      	movs	r3, #83	; 0x53
 8006ca2:	a904      	add	r1, sp, #16
 8006ca4:	185b      	adds	r3, r3, r1
 8006ca6:	212b      	movs	r1, #43	; 0x2b
 8006ca8:	7019      	strb	r1, [r3, #0]
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb0:	d016      	beq.n	8006ce0 <_vfiprintf_r+0x14c>
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68eb      	ldr	r3, [r5, #12]
 8006cb6:	9f03      	ldr	r7, [sp, #12]
 8006cb8:	783a      	ldrb	r2, [r7, #0]
 8006cba:	1c78      	adds	r0, r7, #1
 8006cbc:	3a30      	subs	r2, #48	; 0x30
 8006cbe:	4684      	mov	ip, r0
 8006cc0:	2a09      	cmp	r2, #9
 8006cc2:	d94f      	bls.n	8006d64 <_vfiprintf_r+0x1d0>
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d111      	bne.n	8006cec <_vfiprintf_r+0x158>
 8006cc8:	e017      	b.n	8006cfa <_vfiprintf_r+0x166>
 8006cca:	3701      	adds	r7, #1
 8006ccc:	e7a9      	b.n	8006c22 <_vfiprintf_r+0x8e>
 8006cce:	4b49      	ldr	r3, [pc, #292]	; (8006df4 <_vfiprintf_r+0x260>)
 8006cd0:	682a      	ldr	r2, [r5, #0]
 8006cd2:	1ac0      	subs	r0, r0, r3
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4083      	lsls	r3, r0
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	9703      	str	r7, [sp, #12]
 8006cde:	e7cb      	b.n	8006c78 <_vfiprintf_r+0xe4>
 8006ce0:	9b07      	ldr	r3, [sp, #28]
 8006ce2:	1d19      	adds	r1, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	9107      	str	r1, [sp, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	db01      	blt.n	8006cf0 <_vfiprintf_r+0x15c>
 8006cec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cee:	e004      	b.n	8006cfa <_vfiprintf_r+0x166>
 8006cf0:	425b      	negs	r3, r3
 8006cf2:	60eb      	str	r3, [r5, #12]
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	783b      	ldrb	r3, [r7, #0]
 8006cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfe:	d10a      	bne.n	8006d16 <_vfiprintf_r+0x182>
 8006d00:	787b      	ldrb	r3, [r7, #1]
 8006d02:	2b2a      	cmp	r3, #42	; 0x2a
 8006d04:	d137      	bne.n	8006d76 <_vfiprintf_r+0x1e2>
 8006d06:	9b07      	ldr	r3, [sp, #28]
 8006d08:	3702      	adds	r7, #2
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9207      	str	r2, [sp, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db2d      	blt.n	8006d70 <_vfiprintf_r+0x1dc>
 8006d14:	9309      	str	r3, [sp, #36]	; 0x24
 8006d16:	2203      	movs	r2, #3
 8006d18:	7839      	ldrb	r1, [r7, #0]
 8006d1a:	4837      	ldr	r0, [pc, #220]	; (8006df8 <_vfiprintf_r+0x264>)
 8006d1c:	f000 faba 	bl	8007294 <memchr>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d007      	beq.n	8006d34 <_vfiprintf_r+0x1a0>
 8006d24:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <_vfiprintf_r+0x264>)
 8006d26:	682a      	ldr	r2, [r5, #0]
 8006d28:	1ac0      	subs	r0, r0, r3
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	4083      	lsls	r3, r0
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	3701      	adds	r7, #1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	7839      	ldrb	r1, [r7, #0]
 8006d36:	1c7b      	adds	r3, r7, #1
 8006d38:	2206      	movs	r2, #6
 8006d3a:	4830      	ldr	r0, [pc, #192]	; (8006dfc <_vfiprintf_r+0x268>)
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	7629      	strb	r1, [r5, #24]
 8006d40:	f000 faa8 	bl	8007294 <memchr>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d045      	beq.n	8006dd4 <_vfiprintf_r+0x240>
 8006d48:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <_vfiprintf_r+0x26c>)
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d127      	bne.n	8006d9e <_vfiprintf_r+0x20a>
 8006d4e:	2207      	movs	r2, #7
 8006d50:	9b07      	ldr	r3, [sp, #28]
 8006d52:	3307      	adds	r3, #7
 8006d54:	4393      	bics	r3, r2
 8006d56:	3308      	adds	r3, #8
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	696b      	ldr	r3, [r5, #20]
 8006d5c:	9a04      	ldr	r2, [sp, #16]
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	616b      	str	r3, [r5, #20]
 8006d62:	e75d      	b.n	8006c20 <_vfiprintf_r+0x8c>
 8006d64:	210a      	movs	r1, #10
 8006d66:	434b      	muls	r3, r1
 8006d68:	4667      	mov	r7, ip
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	3909      	subs	r1, #9
 8006d6e:	e7a3      	b.n	8006cb8 <_vfiprintf_r+0x124>
 8006d70:	2301      	movs	r3, #1
 8006d72:	425b      	negs	r3, r3
 8006d74:	e7ce      	b.n	8006d14 <_vfiprintf_r+0x180>
 8006d76:	2300      	movs	r3, #0
 8006d78:	001a      	movs	r2, r3
 8006d7a:	3701      	adds	r7, #1
 8006d7c:	606b      	str	r3, [r5, #4]
 8006d7e:	7839      	ldrb	r1, [r7, #0]
 8006d80:	1c78      	adds	r0, r7, #1
 8006d82:	3930      	subs	r1, #48	; 0x30
 8006d84:	4684      	mov	ip, r0
 8006d86:	2909      	cmp	r1, #9
 8006d88:	d903      	bls.n	8006d92 <_vfiprintf_r+0x1fe>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0c3      	beq.n	8006d16 <_vfiprintf_r+0x182>
 8006d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d90:	e7c1      	b.n	8006d16 <_vfiprintf_r+0x182>
 8006d92:	230a      	movs	r3, #10
 8006d94:	435a      	muls	r2, r3
 8006d96:	4667      	mov	r7, ip
 8006d98:	1852      	adds	r2, r2, r1
 8006d9a:	3b09      	subs	r3, #9
 8006d9c:	e7ef      	b.n	8006d7e <_vfiprintf_r+0x1ea>
 8006d9e:	ab07      	add	r3, sp, #28
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	0022      	movs	r2, r4
 8006da4:	0029      	movs	r1, r5
 8006da6:	0030      	movs	r0, r6
 8006da8:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <_vfiprintf_r+0x270>)
 8006daa:	e000      	b.n	8006dae <_vfiprintf_r+0x21a>
 8006dac:	bf00      	nop
 8006dae:	9004      	str	r0, [sp, #16]
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	3301      	adds	r3, #1
 8006db4:	d1d1      	bne.n	8006d5a <_vfiprintf_r+0x1c6>
 8006db6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db8:	07db      	lsls	r3, r3, #31
 8006dba:	d405      	bmi.n	8006dc8 <_vfiprintf_r+0x234>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	059b      	lsls	r3, r3, #22
 8006dc0:	d402      	bmi.n	8006dc8 <_vfiprintf_r+0x234>
 8006dc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc4:	f7ff fd64 	bl	8006890 <__retarget_lock_release_recursive>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	065b      	lsls	r3, r3, #25
 8006dcc:	d500      	bpl.n	8006dd0 <_vfiprintf_r+0x23c>
 8006dce:	e70a      	b.n	8006be6 <_vfiprintf_r+0x52>
 8006dd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006dd2:	e70a      	b.n	8006bea <_vfiprintf_r+0x56>
 8006dd4:	ab07      	add	r3, sp, #28
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	0022      	movs	r2, r4
 8006dda:	0029      	movs	r1, r5
 8006ddc:	0030      	movs	r0, r6
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_vfiprintf_r+0x270>)
 8006de0:	f000 f882 	bl	8006ee8 <_printf_i>
 8006de4:	e7e3      	b.n	8006dae <_vfiprintf_r+0x21a>
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	08007adc 	.word	0x08007adc
 8006dec:	08007afc 	.word	0x08007afc
 8006df0:	08007abc 	.word	0x08007abc
 8006df4:	08007b1c 	.word	0x08007b1c
 8006df8:	08007b22 	.word	0x08007b22
 8006dfc:	08007b26 	.word	0x08007b26
 8006e00:	00000000 	.word	0x00000000
 8006e04:	08006b6f 	.word	0x08006b6f

08006e08 <_printf_common>:
 8006e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e0a:	0015      	movs	r5, r2
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	688a      	ldr	r2, [r1, #8]
 8006e10:	690b      	ldr	r3, [r1, #16]
 8006e12:	000c      	movs	r4, r1
 8006e14:	9000      	str	r0, [sp, #0]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	da00      	bge.n	8006e1c <_printf_common+0x14>
 8006e1a:	0013      	movs	r3, r2
 8006e1c:	0022      	movs	r2, r4
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	3243      	adds	r2, #67	; 0x43
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	d001      	beq.n	8006e2c <_printf_common+0x24>
 8006e28:	3301      	adds	r3, #1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	069b      	lsls	r3, r3, #26
 8006e30:	d502      	bpl.n	8006e38 <_printf_common+0x30>
 8006e32:	682b      	ldr	r3, [r5, #0]
 8006e34:	3302      	adds	r3, #2
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	2306      	movs	r3, #6
 8006e3c:	0017      	movs	r7, r2
 8006e3e:	401f      	ands	r7, r3
 8006e40:	421a      	tst	r2, r3
 8006e42:	d027      	beq.n	8006e94 <_printf_common+0x8c>
 8006e44:	0023      	movs	r3, r4
 8006e46:	3343      	adds	r3, #67	; 0x43
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	1e5a      	subs	r2, r3, #1
 8006e4c:	4193      	sbcs	r3, r2
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	0692      	lsls	r2, r2, #26
 8006e52:	d430      	bmi.n	8006eb6 <_printf_common+0xae>
 8006e54:	0022      	movs	r2, r4
 8006e56:	9901      	ldr	r1, [sp, #4]
 8006e58:	9800      	ldr	r0, [sp, #0]
 8006e5a:	9e08      	ldr	r6, [sp, #32]
 8006e5c:	3243      	adds	r2, #67	; 0x43
 8006e5e:	47b0      	blx	r6
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d025      	beq.n	8006eb0 <_printf_common+0xa8>
 8006e64:	2306      	movs	r3, #6
 8006e66:	6820      	ldr	r0, [r4, #0]
 8006e68:	682a      	ldr	r2, [r5, #0]
 8006e6a:	68e1      	ldr	r1, [r4, #12]
 8006e6c:	2500      	movs	r5, #0
 8006e6e:	4003      	ands	r3, r0
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d103      	bne.n	8006e7c <_printf_common+0x74>
 8006e74:	1a8d      	subs	r5, r1, r2
 8006e76:	43eb      	mvns	r3, r5
 8006e78:	17db      	asrs	r3, r3, #31
 8006e7a:	401d      	ands	r5, r3
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	6922      	ldr	r2, [r4, #16]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	dd01      	ble.n	8006e88 <_printf_common+0x80>
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	18ed      	adds	r5, r5, r3
 8006e88:	2700      	movs	r7, #0
 8006e8a:	42bd      	cmp	r5, r7
 8006e8c:	d120      	bne.n	8006ed0 <_printf_common+0xc8>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	e010      	b.n	8006eb4 <_printf_common+0xac>
 8006e92:	3701      	adds	r7, #1
 8006e94:	68e3      	ldr	r3, [r4, #12]
 8006e96:	682a      	ldr	r2, [r5, #0]
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	ddd2      	ble.n	8006e44 <_printf_common+0x3c>
 8006e9e:	0022      	movs	r2, r4
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	9901      	ldr	r1, [sp, #4]
 8006ea4:	9800      	ldr	r0, [sp, #0]
 8006ea6:	9e08      	ldr	r6, [sp, #32]
 8006ea8:	3219      	adds	r2, #25
 8006eaa:	47b0      	blx	r6
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d1f0      	bne.n	8006e92 <_printf_common+0x8a>
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	4240      	negs	r0, r0
 8006eb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eb6:	2030      	movs	r0, #48	; 0x30
 8006eb8:	18e1      	adds	r1, r4, r3
 8006eba:	3143      	adds	r1, #67	; 0x43
 8006ebc:	7008      	strb	r0, [r1, #0]
 8006ebe:	0021      	movs	r1, r4
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	3145      	adds	r1, #69	; 0x45
 8006ec4:	7809      	ldrb	r1, [r1, #0]
 8006ec6:	18a2      	adds	r2, r4, r2
 8006ec8:	3243      	adds	r2, #67	; 0x43
 8006eca:	3302      	adds	r3, #2
 8006ecc:	7011      	strb	r1, [r2, #0]
 8006ece:	e7c1      	b.n	8006e54 <_printf_common+0x4c>
 8006ed0:	0022      	movs	r2, r4
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	9901      	ldr	r1, [sp, #4]
 8006ed6:	9800      	ldr	r0, [sp, #0]
 8006ed8:	9e08      	ldr	r6, [sp, #32]
 8006eda:	321a      	adds	r2, #26
 8006edc:	47b0      	blx	r6
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d0e6      	beq.n	8006eb0 <_printf_common+0xa8>
 8006ee2:	3701      	adds	r7, #1
 8006ee4:	e7d1      	b.n	8006e8a <_printf_common+0x82>
	...

08006ee8 <_printf_i>:
 8006ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eea:	b08b      	sub	sp, #44	; 0x2c
 8006eec:	9206      	str	r2, [sp, #24]
 8006eee:	000a      	movs	r2, r1
 8006ef0:	3243      	adds	r2, #67	; 0x43
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	9005      	str	r0, [sp, #20]
 8006ef6:	9204      	str	r2, [sp, #16]
 8006ef8:	7e0a      	ldrb	r2, [r1, #24]
 8006efa:	000c      	movs	r4, r1
 8006efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006efe:	2a78      	cmp	r2, #120	; 0x78
 8006f00:	d807      	bhi.n	8006f12 <_printf_i+0x2a>
 8006f02:	2a62      	cmp	r2, #98	; 0x62
 8006f04:	d809      	bhi.n	8006f1a <_printf_i+0x32>
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d100      	bne.n	8006f0c <_printf_i+0x24>
 8006f0a:	e0c1      	b.n	8007090 <_printf_i+0x1a8>
 8006f0c:	2a58      	cmp	r2, #88	; 0x58
 8006f0e:	d100      	bne.n	8006f12 <_printf_i+0x2a>
 8006f10:	e08c      	b.n	800702c <_printf_i+0x144>
 8006f12:	0026      	movs	r6, r4
 8006f14:	3642      	adds	r6, #66	; 0x42
 8006f16:	7032      	strb	r2, [r6, #0]
 8006f18:	e022      	b.n	8006f60 <_printf_i+0x78>
 8006f1a:	0010      	movs	r0, r2
 8006f1c:	3863      	subs	r0, #99	; 0x63
 8006f1e:	2815      	cmp	r0, #21
 8006f20:	d8f7      	bhi.n	8006f12 <_printf_i+0x2a>
 8006f22:	f7f9 f8fb 	bl	800011c <__gnu_thumb1_case_shi>
 8006f26:	0016      	.short	0x0016
 8006f28:	fff6001f 	.word	0xfff6001f
 8006f2c:	fff6fff6 	.word	0xfff6fff6
 8006f30:	001ffff6 	.word	0x001ffff6
 8006f34:	fff6fff6 	.word	0xfff6fff6
 8006f38:	fff6fff6 	.word	0xfff6fff6
 8006f3c:	003600a8 	.word	0x003600a8
 8006f40:	fff6009a 	.word	0xfff6009a
 8006f44:	00b9fff6 	.word	0x00b9fff6
 8006f48:	0036fff6 	.word	0x0036fff6
 8006f4c:	fff6fff6 	.word	0xfff6fff6
 8006f50:	009e      	.short	0x009e
 8006f52:	0026      	movs	r6, r4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	3642      	adds	r6, #66	; 0x42
 8006f58:	1d11      	adds	r1, r2, #4
 8006f5a:	6019      	str	r1, [r3, #0]
 8006f5c:	6813      	ldr	r3, [r2, #0]
 8006f5e:	7033      	strb	r3, [r6, #0]
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0a7      	b.n	80070b4 <_printf_i+0x1cc>
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	6819      	ldr	r1, [r3, #0]
 8006f68:	1d0a      	adds	r2, r1, #4
 8006f6a:	0605      	lsls	r5, r0, #24
 8006f6c:	d50b      	bpl.n	8006f86 <_printf_i+0x9e>
 8006f6e:	680d      	ldr	r5, [r1, #0]
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	2d00      	cmp	r5, #0
 8006f74:	da03      	bge.n	8006f7e <_printf_i+0x96>
 8006f76:	232d      	movs	r3, #45	; 0x2d
 8006f78:	9a04      	ldr	r2, [sp, #16]
 8006f7a:	426d      	negs	r5, r5
 8006f7c:	7013      	strb	r3, [r2, #0]
 8006f7e:	4b61      	ldr	r3, [pc, #388]	; (8007104 <_printf_i+0x21c>)
 8006f80:	270a      	movs	r7, #10
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	e01b      	b.n	8006fbe <_printf_i+0xd6>
 8006f86:	680d      	ldr	r5, [r1, #0]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	0641      	lsls	r1, r0, #25
 8006f8c:	d5f1      	bpl.n	8006f72 <_printf_i+0x8a>
 8006f8e:	b22d      	sxth	r5, r5
 8006f90:	e7ef      	b.n	8006f72 <_printf_i+0x8a>
 8006f92:	680d      	ldr	r5, [r1, #0]
 8006f94:	6819      	ldr	r1, [r3, #0]
 8006f96:	1d08      	adds	r0, r1, #4
 8006f98:	6018      	str	r0, [r3, #0]
 8006f9a:	062e      	lsls	r6, r5, #24
 8006f9c:	d501      	bpl.n	8006fa2 <_printf_i+0xba>
 8006f9e:	680d      	ldr	r5, [r1, #0]
 8006fa0:	e003      	b.n	8006faa <_printf_i+0xc2>
 8006fa2:	066d      	lsls	r5, r5, #25
 8006fa4:	d5fb      	bpl.n	8006f9e <_printf_i+0xb6>
 8006fa6:	680d      	ldr	r5, [r1, #0]
 8006fa8:	b2ad      	uxth	r5, r5
 8006faa:	4b56      	ldr	r3, [pc, #344]	; (8007104 <_printf_i+0x21c>)
 8006fac:	2708      	movs	r7, #8
 8006fae:	9303      	str	r3, [sp, #12]
 8006fb0:	2a6f      	cmp	r2, #111	; 0x6f
 8006fb2:	d000      	beq.n	8006fb6 <_printf_i+0xce>
 8006fb4:	3702      	adds	r7, #2
 8006fb6:	0023      	movs	r3, r4
 8006fb8:	2200      	movs	r2, #0
 8006fba:	3343      	adds	r3, #67	; 0x43
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	60a3      	str	r3, [r4, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	db03      	blt.n	8006fce <_printf_i+0xe6>
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	6821      	ldr	r1, [r4, #0]
 8006fca:	4391      	bics	r1, r2
 8006fcc:	6021      	str	r1, [r4, #0]
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	d102      	bne.n	8006fd8 <_printf_i+0xf0>
 8006fd2:	9e04      	ldr	r6, [sp, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00c      	beq.n	8006ff2 <_printf_i+0x10a>
 8006fd8:	9e04      	ldr	r6, [sp, #16]
 8006fda:	0028      	movs	r0, r5
 8006fdc:	0039      	movs	r1, r7
 8006fde:	f7f9 f92d 	bl	800023c <__aeabi_uidivmod>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	3e01      	subs	r6, #1
 8006fe6:	5c5b      	ldrb	r3, [r3, r1]
 8006fe8:	7033      	strb	r3, [r6, #0]
 8006fea:	002b      	movs	r3, r5
 8006fec:	0005      	movs	r5, r0
 8006fee:	429f      	cmp	r7, r3
 8006ff0:	d9f3      	bls.n	8006fda <_printf_i+0xf2>
 8006ff2:	2f08      	cmp	r7, #8
 8006ff4:	d109      	bne.n	800700a <_printf_i+0x122>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	07db      	lsls	r3, r3, #31
 8006ffa:	d506      	bpl.n	800700a <_printf_i+0x122>
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	6922      	ldr	r2, [r4, #16]
 8007000:	4293      	cmp	r3, r2
 8007002:	dc02      	bgt.n	800700a <_printf_i+0x122>
 8007004:	2330      	movs	r3, #48	; 0x30
 8007006:	3e01      	subs	r6, #1
 8007008:	7033      	strb	r3, [r6, #0]
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	1b9b      	subs	r3, r3, r6
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	9b07      	ldr	r3, [sp, #28]
 8007012:	0021      	movs	r1, r4
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	9805      	ldr	r0, [sp, #20]
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	aa09      	add	r2, sp, #36	; 0x24
 800701c:	f7ff fef4 	bl	8006e08 <_printf_common>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d14c      	bne.n	80070be <_printf_i+0x1d6>
 8007024:	2001      	movs	r0, #1
 8007026:	4240      	negs	r0, r0
 8007028:	b00b      	add	sp, #44	; 0x2c
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702c:	3145      	adds	r1, #69	; 0x45
 800702e:	700a      	strb	r2, [r1, #0]
 8007030:	4a34      	ldr	r2, [pc, #208]	; (8007104 <_printf_i+0x21c>)
 8007032:	9203      	str	r2, [sp, #12]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	6821      	ldr	r1, [r4, #0]
 8007038:	ca20      	ldmia	r2!, {r5}
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	0608      	lsls	r0, r1, #24
 800703e:	d516      	bpl.n	800706e <_printf_i+0x186>
 8007040:	07cb      	lsls	r3, r1, #31
 8007042:	d502      	bpl.n	800704a <_printf_i+0x162>
 8007044:	2320      	movs	r3, #32
 8007046:	4319      	orrs	r1, r3
 8007048:	6021      	str	r1, [r4, #0]
 800704a:	2710      	movs	r7, #16
 800704c:	2d00      	cmp	r5, #0
 800704e:	d1b2      	bne.n	8006fb6 <_printf_i+0xce>
 8007050:	2320      	movs	r3, #32
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	439a      	bics	r2, r3
 8007056:	6022      	str	r2, [r4, #0]
 8007058:	e7ad      	b.n	8006fb6 <_printf_i+0xce>
 800705a:	2220      	movs	r2, #32
 800705c:	6809      	ldr	r1, [r1, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	0022      	movs	r2, r4
 8007064:	2178      	movs	r1, #120	; 0x78
 8007066:	3245      	adds	r2, #69	; 0x45
 8007068:	7011      	strb	r1, [r2, #0]
 800706a:	4a27      	ldr	r2, [pc, #156]	; (8007108 <_printf_i+0x220>)
 800706c:	e7e1      	b.n	8007032 <_printf_i+0x14a>
 800706e:	0648      	lsls	r0, r1, #25
 8007070:	d5e6      	bpl.n	8007040 <_printf_i+0x158>
 8007072:	b2ad      	uxth	r5, r5
 8007074:	e7e4      	b.n	8007040 <_printf_i+0x158>
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	680d      	ldr	r5, [r1, #0]
 800707a:	1d10      	adds	r0, r2, #4
 800707c:	6949      	ldr	r1, [r1, #20]
 800707e:	6018      	str	r0, [r3, #0]
 8007080:	6813      	ldr	r3, [r2, #0]
 8007082:	062e      	lsls	r6, r5, #24
 8007084:	d501      	bpl.n	800708a <_printf_i+0x1a2>
 8007086:	6019      	str	r1, [r3, #0]
 8007088:	e002      	b.n	8007090 <_printf_i+0x1a8>
 800708a:	066d      	lsls	r5, r5, #25
 800708c:	d5fb      	bpl.n	8007086 <_printf_i+0x19e>
 800708e:	8019      	strh	r1, [r3, #0]
 8007090:	2300      	movs	r3, #0
 8007092:	9e04      	ldr	r6, [sp, #16]
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	e7bb      	b.n	8007010 <_printf_i+0x128>
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	1d11      	adds	r1, r2, #4
 800709c:	6019      	str	r1, [r3, #0]
 800709e:	6816      	ldr	r6, [r2, #0]
 80070a0:	2100      	movs	r1, #0
 80070a2:	0030      	movs	r0, r6
 80070a4:	6862      	ldr	r2, [r4, #4]
 80070a6:	f000 f8f5 	bl	8007294 <memchr>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d001      	beq.n	80070b2 <_printf_i+0x1ca>
 80070ae:	1b80      	subs	r0, r0, r6
 80070b0:	6060      	str	r0, [r4, #4]
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	2300      	movs	r3, #0
 80070b8:	9a04      	ldr	r2, [sp, #16]
 80070ba:	7013      	strb	r3, [r2, #0]
 80070bc:	e7a8      	b.n	8007010 <_printf_i+0x128>
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	0032      	movs	r2, r6
 80070c2:	9906      	ldr	r1, [sp, #24]
 80070c4:	9805      	ldr	r0, [sp, #20]
 80070c6:	9d07      	ldr	r5, [sp, #28]
 80070c8:	47a8      	blx	r5
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	d0aa      	beq.n	8007024 <_printf_i+0x13c>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	079b      	lsls	r3, r3, #30
 80070d2:	d415      	bmi.n	8007100 <_printf_i+0x218>
 80070d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d6:	68e0      	ldr	r0, [r4, #12]
 80070d8:	4298      	cmp	r0, r3
 80070da:	daa5      	bge.n	8007028 <_printf_i+0x140>
 80070dc:	0018      	movs	r0, r3
 80070de:	e7a3      	b.n	8007028 <_printf_i+0x140>
 80070e0:	0022      	movs	r2, r4
 80070e2:	2301      	movs	r3, #1
 80070e4:	9906      	ldr	r1, [sp, #24]
 80070e6:	9805      	ldr	r0, [sp, #20]
 80070e8:	9e07      	ldr	r6, [sp, #28]
 80070ea:	3219      	adds	r2, #25
 80070ec:	47b0      	blx	r6
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d098      	beq.n	8007024 <_printf_i+0x13c>
 80070f2:	3501      	adds	r5, #1
 80070f4:	68e3      	ldr	r3, [r4, #12]
 80070f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	42ab      	cmp	r3, r5
 80070fc:	dcf0      	bgt.n	80070e0 <_printf_i+0x1f8>
 80070fe:	e7e9      	b.n	80070d4 <_printf_i+0x1ec>
 8007100:	2500      	movs	r5, #0
 8007102:	e7f7      	b.n	80070f4 <_printf_i+0x20c>
 8007104:	08007b2d 	.word	0x08007b2d
 8007108:	08007b3e 	.word	0x08007b3e

0800710c <_sbrk_r>:
 800710c:	2300      	movs	r3, #0
 800710e:	b570      	push	{r4, r5, r6, lr}
 8007110:	4d06      	ldr	r5, [pc, #24]	; (800712c <_sbrk_r+0x20>)
 8007112:	0004      	movs	r4, r0
 8007114:	0008      	movs	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fb f882 	bl	8002220 <_sbrk>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d103      	bne.n	8007128 <_sbrk_r+0x1c>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d000      	beq.n	8007128 <_sbrk_r+0x1c>
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	bd70      	pop	{r4, r5, r6, pc}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	20000194 	.word	0x20000194

08007130 <__sread>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	000c      	movs	r4, r1
 8007134:	250e      	movs	r5, #14
 8007136:	5f49      	ldrsh	r1, [r1, r5]
 8007138:	f000 f8c8 	bl	80072cc <_read_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	db03      	blt.n	8007148 <__sread+0x18>
 8007140:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007142:	181b      	adds	r3, r3, r0
 8007144:	6563      	str	r3, [r4, #84]	; 0x54
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	4a02      	ldr	r2, [pc, #8]	; (8007154 <__sread+0x24>)
 800714c:	4013      	ands	r3, r2
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	e7f9      	b.n	8007146 <__sread+0x16>
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	ffffefff 	.word	0xffffefff

08007158 <__swrite>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	001f      	movs	r7, r3
 800715c:	898b      	ldrh	r3, [r1, #12]
 800715e:	0005      	movs	r5, r0
 8007160:	000c      	movs	r4, r1
 8007162:	0016      	movs	r6, r2
 8007164:	05db      	lsls	r3, r3, #23
 8007166:	d505      	bpl.n	8007174 <__swrite+0x1c>
 8007168:	230e      	movs	r3, #14
 800716a:	5ec9      	ldrsh	r1, [r1, r3]
 800716c:	2200      	movs	r2, #0
 800716e:	2302      	movs	r3, #2
 8007170:	f000 f87c 	bl	800726c <_lseek_r>
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	4a05      	ldr	r2, [pc, #20]	; (800718c <__swrite+0x34>)
 8007178:	0028      	movs	r0, r5
 800717a:	4013      	ands	r3, r2
 800717c:	81a3      	strh	r3, [r4, #12]
 800717e:	0032      	movs	r2, r6
 8007180:	230e      	movs	r3, #14
 8007182:	5ee1      	ldrsh	r1, [r4, r3]
 8007184:	003b      	movs	r3, r7
 8007186:	f000 f81f 	bl	80071c8 <_write_r>
 800718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800718c:	ffffefff 	.word	0xffffefff

08007190 <__sseek>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	000c      	movs	r4, r1
 8007194:	250e      	movs	r5, #14
 8007196:	5f49      	ldrsh	r1, [r1, r5]
 8007198:	f000 f868 	bl	800726c <_lseek_r>
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	1c42      	adds	r2, r0, #1
 80071a0:	d103      	bne.n	80071aa <__sseek+0x1a>
 80071a2:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <__sseek+0x28>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	2280      	movs	r2, #128	; 0x80
 80071ac:	0152      	lsls	r2, r2, #5
 80071ae:	4313      	orrs	r3, r2
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	6560      	str	r0, [r4, #84]	; 0x54
 80071b4:	e7f8      	b.n	80071a8 <__sseek+0x18>
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	ffffefff 	.word	0xffffefff

080071bc <__sclose>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	230e      	movs	r3, #14
 80071c0:	5ec9      	ldrsh	r1, [r1, r3]
 80071c2:	f000 f81d 	bl	8007200 <_close_r>
 80071c6:	bd10      	pop	{r4, pc}

080071c8 <_write_r>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	0004      	movs	r4, r0
 80071cc:	0008      	movs	r0, r1
 80071ce:	0011      	movs	r1, r2
 80071d0:	001a      	movs	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	4d05      	ldr	r5, [pc, #20]	; (80071ec <_write_r+0x24>)
 80071d6:	602b      	str	r3, [r5, #0]
 80071d8:	f7fa ffd9 	bl	800218e <_write>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d103      	bne.n	80071e8 <_write_r+0x20>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d000      	beq.n	80071e8 <_write_r+0x20>
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	20000194 	.word	0x20000194

080071f0 <abort>:
 80071f0:	2006      	movs	r0, #6
 80071f2:	b510      	push	{r4, lr}
 80071f4:	f000 f8a8 	bl	8007348 <raise>
 80071f8:	2001      	movs	r0, #1
 80071fa:	f7fa ff9f 	bl	800213c <_exit>
	...

08007200 <_close_r>:
 8007200:	2300      	movs	r3, #0
 8007202:	b570      	push	{r4, r5, r6, lr}
 8007204:	4d06      	ldr	r5, [pc, #24]	; (8007220 <_close_r+0x20>)
 8007206:	0004      	movs	r4, r0
 8007208:	0008      	movs	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7fa ffdb 	bl	80021c6 <_close>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d103      	bne.n	800721c <_close_r+0x1c>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d000      	beq.n	800721c <_close_r+0x1c>
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	bd70      	pop	{r4, r5, r6, pc}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	20000194 	.word	0x20000194

08007224 <_fstat_r>:
 8007224:	2300      	movs	r3, #0
 8007226:	b570      	push	{r4, r5, r6, lr}
 8007228:	4d06      	ldr	r5, [pc, #24]	; (8007244 <_fstat_r+0x20>)
 800722a:	0004      	movs	r4, r0
 800722c:	0008      	movs	r0, r1
 800722e:	0011      	movs	r1, r2
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	f7fa ffd2 	bl	80021da <_fstat>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d103      	bne.n	8007242 <_fstat_r+0x1e>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d000      	beq.n	8007242 <_fstat_r+0x1e>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	20000194 	.word	0x20000194

08007248 <_isatty_r>:
 8007248:	2300      	movs	r3, #0
 800724a:	b570      	push	{r4, r5, r6, lr}
 800724c:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_isatty_r+0x20>)
 800724e:	0004      	movs	r4, r0
 8007250:	0008      	movs	r0, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	f7fa ffcf 	bl	80021f6 <_isatty>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d103      	bne.n	8007264 <_isatty_r+0x1c>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d000      	beq.n	8007264 <_isatty_r+0x1c>
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	bd70      	pop	{r4, r5, r6, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	20000194 	.word	0x20000194

0800726c <_lseek_r>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	0004      	movs	r4, r0
 8007270:	0008      	movs	r0, r1
 8007272:	0011      	movs	r1, r2
 8007274:	001a      	movs	r2, r3
 8007276:	2300      	movs	r3, #0
 8007278:	4d05      	ldr	r5, [pc, #20]	; (8007290 <_lseek_r+0x24>)
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	f7fa ffc4 	bl	8002208 <_lseek>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d103      	bne.n	800728c <_lseek_r+0x20>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d000      	beq.n	800728c <_lseek_r+0x20>
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	20000194 	.word	0x20000194

08007294 <memchr>:
 8007294:	b2c9      	uxtb	r1, r1
 8007296:	1882      	adds	r2, r0, r2
 8007298:	4290      	cmp	r0, r2
 800729a:	d101      	bne.n	80072a0 <memchr+0xc>
 800729c:	2000      	movs	r0, #0
 800729e:	4770      	bx	lr
 80072a0:	7803      	ldrb	r3, [r0, #0]
 80072a2:	428b      	cmp	r3, r1
 80072a4:	d0fb      	beq.n	800729e <memchr+0xa>
 80072a6:	3001      	adds	r0, #1
 80072a8:	e7f6      	b.n	8007298 <memchr+0x4>
	...

080072ac <__malloc_lock>:
 80072ac:	b510      	push	{r4, lr}
 80072ae:	4802      	ldr	r0, [pc, #8]	; (80072b8 <__malloc_lock+0xc>)
 80072b0:	f7ff faed 	bl	800688e <__retarget_lock_acquire_recursive>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	20000188 	.word	0x20000188

080072bc <__malloc_unlock>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4802      	ldr	r0, [pc, #8]	; (80072c8 <__malloc_unlock+0xc>)
 80072c0:	f7ff fae6 	bl	8006890 <__retarget_lock_release_recursive>
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	20000188 	.word	0x20000188

080072cc <_read_r>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	0004      	movs	r4, r0
 80072d0:	0008      	movs	r0, r1
 80072d2:	0011      	movs	r1, r2
 80072d4:	001a      	movs	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	4d05      	ldr	r5, [pc, #20]	; (80072f0 <_read_r+0x24>)
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	f7fa ff3a 	bl	8002154 <_read>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d103      	bne.n	80072ec <_read_r+0x20>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d000      	beq.n	80072ec <_read_r+0x20>
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	bd70      	pop	{r4, r5, r6, pc}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	20000194 	.word	0x20000194

080072f4 <_raise_r>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	0004      	movs	r4, r0
 80072f8:	000d      	movs	r5, r1
 80072fa:	291f      	cmp	r1, #31
 80072fc:	d904      	bls.n	8007308 <_raise_r+0x14>
 80072fe:	2316      	movs	r3, #22
 8007300:	6003      	str	r3, [r0, #0]
 8007302:	2001      	movs	r0, #1
 8007304:	4240      	negs	r0, r0
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <_raise_r+0x24>
 800730e:	008a      	lsls	r2, r1, #2
 8007310:	189b      	adds	r3, r3, r2
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	2a00      	cmp	r2, #0
 8007316:	d108      	bne.n	800732a <_raise_r+0x36>
 8007318:	0020      	movs	r0, r4
 800731a:	f000 f831 	bl	8007380 <_getpid_r>
 800731e:	002a      	movs	r2, r5
 8007320:	0001      	movs	r1, r0
 8007322:	0020      	movs	r0, r4
 8007324:	f000 f81a 	bl	800735c <_kill_r>
 8007328:	e7ed      	b.n	8007306 <_raise_r+0x12>
 800732a:	2000      	movs	r0, #0
 800732c:	2a01      	cmp	r2, #1
 800732e:	d0ea      	beq.n	8007306 <_raise_r+0x12>
 8007330:	1c51      	adds	r1, r2, #1
 8007332:	d103      	bne.n	800733c <_raise_r+0x48>
 8007334:	2316      	movs	r3, #22
 8007336:	3001      	adds	r0, #1
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	e7e4      	b.n	8007306 <_raise_r+0x12>
 800733c:	2400      	movs	r4, #0
 800733e:	0028      	movs	r0, r5
 8007340:	601c      	str	r4, [r3, #0]
 8007342:	4790      	blx	r2
 8007344:	0020      	movs	r0, r4
 8007346:	e7de      	b.n	8007306 <_raise_r+0x12>

08007348 <raise>:
 8007348:	b510      	push	{r4, lr}
 800734a:	4b03      	ldr	r3, [pc, #12]	; (8007358 <raise+0x10>)
 800734c:	0001      	movs	r1, r0
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	f7ff ffd0 	bl	80072f4 <_raise_r>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	2000001c 	.word	0x2000001c

0800735c <_kill_r>:
 800735c:	2300      	movs	r3, #0
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	4d06      	ldr	r5, [pc, #24]	; (800737c <_kill_r+0x20>)
 8007362:	0004      	movs	r4, r0
 8007364:	0008      	movs	r0, r1
 8007366:	0011      	movs	r1, r2
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	f7fa fed7 	bl	800211c <_kill>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d103      	bne.n	800737a <_kill_r+0x1e>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d000      	beq.n	800737a <_kill_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	20000194 	.word	0x20000194

08007380 <_getpid_r>:
 8007380:	b510      	push	{r4, lr}
 8007382:	f7fa fec5 	bl	8002110 <_getpid>
 8007386:	bd10      	pop	{r4, pc}

08007388 <_init>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr

08007394 <_fini>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr
